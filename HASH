package kr.co.nicevan.androidnvcat;

import static com.felhr.utils.HexData.stringTobytes;
import static com.posbank.device.common.AscII.CH_ACK;
import static com.posbank.device.common.AscII.CH_NAK;
import static com.posbank.device.common.ReturnValue.RTN_COMM_OK;
import static com.posbank.device.common.ReturnValue.RTN_CONTINUE;
import static kr.co.nicevan.androidnvcat.OneFragment.cbBluetoothuse;
import static kr.co.nicevan.androidnvcat.OneFragment.cbDualScreenuse;
import static kr.co.nicevan.androidnvcat.OneFragment.cbMinimalwindow;
import static kr.co.nicevan.androidnvcat.OneFragment.cbMsgbox;
import static kr.co.nicevan.androidnvcat.OneFragment.cbNocvm;
import static kr.co.nicevan.androidnvcat.OneFragment.cbNosign;
import static kr.co.nicevan.androidnvcat.OneFragment.cbPrinteruse;
import static kr.co.nicevan.androidnvcat.OneFragment.cbRetry;
import static kr.co.nicevan.androidnvcat.OneFragment.cbSignuse;
import static kr.co.nicevan.androidnvcat.OneFragment.cbTitejectuse;
import static kr.co.nicevan.androidnvcat.OneFragment.cbVpnuse;
import static kr.co.nicevan.androidnvcat.OneFragment.etBizaddr;
import static kr.co.nicevan.androidnvcat.OneFragment.etBizname;
import static kr.co.nicevan.androidnvcat.OneFragment.etBizno;
import static kr.co.nicevan.androidnvcat.OneFragment.etCatid;
import static kr.co.nicevan.androidnvcat.OneFragment.etServerip;
import static kr.co.nicevan.androidnvcat.OneFragment.etServerport;
import static kr.co.nicevan.androidnvcat.OneFragment.etTimeout;
import static kr.co.nicevan.androidnvcat.OneFragment.etTimeout2;
import static kr.co.nicevan.androidnvcat.OneFragment.spBaudrate;
import static kr.co.nicevan.androidnvcat.OneFragment.spPortnum;
import static kr.co.nicevan.androidnvcat.OneFragment.spPrintertp;
import static kr.co.nicevan.androidnvcat.OneFragment.spReadertp;
import static kr.co.nicevan.androidnvcat.OneFragment.spsBaudrate;
import static kr.co.nicevan.androidnvcat.OneFragment.spsPortnum;
import static kr.co.nicevan.androidnvcat.permission.BLEPermissionHelper.PERMISSION_CODE;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.ASK;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.Bseed12;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.CSN;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.CardBrand;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.CardCvm;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.DccmsgBuff;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.ENC_TEMP;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.Get_RandomKey;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.HWNUM;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.KeyDownCnt;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.MSK;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.Memset;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.Paygb;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.PopupClose;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.PopupOpen;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.PopupOpenEOT;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.PopupOpenWithClose;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.RECVBuf;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.RND_FORM2;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.RND_P1;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.RND_P2;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.RND_R1;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.RND_R2;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.ReaderSN;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.Roundkey;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.bEncPin;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.sTxtnum;
import static kr.co.nicevan.androidnvcat.shared.SharedManager.bSetenv;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.bTitchk;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.byteArrayToHexString;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.cDEC_READER;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.cENC_POS;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.cENC_POS_temp;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.cENC_READER;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.calculate_interval;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.calculate_interval_tit;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.cashic_dttm;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.dbHelper;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.deleteStatusBar;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.dialog;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.encdata;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.func_code;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.handlertemp;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.hexToBinary;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.icdata;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.initSerial;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.isGetReader;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.isMultipad;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.isSign;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.isrun;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.istep;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.bFirst;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.key_down;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.key_info;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.lb_cardin;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.lb_dead;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.lb_insert;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.lb_poweron;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.lb_sspay;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.length_recv;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.mUart;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.m_Exit;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.reader;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.recent_dev_mac;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.recent_dev_name;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.recvBuff;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.ret;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.sNm2000SendData;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.scr;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.sendBuff;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.signBuff;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.slen;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.space;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.status;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.stracctidx;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.strpindata;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.temp;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.tendtit;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.tstart;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.tstarttit;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.usbService;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.writeBuffer;
import static kr.co.nicevan.androidnvcat.shared.SharedArray.xor_sum;
import static kr.co.nicevan.androidnvcat.shared.SharedManager.SWNUM;
import static kr.co.nicevan.androidnvcat.shared.SharedManager.bApkchk;
import static kr.co.nicevan.androidnvcat.shared.SharedManager.bLogUse;
import static kr.co.nicevan.androidnvcat.shared.SharedManager.bRelease;
import static kr.co.nicevan.androidnvcat.shared.SharedManager.bRooting;
import static kr.co.nicevan.androidnvcat.shared.SharedManager.isBizdown;
import static kr.co.nicevan.androidnvcat.shared.SharedManager.isStatus;
import static kr.co.nicevan.androidnvcat.shared.SharedManager.bCount;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.view.LayoutInflater;
import android.view.View;

import android.content.SharedPreferences;
import android.support.v4.app.Fragment;
import android.support.v4.app.Fragment.*;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Context;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.PendingIntent;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothManager;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.hardware.display.DisplayManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.os.StrictMode;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.view.Display;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;
import com.posbank.device.common.Utils;
import com.posbank.device.screader.kis.protocol.ScrProtocolCom;
import com.zoacardreader.ZOABLEManager;
import com.zoacardreader.ZOACardPeripheral;

import java.io.UnsupportedEncodingException;
import java.lang.ref.WeakReference;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Random;

import kr.co.nicevan.androidnvcat.nm2000.ScannerActivity;
import kr.co.nicevan.androidnvcat.nm2000.ScannerCallback;
import kr.co.nicevan.androidnvcat.nm2000.ZOACardReader;
import kr.co.nicevan.androidnvcat.permission.BLEPermissionHelper;
import kr.co.nicevan.androidnvcat.permission.PermissionRationaleDialogFragment;
import kr.co.nicevan.androidnvcat.shared.AppCheck;
import kr.co.nicevan.androidnvcat.shared.CustomViewPager;
import kr.co.nicevan.androidnvcat.shared.DBHelper;
import kr.co.nicevan.androidnvcat.shared.NiceUniQr;
import kr.co.nicevan.androidnvcat.shared.RootingCheck;
import kr.co.nicevan.androidnvcat.shared.SharedManager;
import kr.co.nicevan.androidnvcat.shared.seedx;
import kr.co.nicevan.pos.PosClient;
import kr.co.nicevan.pos.PosClientDown;
import kr.co.nicevan.signenc.SignEnc;
import okpos.co.kr.payroid.libUart;


public class MainActivity extends AppCompatActivity
        implements PermissionRationaleDialogFragment.PermissionDialogListener, ScannerCallback, ZOACardReader.YTICallback //LJY20230726
{
    private MyHandler mHandler;
    private CustomViewPager vp; //탭 사용을 위한 ViewPager
    private static Button one, two, three, four, five; //탭 버튼
    private LinearLayout mLayoutMainContainer;
    public static SharedManager mSharedManager;

    private String strSend01, strSend02, strSend03, strSend04, strSend05, strSend06, strSend07, strSend08, strSend09, strSend10, strSend11, strSend12, strSend13, strSend14, strSend15, strSend16, strSend17, strSend18, strSend19, strSend20, strSend21, strSend22, strSend23, strSend24, strSend25, strSend26, strSend27, strSend28, strSend29, strSend30;
    private String strDealgb, strDealtp, strWcc, strMoney, strTax, strBongsa, strHalbu, strAgreenum, strAgreedate, strMyunse, strCashnum, strApprtid, strTxtnum, strFiller, strTxt, strDevicegb, strUninum, strDomain, strIpaddr, strDcc1, strDcc2, strDcc3, strSigndata, strStoamt; //OSM20231228 : 주민번호 필드 추가 //LJY20220427 : 서명데이터 필드 추가
    private String mCatid, mMoney, mHalbu, mTax, mBongsa, mHwnum, mServerip, mServerport, mTimeout, EncPin, mApprno, mApprdate, mApprtid, mMyunse, mTxtnum, mTxt, mDevicegb, mFiller, mUninum, mDcc1, mDcc2, mDcc3;
    private handler_thread handlerThread;
    private boolean mIsRegisteredUSB = false;

    public static DisplayManager displayManager; //LJY20221202 : 듀얼 스크린 사용을 위한 객체
    public static Display[] presentationDisplays;

    class Acctinfo //20200316 : 현금IC
    {
        String index;
        String len;
        String accntno;
    }

    private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver() { //OK
        @Override
        public void onReceive(Context context, Intent intent) {
            SharedManager.LogDebug(bLogUse, "debugjy", intent.getAction()); //LJY20230522 : 로그 추가
            switch (intent.getAction()) {
                case UsbService.ACTION_USB_PERMISSION_GRANTED: // USB PERMISSION GRANTED
                    Toast.makeText(context, "시리얼 연결되었습니다.", Toast.LENGTH_LONG).show();
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 시리얼 연결되었습니다.");
                    SharedManager.isStatus = true;

                    try {
                        Thread.sleep(3000); //LJY20200330 : 전원인가 3초로 변경
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    if (bApkchk) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 위변조된 앱입니다.");
                        mSharedManager.getPreferences().edit().putInt("MainVisibleInt", 1).commit(); //LJY20230731 : 1이면 visible
                    } else if (bRooting) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 루팅된 앱입니다.");
                        mSharedManager.getPreferences().edit().putInt("MainVisibleInt", 1).commit(); //LJY20230731 : 1이면 visible
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 시리얼 연결후 상호인증및무결성점검 실행합니다.");
                        mSharedManager.getPreferences().edit().putInt("MainVisibleInt", 0).commit(); //LJY20230731 : 0이면 Invisible
                        OneFragment.performChkvalid(); //USB 연결시 상호인증 및 무결성점검 진행
                    }
                    break;

                case UsbService.ACTION_USB_PERMISSION_NOT_GRANTED: // USB PERMISSION NOT GRANTED
                    Toast.makeText(context, "시리얼 연결 권한이 없어서 앱을 종료됩니다.", Toast.LENGTH_LONG).show();
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 시리얼 연결 권한이 없어서 앱을 종료됩니다.");
                    mSharedManager.getPreferences().edit().putInt("MainVisibleInt", 1).commit(); //LJY20230731 : 1이면 visible
                    mSharedManager.getEditer().putString("HWNUM", "################").commit(); //LJY20220905 : 디폴트값 설정
                    mSharedManager.getEditer().putString("READERSN", "          ").commit(); //LJY20220905 : 디폴트값 설정
                    SharedManager.isStatus = false;
                    //앱종료
                    moveTaskToBack(true);
                    finish();
                    android.os.Process.killProcess(android.os.Process.myPid());
                    break;

                case UsbService.ACTION_NO_USB: // NO USB CONNECTED
                    //Toast.makeText(context, "시리얼 연결이 되지 않았습니다.", Toast.LENGTH_LONG).show(); //LJY20210927 : 주석 처리
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 시리얼 연결이 되지 않았습니다.");
                    mSharedManager.getPreferences().edit().putInt("MainVisibleInt", 1).commit(); //LJY20230731 : 1이면 visible
                    mSharedManager.getEditer().putString("HWNUM", "################").commit(); //LJY20220905 : 디폴트값 설정
                    mSharedManager.getEditer().putString("READERSN", "          ").commit(); //LJY20220905 : 디폴트값 설정
                    SharedManager.isStatus = false;

//                    if(mSharedManager.getPreferences().getBoolean("DeviceList", true) == false && mSharedManager.getPreferences().getInt("MainVisibleInt", 1) == 0) //LJY20230522 : 장비 미연결 시 RESTART API 사용 시 버그
//                        SetResultFunc(RESULT_OK, 1, "정상");
                    if(mSharedManager.getPreferences().getString("Catid", "").length() != 10 || mSharedManager.getPreferences().getString("Bizno", "").length() != 10)
                    {

                    }
//                    else if(mSharedManager.getPreferences().getBoolean("bRESTART", false)) //LJY20240926 : RESTART시 팝업 노출 제거 비활성화     //LJY20231006 : RESTART API 사용 시 팝업 노출 제거
//                    {
//                        mSharedManager.getPreferences().edit().putBoolean("bRESTART", false).commit();
                    moveTaskToBack(true);
//                    }
//                    else if(mSharedManager.getPreferences().getBoolean("DeviceList", true) == false)
//                        PopupOpenWithClose(MainActivity.this, "디바이스 연결상태를 확인해주시길 바랍니다.");

                    break;

                case UsbService.ACTION_USB_DISCONNECTED: // USB DISCONNECTED
                    Toast.makeText(context, "시리얼 연결이 해제되었습니다.", Toast.LENGTH_LONG).show();
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 시리얼 연결이 해제되었습니다.");
                    mSharedManager.getPreferences().edit().putInt("MainVisibleInt", 1).commit(); //LJY20230731 : 1이면 visible
                    mSharedManager.getEditer().putString("HWNUM", "################").commit(); //LJY20220905 : 디폴트값 설정
                    mSharedManager.getEditer().putString("READERSN", "          ").commit(); //LJY20220905 : 디폴트값 설정
                    SharedManager.isStatus = false;
                    //앱종료
                    moveTaskToBack(true);
                    finish();
                    android.os.Process.killProcess(android.os.Process.myPid());
                    break;

                case UsbService.ACTION_USB_NOT_SUPPORTED: // USB NOT SUPPORTED
                    Toast.makeText(context, "지원하지 않는 장치입니다.", Toast.LENGTH_LONG).show();
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 지원하지 않는 장치입니다.");
                    mSharedManager.getPreferences().edit().putInt("MainVisibleInt", 1).commit(); //LJY20230731 : 1이면 visible
                    mSharedManager.getEditer().putString("HWNUM", "################").commit(); //LJY20220905 : 디폴트값 설정
                    mSharedManager.getEditer().putString("READERSN", "          ").commit(); //LJY20220905 : 디폴트값 설정
                    SharedManager.isStatus = false;
                    break;
            }
        }
    };

    private final ServiceConnection usbConnection = new ServiceConnection() { //OK
        @Override
        public void onServiceConnected(ComponentName arg0, IBinder arg1) {
            usbService = ((UsbService.UsbBinder) arg1).getService();
            usbService.setHandler(mHandler);
        }

        @Override
        public void onServiceDisconnected(ComponentName arg0) {
            usbService = null;
        }
    };

    private void checkPermission() { //LJY20230210 : 권한 허용을 위한 함수
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED || ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED || ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.CAMERA, Manifest.permission.READ_PHONE_STATE}, 9999);
        } else {
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] -52:이미 권한 허용된 상태");
            SetResultFunc(RESULT_OK, 1, "이미 권한 허용된 상태");
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { //LJY20230210 : 권한 허용을 위한 콜백함수
        switch (requestCode) {
            case 9999:
                boolean isPermission = true;
                for (int i = 0; i < grantResults.length; i++) { // grantResults[] : 허용된 권한은 0, 거부한 권한은 -1
                    if (grantResults[i] < 0) {
                        isPermission = false;
                    }
                }

                if (isPermission) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] 1:권한 요청 허용");
                    SetResultFunc(RESULT_OK, 1, "권한 요청 허용");
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] -51:권한 요청 거절");
                    SetResultFunc(RESULT_CANCELED, -51, "권한 요청 거절");
                }
                break;
            case PERMISSION_CODE: //LJY20230726 //0x1004
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PERMISSION_CODE Result : " + permissions.toString() + ", " + grantResults.toString());

                for (int result : grantResults) {
                    if (result != PackageManager.PERMISSION_GRANTED) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] result != PackageManager.PERMISSION_GRANTED");
//                        this.finish();
                        return;
                    }
                }
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] result == PackageManager.PERMISSION_GRANTED");
//                on_permission_granted();

                break;
        }
    }

    @Override
    protected void onRestart() {
        super.onRestart();
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] onRestart");

        //LJY20220427 : NVCAT 두번째 시작시 화면 보이도록 로직 수정
//        LinearLayout mllmain = (LinearLayout) findViewById(R.id.llmain);
//        mllmain.setVisibility(View.VISIBLE);
        mLayoutMainContainer.setBackgroundColor(Color.BLACK);
        mLayoutMainContainer.setVisibility(View.VISIBLE);
//        mSharedManager.getPreferences().edit().putBoolean("MainVisible", true).commit();
//        mSharedManager.getPreferences().edit().putInt("MainVisibleInt", 1).commit(); //LJY20220913 : INT 형으로 변경

    }

    @Override
    public void onScannerDeviceSelected(ZOACardPeripheral device) //LJY20230726
    {
        try {
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] onScannerDeviceSelected");

            ZOACardReader reader = new ZOACardReader(device);

            recent_dev_mac = device.getMACAddress();
            recent_dev_name = device.name;

            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] Selected recent_dev_mac : " + recent_dev_mac);
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] Selected recent_dev_name : " + recent_dev_name);

//            SharedPreferences pref = getSharedPreferences("setting", MODE_PRIVATE);
//            SharedPreferences.Editor editor = pref.edit();
//            editor.putString("dev_MAC", recent_dev_mac);
//            editor.putString("dev_NAME", recent_dev_name);
//            editor.commit();

            mSharedManager.getPreferences().edit().putString("dev_MAC", recent_dev_mac).commit();
            mSharedManager.getPreferences().edit().putString("dev_NAME", recent_dev_name).commit();

            // card reader 메시지를 수신한다
            reader.addDelegate(this);
            reader.connect();
        } catch (Exception ex) {
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] Exception : " + ex.getMessage());
        }
    }

    @Override
    public void onScannerCancelled() //LJY20230726
    {
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] onScannerCancelled");
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // YTICallback implementation
    @Override
    public void CardReaderConnected() { //LJY20230726
        Toast.makeText(MainActivity.this, "NM-2000 Connected", Toast.LENGTH_SHORT).show();
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] CardReaderConnected");

        try {
            on_print_text(sNm2000SendData);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void CardReaderDisconnected() //LJY20230726
    {
        Toast.makeText(MainActivity.this, "NM-2000 Disconnected", Toast.LENGTH_SHORT).show();
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] CardReaderDisconnected");

        // card reader 메시지를 더이상 수신하지 않음
        ZOACardReader.currentDevice.removeDelegate(this);
    }

    @Override
    public void CardReaderReceivedPacket(byte cmd, byte[] data) //LJY20230726
    {
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] CardReaderReceivedPacket");
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] cmd : [" + cmd + "]");
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] data : [" + new String(data) + "]");
    }

    @Override
    public void CardReaderReceivedPlainData(byte[] data) //LJY20230726
    {
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] CardReaderReceivedPlainData");
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] data : [" + new String(data) + "]");
    }

    @Override
    public void CardReaderReceivedData(byte[] data) //LJY20230726
    {
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] CardReaderReceivedData");
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] data : [" + new String(data) + "]");

        reader.disconnect();
        reader.removeDelegate(this);
    }

    @Override
    public void CardReaderMessage(String message) //LJY20230726
    {
        SharedManager.LogDebug(bLogUse, "debugjy", "CardReaderMessage");
    }

    @Override
    public void CardReaderStateChanged(ZOACardPeripheral.DeviceState state) //LJY20230726
    {
        switch (state) {
            case notSupported:
                SharedManager.LogDebug(bLogUse, "debugjy", "지원하지 않음 - notSupported");
                break;
            case connecting:
                SharedManager.LogDebug(bLogUse, "debugjy", "연결 하는 중... - connecting");
                break;
            case connected:
                SharedManager.LogDebug(bLogUse, "debugjy", "연결됨 - connected");
                break;
            case ready:
                SharedManager.LogDebug(bLogUse, "debugjy", "준비됨 - ready");
                break;
            case disconnected:
                SharedManager.LogDebug(bLogUse, "debugjy", "연결이 종료 됨 - disconnected");
                break;
            case disconnecting:
                SharedManager.LogDebug(bLogUse, "debugjy", "종료하는 중... - disconnecting");
                break;
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // 권한 확인 및 알림
    public void requestRequiredPermissions() //LJY20230726
    {
        SharedManager.LogDebug(bLogUse, "debugjy", "requestRequiredPermissions");
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            // Check if application has right permission
            if (!BLEPermissionHelper.hasPermission(this)) {
                final PermissionRationaleDialogFragment dialog = PermissionRationaleDialogFragment.getInstance("정상적으로 사용하기 위해서 Bluetooth 장치 접근 권한이 필요합니다");
                dialog.show(getSupportFragmentManager(), null);
            } else {
//                on_permission_granted();
            }
        }
    }

    // PermissionRationaleDialogFragment Listener handler
    @Override
    public void onRequestPermission() //LJY20230726
    {
        SharedManager.LogDebug(bLogUse, "debugjy", "onRequestPermission");
        // 사용자가 확인을 눌렀으므로, Permission을 요청한다
        BLEPermissionHelper.requestPermission(this);
    }

    //    @Override
    public void onCancellingPermissionRationale() {
        SharedManager.LogDebug(bLogUse, "debugjy", "onCancellingPermissionRationale");
        //this.finish();
    }

    void on_permission_granted() {
        //OKBLEManager.getInstance(this).startDiscover();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // BLE 상태 모니터링
    static final int REQUEST_ENABLE_BT = 1020;

    private boolean ensureBleExists() {
        if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {
            Toast.makeText(MainActivity.this, "B/T 지원하지 않음", Toast.LENGTH_LONG).show();
            return false;
        }
        return true;
    }

    private void initialize() {
        recent_dev_mac = mSharedManager.getPreferences().getString("dev_MAC", "");
        recent_dev_name = mSharedManager.getPreferences().getString("dev_NAME", "");

//        SharedPreferences pref = getSharedPreferences("setting", MODE_PRIVATE);
//        recent_dev_mac = pref.getString("dev_MAC", "");
//        recent_dev_name= pref.getString("dev_NAME", "");

//        Toast.makeText(MainActivity.this, recent_dev_name, Toast.LENGTH_LONG).show();

        SharedManager.LogDebug(bLogUse, "debugjy", "initialize : " + recent_dev_name);
    }

    private boolean isBleEnabled() {
        SharedManager.LogDebug(bLogUse, "debugjy", "isBleEnabled");

        final BluetoothManager bm = (BluetoothManager) getSystemService(BLUETOOTH_SERVICE);
        final BluetoothAdapter ba = bm.getAdapter();
        return ba != null && ba.isEnabled();
    }

    private void enableBle() {
        SharedManager.LogDebug(bLogUse, "debugjy", "enableBle");

        final Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
        startActivityForResult(enableIntent, REQUEST_ENABLE_BT);
    }

    public static void on_scan_device(FragmentActivity activity) {
        SharedManager.LogDebug(bLogUse, "debugjy", "on_scan_device");

        final ScannerActivity dialog = new ScannerActivity();
        dialog.show(activity.getSupportFragmentManager(), "scanner");
    }

    // 13. text print-out
    public void on_print_text(String senddata) throws Exception //??
    {
        SharedManager.LogDebug(bLogUse, "debugjy", "on_print_text");

        byte buf[] = senddata.getBytes("EUC-KR");

        reader = ZOACardReader.currentDevice;
        reader.print(buf);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.activity_main);
        getWindow().setStatusBarColor(Color.TRANSPARENT);

        deleteStatusBar(getWindow()); //OSM20230911 : 결제 팝업 시 하단 네비게이션 바 제거

        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] DATE    : 24.07.22.1"); //OSM20240722 : 날짜변경
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] VERSION : " + SWNUM);

        //JDK20230220
        SharedManager.GetDevicesUUID(MainActivity.this);

        //LJY20220427 : OKPOS 개발시에만 잠시 제거한 내용 해제
        if (RootingCheck.checkSuperUser()) { //루팅된 장비인경우
            bRooting = true;
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 루팅된 장비입니다.");
        }
//        if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED) { //20200318 : 앱 권한 체크
//
//        }
//        else
//        {
//            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_PHONE_STATE}, 1);
//        }
//
//        checkPermission(); //20200318 : 앱권한

        mLayoutMainContainer = findViewById(R.id.layout_container); //투명액티비티를 위한 컨테이너
        mSharedManager = SharedManager.getInstance(getApplicationContext());

        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] onCreate");
        Intent intent = getIntent();
        String action = intent.getAction();
        String type = intent.getType();

        //LJY20201217 : NVCAT 종료 중에도 호출 되도록 로직 변경
        dbHelper = new DBHelper(this, "ANDROIDNVCAT.db", null, 1); //"ANDROIDNVCAT.db" 위치에 DB 저장

        displayManager = (DisplayManager) this.getSystemService(Context.DISPLAY_SERVICE); //LJY20221202 : 듀얼 스크린 사용 시 사용
        presentationDisplays = displayManager.getDisplays(DisplayManager.DISPLAY_CATEGORY_PRESENTATION);

//        if(mSharedManager.getPreferences().getBoolean("Printeruse", false) && mSharedManager.getPreferences().getInt("Printertype", 0) == 0) { //LJY20230726
        if (mSharedManager.getPreferences().getBoolean("Bluetoothuse", false)) { //LJY20230726
            // Ensure that Bluetooth exists
            if (!ensureBleExists()) //LJY20230726
            {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] !ensureBleExists()");
                return;
            }

            initialize();
        }

        if ("NICEVCAT".equals(action) && type != null) { //요청전문 받음
            //LJY20211119 : 터치패드 호출시 네비게이션 바 안보이게 변경
            View decorView = getWindow().getDecorView();
            int uiOption;
            uiOption = getWindow().getDecorView().getSystemUiVisibility();
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)
                uiOption |= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN)
                uiOption |= View.SYSTEM_UI_FLAG_FULLSCREEN;
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)
                uiOption |= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;

            decorView.setSystemUiVisibility(uiOption);

            //LJY20201217 : NVCAT 종료 중에도 호출 되도록 로직 변경
            StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectNetwork().penaltyLog().build()); //인터넷연결 관련 쓰레드 정책 추가

            if (intent.getStringExtra("NVCATSENDDATA").equals("REQSELECTBTN")) //LJY20230713 : 사용자 선택 버튼 (터치)
            {
                findViewById(R.id.vp).setVisibility(View.INVISIBLE);
                findViewById(R.id.one).setVisibility(View.INVISIBLE);
                findViewById(R.id.two).setVisibility(View.INVISIBLE);
                findViewById(R.id.three).setVisibility(View.INVISIBLE);
                findViewById(R.id.four).setVisibility(View.INVISIBLE);
                findViewById(R.id.five).setVisibility(View.INVISIBLE);

                String sType = intent.getStringExtra("TYPE"); //"1" : 서명패드, "2" : 터치스크린
                String sSendData = intent.getStringExtra("SENDDATA"); //디스플레이 문자열 (최대 40바이트)
                SharedManager.LogDebug(bLogUse, "debugjy", "[Type] : " + sType);
                SharedManager.LogDebug(bLogUse, "debugjy", "[SendData] : " + sSendData);

                if (sType.equals("2")) { //터치스크린 시 initViews 전에 호출
                    AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);

                    builder.setMessage(sSendData);
                    builder.setPositiveButton("예",
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] : 예(01) 클릭 (터치)");
                                    SetResultFunc(RESULT_OK, 1, "01");
                                }
                            });
                    builder.setNegativeButton("아니오",
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] : 아니오(02) 클릭 (터치)");
                                    SetResultFunc(RESULT_OK, 1, "02");
                                }
                            });
                    builder.setOnCancelListener(new DialogInterface.OnCancelListener() {
                        @Override
                        public void onCancel(DialogInterface dialogInterface) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] : 아니오(02) 클릭 (터치)");
                            SetResultFunc(RESULT_CANCELED, -7, "요청 취소");
                        }
                    });
                    builder.show();
                    return;
                }
                //터치스크린 외에 initViews 후 호출
            }

            if (mSharedManager.getPreferences().getInt("Readertype", 0) == 0 || mSharedManager.getPreferences().getInt("Readertype", 0) == 1 || mSharedManager.getPreferences().getInt("Readertype", 0) == 4 || mSharedManager.getPreferences().getInt("Readertype", 0) == 5) //LJY20230911 : TITENG 리더기 추가 //LJY20220816 : 조은소프트웨어 추가 //OKPOS
                initViews();

            if (bRooting) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -20:루팅된 장비입니다.");
                SetResultFunc(RESULT_CANCELED, -20, "루팅된 장비입니다.");

                dialog = new Dialog(MainActivity.this);
//                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
                dialog.setContentView(R.layout.activity_popup_dialog);
                dialog.setCancelable(false);
//                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
                dialog.getWindow().getDecorView().setBackgroundResource(R.drawable.bg_dialog);
                ((TextView) dialog.findViewById(R.id.tvpopup)).setText("루팅된 장비입니다.");
                ((ImageView) dialog.findViewById(R.id.iv_card)).setVisibility(View.GONE);
                ((TextView) dialog.findViewById(R.id.tv_guide_dock_card)).setVisibility(View.GONE);
                ((TextView) dialog.findViewById(R.id.tv_guide_payment)).setVisibility(View.GONE);
                ((TextView) dialog.findViewById(R.id.tv_guide_auto_cancel)).setVisibility(View.GONE);
                ((Button) dialog.findViewById(R.id.btrooting)).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //앱 권한 없을시 앱 종료
                        moveTaskToBack(true);
                        finish();
                        android.os.Process.killProcess(android.os.Process.myPid());
                        return;
                    }
                });
                dialog.show();
                return;
            }

            if (SharedManager.bStart == true) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -17:중복 요청 불가");
                SetResultFunc(RESULT_CANCELED, -17, "중복 요청 불가");
                return;
            }
            SharedManager.bStart = true;

            //LJY20221202 : POS > NVCAT 환경 설정을 위한 함수
            if (intent.getStringExtra("NVCATSENDDATA").equals("SETENVSTRING")) {
                bSetenv = true;
                String sEnvKey = intent.getStringExtra("KEY");
                String sEnvValue = intent.getStringExtra("VALUE");
                mSharedManager.getPreferences().edit().putString(sEnvKey, sEnvValue).commit();

                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] : 환경설정 완료 (STRING)");
                SetResultFunc(RESULT_OK, 1, "환경설정 완료 (STRING)");
            } else if (intent.getStringExtra("NVCATSENDDATA").equals("SETENVBOOL")) {
                bSetenv = true;
                String sEnvKey = intent.getStringExtra("KEY");
                Boolean sEnvValue = intent.getBooleanExtra("VALUE", false);
                mSharedManager.getPreferences().edit().putBoolean(sEnvKey, sEnvValue).commit();

                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] : 환경설정 완료 (BOOL)");
                SetResultFunc(RESULT_OK, 1, "환경설정 완료 (BOOL)");
            } else if (intent.getStringExtra("NVCATSENDDATA").equals("SETENVINT")) {
                bSetenv = true;
                String sEnvKey = intent.getStringExtra("KEY");
                int sEnvValue = intent.getIntExtra("VALUE", 0);
                mSharedManager.getPreferences().edit().putInt(sEnvKey, sEnvValue).commit();

                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] : 환경설정 완료 (INT)");
                SetResultFunc(RESULT_OK, 1, "환경설정 완료 (INT)");
            } else if (intent.getStringExtra("NVCATSENDDATA").equals("GETENVSTRING")) { //OSM20240201 : 환경설정 읽어오기 추가
                SharedManager.LogDebug(bLogUse, "debugjy","[NVCAT] GETENVSTRING API 실행되었습니다.");
                SharedManager.LogDebug(bLogUse, "debugjy", mSharedManager.getPreferences().getString(intent.getStringExtra("KEY"), intent.getStringExtra("VALUE")));
                SetResultFunc(RESULT_OK, 1, mSharedManager.getPreferences().getString(intent.getStringExtra("KEY"), ""));
            } else if (intent.getStringExtra("NVCATSENDDATA").equals("GETENVBOOL")) {
                SharedManager.LogDebug(bLogUse, "debugjy","[NVCAT] GETENVBOOL API 실행되었습니다.");
                SharedManager.LogDebug(bLogUse, "debugjy",String.valueOf(mSharedManager.getPreferences().getBoolean(intent.getStringExtra("KEY"), false)));
                SetResultFunc(RESULT_OK, 1, String.valueOf(mSharedManager.getPreferences().getBoolean(intent.getStringExtra("KEY"), false)));
            } else if (intent.getStringExtra("NVCATSENDDATA").equals("GETENVINT")) {
                SharedManager.LogDebug(bLogUse, "debugjy","[NVCAT] GETENVINT API 실행되었습니다.");
                SharedManager.LogDebug(bLogUse, "debugjy", String.valueOf(mSharedManager.getPreferences().getInt(intent.getStringExtra("KEY"), 0)));
                SetResultFunc(RESULT_OK, 1, String.valueOf(mSharedManager.getPreferences().getInt(intent.getStringExtra("KEY"), 0)));
            } else if (intent.getStringExtra("NVCATSENDDATA").equals("NICEDOWN")) //LJY20200331 : 가맹점다운로드 추가
            {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 가맹점다운로드 버튼 클릭되었습니다.");

                isBizdown = false;
                byte[] sendBuff = ("0109770G3" + mSharedManager.getPreferences().getString("Bizno", "          ") + mSharedManager.getPreferences().getString("Catid", "          ") + "11002091702027700000000                                       10                                                                    ").getBytes();
                byte[] recvBuff = new byte[512];

                PosClientDown posClient = new PosClientDown();
                recvBuff = posClient.service("211.33.136.9", 9002, sendBuff);
                try {
                    if (new String(recvBuff, "EUC-KR").equals("-1")) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -1 : 가맹점다운로드 서버 연결 실패");
                        Toast.makeText(MainActivity.this, "-1 : 가맹점다운로드 서버 연결 실패", Toast.LENGTH_SHORT).show();
                        SetResultFunc(RESULT_CANCELED, -1, "가맹점다운로드 서버 연결 실패");
                    } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -2 : 가맹점다운로드 서버 전문 송신 실패");
                        Toast.makeText(MainActivity.this, "-2 : 가맹점다운로드 서버 전문 송신 실패", Toast.LENGTH_SHORT).show();
                        SetResultFunc(RESULT_CANCELED, -2, "가맹점다운로드 서버 전문 송신 실패");
                    } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -3 : 가맹점다운로드 서버 전문 수신 실패");
                        Toast.makeText(MainActivity.this, "-3 : 가맹점다운로드 서버 전문 수신 실패", Toast.LENGTH_SHORT).show();
                        SetResultFunc(RESULT_CANCELED, -3, "가맹점다운로드 서버 전문 수신 실패");
                    } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -4 : 가맹점다운로드 서버 전문 길이 오류");
                        Toast.makeText(MainActivity.this, "-4 : 가맹점다운로드 서버 전문 길이 오류", Toast.LENGTH_SHORT).show();
                        SetResultFunc(RESULT_CANCELED, -4, "가맹점다운로드 서버 전문 길이 오류");
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] recvBuff : " + new String(recvBuff, "EUC-KR"));
                        if (!new String(recvBuff, 29, 4, "EUC-KR").equals("0000")) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 가맹점다운로드 실패 (응답코드 : " + new String(recvBuff, 29, 4, "EUC-KR") + ")");
                            Toast.makeText(MainActivity.this, "가맹점다운로드 실패 (응답코드 : " + new String(recvBuff, 29, 4, "EUC-KR") + ")", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -5, "가맹점다운로드 실패 (응답코드 : " + new String(recvBuff, 29, 4, "EUC-KR") + ")");
                        } else {
                            mSharedManager.getPreferences().edit().putString("Bizname", new String(recvBuff, 134, 34, "EUC-KR")).commit();
                            mSharedManager.getPreferences().edit().putString("Bizaddr", new String(recvBuff, 208, 50, "EUC-KR")).commit();
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 가맹점다운로드 성공");
                            Toast.makeText(MainActivity.this, "가맹점다운로드 성공", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_OK, 1, "가맹점다운로드 성공");
                            isBizdown = true;
                        }
                    }
                    return;
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }
            }
            //LJY20201021 : NVCAT 재시작 순서 변경
            else if (intent.getStringExtra("NVCATSENDDATA").equals("RESTART")) //20200226 : NVCAT 재시작
            {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] NVCAT 재시작 버튼 클릭되었습니다.");
                Toast.makeText(MainActivity.this, "NVCAT 재시작 버튼 클릭되었습니다.", Toast.LENGTH_SHORT).show();

                mSharedManager.getPreferences().edit().putBoolean("bRESTART", true).commit(); //LJY20231006 : RESTART API 사용 시 팝업 노출 제거

                //앱 재시작 //20200318 : 변경
                //LJY20210727 : RESTART 로직 수정
                //OneFragment.performSetenv(); //SETENV
//                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit(); //LJY20220427 : NVCAT 재시작시 팝업만 보이도록 로직 수정
//                mSharedManager.getPreferences().edit().putInt("MainVisibleInt", 0).commit(); //LJY20220913 : INT 형으로 변경

                SetResultFunc(RESULT_OK, 1, "정상");

                Context currentActivity = getApplication();
                Intent startIntent = new Intent(currentActivity, MainActivity.class);
                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
                currentActivity.startActivity(restartIntent);
                System.exit(0);
                return;
            }
            //OSM20230713 : NVCAT 강제종료 버튼 구현
            else if (intent.getStringExtra("NVCATSENDDATA").equals("SHUTDOWN")) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] NVCAT 종료 버튼 클릭되었습니다.");
                Toast.makeText(MainActivity.this, "NVCAT 종료 버튼 클릭되었습니다.", Toast.LENGTH_SHORT).show();

                SetResultFunc(RESULT_OK, 1, "정상");

                System.exit(0);
                return;
            }

            //OSM20240722 : 설정저장 API 추가 (화이트블록 전용)
            else if (intent.getStringExtra("NVCATSENDDATA").equals("SETENV_WB")) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 설정저장 버튼 클릭되었습니다.");
                Toast.makeText(MainActivity.this, "설정저장 버튼 클릭되었습니다.", Toast.LENGTH_SHORT).show();

                //OSM20240729 : Getenv 진행 후 설정 저장 로직 진행
                cbMsgbox.setChecked(mSharedManager.getPreferences().getBoolean("Msgbox", false));
                cbRetry.setChecked(mSharedManager.getPreferences().getBoolean("Retry", false));
                cbNocvm.setChecked(mSharedManager.getPreferences().getBoolean("Nocvm", false));
                cbNosign.setChecked(mSharedManager.getPreferences().getBoolean("Nosign", false));
                cbSignuse.setChecked(mSharedManager.getPreferences().getBoolean("Signuse", false)); //LJY20220427 : 서명 사용 여부 체크 박스
                cbDualScreenuse.setChecked(mSharedManager.getPreferences().getBoolean("DualScreenuse", false)); //LJY20221202 : 듀얼 스크린 사용 체크 박스
                cbMinimalwindow.setChecked(mSharedManager.getPreferences().getBoolean("Minimalwindow", false)); //OSM20240429 : 창 최소화 사용 체크박스
                cbVpnuse.setChecked(mSharedManager.getPreferences().getBoolean("Vpnuse", false)); //LJY20230111 : 전용회선 사용 체크 박스
                cbPrinteruse.setChecked(mSharedManager.getPreferences().getBoolean("Printeruse", false)); //LJY20230726
                cbBluetoothuse.setChecked(mSharedManager.getPreferences().getBoolean("Bluetoothuse", false)); //LJY20230726
                cbTitejectuse.setChecked(mSharedManager.getPreferences().getBoolean("Titejectuse", false)); //LJY20231019 : TIT 카드 수동배출 추가
                spReadertp.setSelection(mSharedManager.getPreferences().getInt("Readertype", 0));
                spPrintertp.setSelection(mSharedManager.getPreferences().getInt("Printertype", 0)); //LJY20230726
                spPortnum.setSelection(mSharedManager.getPreferences().getInt("Portnum", 0)); //20200108LJY
                spBaudrate.setSelection(mSharedManager.getPreferences().getInt("Baudrate", 0));
//                spDeviceid.setSelection(mSharedManager.getPreferences().getInt("Deviceid", 0));
                //spbaudratestr = mSharedManager.getPreferences().getString("BaudrateStr", "115200");
                //LJY20201217 : 서명패드 정보 추가
                spsPortnum.setSelection(mSharedManager.getPreferences().getInt("sPortnum", 0));
                spsBaudrate.setSelection(mSharedManager.getPreferences().getInt("sBaudrate", 0));
                //sbaudratestr = mSharedManager.getPreferences().getString("sBaudrateStr", "115200");
                etTimeout.setText(mSharedManager.getPreferences().getString("Timeout", "30"));
                etTimeout2.setText(mSharedManager.getPreferences().getString("Timeout2", "10"));
                etCatid.setText(mSharedManager.getPreferences().getString("Catid", ""));
                etBizno.setText(mSharedManager.getPreferences().getString("Bizno", ""));
                etBizname.setText(mSharedManager.getPreferences().getString("Bizname", ""));
                etBizaddr.setText(mSharedManager.getPreferences().getString("Bizaddr", ""));
                etServerip.setText(mSharedManager.getPreferences().getString("Serverip", ""));
                etServerport.setText(mSharedManager.getPreferences().getString("Serverport", ""));

                SharedPreferences.Editor editor = mSharedManager.getPreferences().edit();
                editor.putBoolean("Msgbox", cbMsgbox.isChecked());
                editor.putBoolean("Retry", cbRetry.isChecked());
                editor.putBoolean("Nocvm", cbNocvm.isChecked());
                editor.putBoolean("Nosign", cbNosign.isChecked());
                editor.putBoolean("Signuse", cbSignuse.isChecked()); //LJY20220427 : 서명 사용 여부 체크 박스
                editor.putBoolean("DualScreenuse", cbDualScreenuse.isChecked()); //LJY20221202 : 듀얼 스크린 사용 체크 박스
                editor.putBoolean("Minimalwindow", cbMinimalwindow.isChecked()); //OSM20240429 : 창 최소화 사용 체크박스
                editor.putBoolean("Vpnuse", cbVpnuse.isChecked()); //LJY20230111 : 전용회선 사용 체크 박스
                editor.putBoolean("Printeruse", cbPrinteruse.isChecked()); //LJY20230726
                editor.putBoolean("Bluetoothuse", cbBluetoothuse.isChecked()); //LJY20230726
                editor.putBoolean("Titejectuse", cbTitejectuse.isChecked()); //LJY20231019 : TIT 카드 수동배출 추가
                editor.putInt("Readertype", spReadertp.getSelectedItemPosition());
                editor.putInt("Printertype", spPrintertp.getSelectedItemPosition()); //LJY20230726
                editor.putInt("Portnum", spPortnum.getSelectedItemPosition()); //20200108LJY
                editor.putInt("Baudrate", spBaudrate.getSelectedItemPosition());
                editor.putString("BaudrateStr", spBaudrate.getSelectedItem().toString());
                //LJY20201217 : 서명패드 정보 추가
                editor.putInt("sPortnum", spsPortnum.getSelectedItemPosition());
                editor.putInt("sBaudrate", spsBaudrate.getSelectedItemPosition());
                editor.putString("sBaudrateStr", spsBaudrate.getSelectedItem().toString());
                editor.putString("Timeout", etTimeout.getText().toString());
                editor.putString("Timeout2", etTimeout2.getText().toString());
                editor.putString("Timeout3", etTimeout2.getText().toString());
                editor.putString("Catid", etCatid.getText().toString());
                editor.putString("Bizno", etBizno.getText().toString());
                editor.putString("Bizname", etBizname.getText().toString());
                editor.putString("Bizaddr", etBizaddr.getText().toString());
                editor.putString("Serverip", etServerip.getText().toString());
                editor.putString("Serverport", etServerport.getText().toString());
                editor.commit();

                SetResultFunc(RESULT_OK, 1, "정상");

//                Context currentActivity = getApplication();
//                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                currentActivity.startActivity(restartIntent);
//                System.exit(0);
                return;
            }

            if (!SharedManager.isBizdown) {
                //LJY20200812 : 가맹점다운로드 예외처리
//                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -22:가맹점다운로드 해주시길 바랍니다.");
//                Toast.makeText(MainActivity.this, "가맹점다운로드 해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
//                SetResultFunc(RESULT_CANCELED, -22, "가맹점다운로드 해주시길 바랍니다.");
//                return;
            }
//            if (SharedManager.isStatus == false) {
            //LJY20201217 : NVCAT 종료 중에도 호출 되도록 로직 변경
            //LJY20210727 : NVCAT 리더기 상태 체크 로직 수정
            /*
            if (SharedManager.isStatus == false && (mSharedManager.getPreferences().getInt("Readertype", 0) == 0 || mSharedManager.getPreferences().getInt("Readertype", 0) == 1)) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                return;
            }
            */
//            mLayoutMainContainer.setVisibility(View.INVISIBLE);
            mLayoutMainContainer.setVisibility(View.GONE);

            String sharedText = intent.getStringExtra("NVCATSENDDATA");
            SharedManager.LogDebug(bLogUse, "debugjy", "[POS -> NVCAT] SendData : [" + sharedText + "]");

            if (sharedText.equals("TITCOMM")) { //LJY20230911 : TITENG 리더기 연동 API
                byte[] bSendByte = intent.getStringExtra("SENDDATA").getBytes();

                int ret = TitComm(bSendByte[0]);

                if (ret == -15) {
                    Toast.makeText(MainActivity.this, "-15 : USB 서비스 불가능! NVCAT 재시작 필요!", Toast.LENGTH_SHORT).show();
                    SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                    return;
                }

                new TitCommAsyncTask().performAsyncTask(new TitCommCallback() {
                    @Override
                    public void onSuccess(CallbackResult result) { //성공
                        SetResultFunc(RESULT_OK, 1, result.getResult1());
                    }

                    @Override
                    public void onFailure(Throwable throwable) { //실패
                        SetResultFunc(RESULT_CANCELED, -1, throwable.getMessage());
                    }
                });
            } else if (sharedText.equals("NICEPRINT")) { //LJY20230210 : 권한 허용을 위한 API
                if (mSharedManager.getPreferences().getBoolean("Printeruse", false) && mSharedManager.getPreferences().getInt("Printertype", 0) == 0) { //LJY20230726
                    try {
                        sNm2000SendData = "";
                        String sEnvValue = intent.getStringExtra("SENDDATA");
                        sNm2000SendData = sEnvValue;
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] sNm2000SendData : " + sNm2000SendData);

                        ZOACardPeripheral device = ZOABLEManager.getInstance(this).createFromMACAddress(recent_dev_mac, recent_dev_name);
                        reader = new ZOACardReader(device);

                        reader.addDelegate(this); // card reader 메시지를 수신한다
                        reader.connect();
//                    on_print_text(sEnvValue);
                    } catch (Exception e) {
                        e.printStackTrace();
                        SetResultFunc(RESULT_CANCELED, -1, "블루투스 설정 필요");
                    }
                    SetResultFunc(RESULT_OK, 1, "성공");
                } else
                    SetResultFunc(RESULT_OK, -2, "프린터 설정 필요");
            } else if (sharedText.equals("REQSELECTBTN")) //LJY20230713 : 사용자 선택 버튼 (패드 연동)
            {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 사용자 선택 버튼 기능 클릭되었습니다.");

                Arrays.fill(RECVBuf, (char) 0x00);
                Arrays.fill(encdata, (char) 0x00);
                Arrays.fill(icdata, (char) 0x00);

                initSerial();

                func_code = 0xD2;

                temp = new byte[50];
                temp[0] = 0x02; //Header ID
                temp[1] = (byte) func_code; //Command ID
                temp[2] = 0x00;
                temp[3] = 0x45; //Length(2)

                String sendstr = "";
                sendstr = sendstr + "2";
                sendstr = sendstr + "30";
                sendstr = sendstr + intent.getStringExtra("SENDDATA");
                sendstr = sendstr + "0";
                sendstr = sendstr + "0";

                try {
                    System.arraycopy(sendstr.getBytes("euc-kr"), 0, temp, 4, 45);
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }

                temp[49] = xor_sum(temp, 49);

                isrun = true;

                if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                {
                    scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                    int readState = scr.checkSerialPortOpened();
                    if (readState != RTN_COMM_OK) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16 : 리더기 연결 상태 체크해주시길 바랍니다.");
                        Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                        SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                        return;
                    }

                    scr.clearTxBuffer();
                    scr.sendMsg(temp, temp.length);
                    scr.clearRxBuffer();
                } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                {
                    mUart = new libUart();
                    mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                    if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                        mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                        mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                    }
                    mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                    mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);
                } else {
                    if (usbService != null) {
                        usbService.write(temp);
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15 : USB 서비스 불가능합니다.");
                        Toast.makeText(MainActivity.this, "-15 : USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                        SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");

                        return;
                    }
                }

                PopupOpenEOT(MainActivity.this, "사용자 선택 버튼 클릭해주세요.");

                handlerThread = new handler_thread(handler);
                handlerThread.start();
            } else if (sharedText.equals("REQPERMISSION")) { //LJY20230210 : 권한 허용을 위한 API
                if (SharedManager.isStatus == false) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] -15:앱 실행 후 다시 요청 필요");
                    SetResultFunc(RESULT_CANCELED, -15, "앱 실행 후 다시 요청 필요");
                }
                mLayoutMainContainer.setVisibility(View.GONE);
                SharedManager.LogDebug(bLogUse, "debugjy", "[POS->NVCAT] 권한 허용 요청");

                checkPermission();
            } else
                //LJY20230111 : 카드 삽입 여부
                if (sharedText.equals("CHKCARDINMP")) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드 삽입 여부 요청 버튼 클릭되었습니다.");

                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                    {
                        isrun = true;

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
//                    isMultipad = true;

//                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드 삽입 여부 요청입니다.");
                        func_code = 0xCB;

                        scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                        int readState = scr.checkSerialPortOpened();
                        if (readState != RTN_COMM_OK) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16 : 리더기 연결 상태 체크해주시길 바랍니다.");
                            Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                            return;
                        }

                        scr.clearTxBuffer();

                        writeBuffer = new char[5];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x00;
                        writeBuffer[3] = 0x00; //Length(2)
                        writeBuffer[4] = xor_sum(writeBuffer, 4);

                        temp = new byte[5];
                        for (int i = 0; i < 5; i++) {
                            temp[i] = (byte) writeBuffer[i];
                        }

                        scr.sendMsg(temp, temp.length);
//                    PopupOpenEOT(MainActivity.this, "고객식별번호를 입력해주세요.");

                        scr.clearRxBuffer();
                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                    {
                        mUart = new libUart();
                        isrun = true;

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
//                    isMultipad = true;

//                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 고객식별번호 요청입니다.");
                        func_code = 0xCB;

                        writeBuffer = new char[5];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x00;
                        writeBuffer[3] = 0x00; //Length(2)
                        writeBuffer[4] = xor_sum(writeBuffer, 4);

                        temp = new byte[5];
                        for (int i = 0; i < 5; i++) {
                            temp[i] = (byte) writeBuffer[i];
                        }
//                    PopupOpenEOT(MainActivity.this, "고객식별번호를 입력해주세요.");

                        mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                        if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                            mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                            mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                        }
                        mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                        mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else {
                        if (usbService != null) {
                            if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가

                                isrun = true;

                                handlerThread = new handler_thread(handler);
                                handlerThread.start();

                                Arrays.fill(RECVBuf, (char) 0x00);
                                Arrays.fill(encdata, (char) 0x00);
                                Arrays.fill(icdata, (char) 0x00);

                                initSerial();
//                        isMultipad = true;

//                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 고객식별번호 요청입니다.");
                                func_code = 0xCB;

                                writeBuffer = new char[5];
                                writeBuffer[0] = 0x02; //Header ID
                                writeBuffer[1] = func_code; //Command ID
                                writeBuffer[2] = 0x00;
                                writeBuffer[3] = 0x00; //Length(2)
                                writeBuffer[4] = xor_sum(writeBuffer, 4);

                                temp = new byte[5];
                                for (int i = 0; i < 5; i++) {
                                    temp[i] = (byte) writeBuffer[i];
                                }
//                        PopupOpenEOT(MainActivity.this, "고객식별번호를 입력해주세요.");
                                usbService.write(temp);
                            }
                            else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                            }
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15 : USB 서비스 불가능합니다.");
                            Toast.makeText(MainActivity.this, "-15 : USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");

                            return;
                        }
                    }
                } else
                    //LJY20220520 : 고객식별번호 요청 추가
                    if (sharedText.equals("REQCASHNO")) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 고객식별번호 요청 버튼 클릭되었습니다.");

                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                        {
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            isMultipad = true;

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 고객식별번호 요청입니다.");
                            func_code = 0x45;

                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // Serial Port Check
                            int readState = scr.checkSerialPortOpened();
                            if (readState != RTN_COMM_OK) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            scr.clearTxBuffer();

                            writeBuffer = new char[5];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x00; //Length(2)
                            writeBuffer[4] = xor_sum(writeBuffer, 4);

                            temp = new byte[5];
                            for (int i = 0; i < 5; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }

                            scr.sendMsg(temp, temp.length);
                            PopupOpenEOT(MainActivity.this, "고객식별번호를 입력해주세요.");

                            scr.clearRxBuffer();
                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            isMultipad = true;

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 고객식별번호 요청입니다.");
                            func_code = 0x45;

                            writeBuffer = new char[5];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x00; //Length(2)
                            writeBuffer[4] = xor_sum(writeBuffer, 4);

                            temp = new byte[5];
                            for (int i = 0; i < 5; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "고객식별번호를 입력해주세요.");

                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            if (usbService != null) {
                                if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                    isrun = true;

                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();
                                    isMultipad = true;

                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 고객식별번호 요청입니다.");
                                    func_code = 0x45;

                                    writeBuffer = new char[5];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x00; //Length(2)
                                    writeBuffer[4] = xor_sum(writeBuffer, 4);

                                    temp = new byte[5];
                                    for (int i = 0; i < 5; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpenEOT(MainActivity.this, "고객식별번호를 입력해주세요.");
                                    usbService.write(temp);
                                }
                                else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                    Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                    SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");

                                return;
                            }
                        }
                    } else if (sharedText.equals("REQBARCODE")) { //LJY20200713 : 바코드리딩
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드리딩 요청 버튼 클릭되었습니다.");

                        mTimeout = mSharedManager.getPreferences().getString("Timeout", "30");

                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                        {
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드리딩 요청입니다.");
                            func_code = 0xD3;

                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // Serial Port Check
                            int readState = scr.checkSerialPortOpened();
                            if (readState != RTN_COMM_OK) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            scr.clearTxBuffer();

                            writeBuffer = new char[7];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x02; //Length(2)
                            String sendstr = mTimeout; //Card 대기시간(2)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                            writeBuffer[6] = xor_sum(writeBuffer, 6);

                            temp = new byte[7];
                            for (int i = 0; i < 7; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            scr.sendMsg(temp, temp.length);
                            PopupOpenEOT(MainActivity.this, "바코드리딩 해주세요.");

                            scr.clearRxBuffer();
                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드리딩 요청입니다.");
                            func_code = 0xD3;

                            writeBuffer = new char[7];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x02; //Length(2)
                            String sendstr = mTimeout; //Card 대기시간(2)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                            writeBuffer[6] = xor_sum(writeBuffer, 6);

                            temp = new byte[7];
                            for (int i = 0; i < 7; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "바코드리딩 해주세요.");

                            //LJY20201217 : 리더기 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                    isrun = true;

                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();

                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드리딩 요청입니다.");
                                    func_code = 0xD3;

                                    writeBuffer = new char[7];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x02; //Length(2)
                                    String sendstr = mTimeout; //Card 대기시간(2)
                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                                    writeBuffer[6] = xor_sum(writeBuffer, 6);

                                    temp = new byte[7];
                                    for (int i = 0; i < 7; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpenEOT(MainActivity.this, "바코드리딩 해주세요.");
                                    usbService.write(temp);
                                }
                                else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                    Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                    SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                        //LJY20220427 : 재시작 로직 추가
//                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                        Context currentActivity = getApplication();
//                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                        currentActivity.startActivity(restartIntent);
//                        System.exit(0);

                                return;
                            }
                        }
                    } else if (sharedText.equals("REQSIGNDATA"))
                    { //OSM20231127 : 서명패드 서명 요청
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서명 요청 버튼 클릭되었습니다.");

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();

                        func_code = 0x42;

                        temp = new byte[53];
                        temp[0] = 0x02; //Header ID
                        temp[1] = (byte) func_code; //Command ID
                        temp[2] = 0x00;
                        temp[3] = 0x48; //Length(2)

                        String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)

                        try {
                            System.arraycopy(sendstr.getBytes("euc-kr"), 0, temp, 4, 48);
                        } catch (UnsupportedEncodingException e) {
                            e.printStackTrace();
                        }

                        temp[52] = xor_sum(temp, 52);

                        isrun = true;
                        isSign = true;

                        if (usbService != null) { // if UsbService was correctly binded, Send data
                            usbService.write(temp);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15 : USB 서비스 불가능합니다.");
                            Toast.makeText(MainActivity.this, "-15 : USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");

                            return;
                        }
                        PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else if (sharedText.equals("REQCMD")) { //LJY20231212 : COMMAND 요청 추가
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] COMMAND 요청 버튼 클릭되었습니다.");

                        int iFcode = intent.getIntExtra("COMMAND", 99999); //func_code
                        String sSendData = intent.getStringExtra("SENDDATA"); //디스플레이 문자열 (최대 40바이트)

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();

                        func_code = (char) iFcode;

                        temp = new byte[sSendData.length()+5];
                        temp[0] = 0x02; //Header ID
                        temp[1] = (byte) func_code; //Command ID
                        temp[2] = 0x00;
                        temp[3] = (byte) Integer.parseInt(Integer.toHexString(sSendData.length())); //Length(2)

                        //String sendstr = sSendData;

                        try {
                            System.arraycopy(sSendData.getBytes("euc-kr"), 0, temp, 4, sSendData.length());
                        } catch (UnsupportedEncodingException e) {
                            e.printStackTrace();
                        }

                        temp[sSendData.length()+4] = xor_sum(temp, sSendData.length()+4);

                        isrun = true;

                        if(func_code == 0x42)
                        {
                            isSign = true;
                        }
                        else if(func_code == 0x31)
                            isGetReader = true;

                        if (usbService != null) { // if UsbService was correctly binded, Send data
                            usbService.write(temp);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15 : USB 서비스 불가능합니다.");
                            Toast.makeText(MainActivity.this, "-15 : USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");

                            return;
                        }
                        PopupOpenEOT(MainActivity.this, "리더기 요청 중입니다.");

                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else if (sharedText.equals("REQBALANCE")) { //OSM20230718 : 조회
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 조회 요청 버튼 클릭되었습니다.");

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();

                        func_code = 0x71;

                        mTimeout = mSharedManager.getPreferences().getString("Timeout", "30");

                        // 요청 데이터 형식 구성
                        writeBuffer = new char[8];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x00;
                        writeBuffer[3] = 0x03; //Length(2)

                        String sendstr = mTimeout;//Card 대기시간(2)
                        sendstr = sendstr + "0";

                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 3);

                        writeBuffer[7] = xor_sum(writeBuffer, 7);

                        temp = new byte[8];
                        for (int i = 0; i < 8; i++) {
                            temp[i] = (byte) writeBuffer[i];
                        }

                        isrun = true;

                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                        {
                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // Serial Port Check (Port 에러 처리)
                            int readState = scr.checkSerialPortOpened();
                            if (readState != RTN_COMM_OK) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            scr.clearTxBuffer();
                            scr.sendMsg(temp, temp.length);
                            scr.clearRxBuffer();

                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                        {
                            mUart = new libUart();
                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // 리더기 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);
                        } else {
                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                usbService.write(temp);
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정
                                return;
                            }
                        }
                        PopupOpenEOT(MainActivity.this, "RF 결제 리딩 해주세요.");

                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else if (sharedText.equals("GETAPPR")) //20200226 : 직전승인내역조회
                    {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 직전승인내역조회 버튼 클릭되었습니다.");
                        Toast.makeText(MainActivity.this, "직전승인내역조회 버튼 클릭되었습니다.", Toast.LENGTH_SHORT).show();

                        SQLiteDatabase db = dbHelper.getReadableDatabase();
                        Cursor cursor = db.rawQuery("SELECT * FROM CHKDEALTABLE", null);

                        if (cursor == null) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] : DB 데이터 없음");
                            SetResultFunc(RESULT_OK, -1, "DB 데이터 없음");
                        } else {
                            cursor.moveToFirst();
                            if (cursor == null) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] : DB 데이터 없음");
                                SetResultFunc(RESULT_OK, -1, "DB 데이터 없음");
                            }
                        }
                        cursor.moveToLast();

                        char fs = 0x1C;
                        String result = "";
                        String str_dealgb = cursor.getString(2);
                        String str_dealtp = cursor.getString(3);

                        if (str_dealgb.equals("20")) //수표조회
                            result = str_dealtp + fs + str_dealgb + fs + cursor.getString(16) + fs + cursor.getString(9) + fs + cursor.getString(15) + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs;
                        else
                            result = str_dealtp + fs + str_dealgb + fs + cursor.getString(16) + fs + cursor.getString(5) + fs + cursor.getString(6) + fs + cursor.getString(7) + fs + cursor.getString(8) + fs + cursor.getString(9) + fs + cursor.getString(10) + fs + fs + cursor.getString(12) + fs + fs + cursor.getString(13) + fs + cursor.getString(14) + fs + cursor.getString(11) + fs + cursor.getString(17) + fs + cursor.getString(15) + fs + cursor.getString(4) + fs + cursor.getString(19) + fs + cursor.getString(20) + fs + cursor.getString(21) + fs + fs + fs + cursor.getString(17) + fs + fs + fs + fs + fs + fs + fs;

                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] : " + result);
                        SetResultFunc(RESULT_OK, 1, result);
                    } else if (sharedText.equals("READERRESET")) //20200303 : 리더기 재시작
                    {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 재시작 버튼 클릭되었습니다.");
                        Toast.makeText(MainActivity.this, "리더기 재시작 버튼 클릭되었습니다.", Toast.LENGTH_SHORT).show();

                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                        {
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 재시작 요청입니다.");
                            func_code = 0x32;

                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // Serial Port Check
                            int readState = scr.checkSerialPortOpened();
                            if (readState != RTN_COMM_OK) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            scr.clearTxBuffer();

                            writeBuffer = new char[6];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x01; //Length(2)
                            writeBuffer[4] = 0x33; //3초 후 리더기 재시작
                            writeBuffer[5] = xor_sum(writeBuffer, 5);

                            temp = new byte[6];
                            for (int i = 0; i < 6; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            scr.sendMsg(temp, temp.length);
                            PopupOpen(MainActivity.this, "3초 후 리더기 재시작");

                            scr.clearRxBuffer();
//                    handlerThread = new handler_thread(handler);
//                    handlerThread.start();

                            SetResultFunc(RESULT_OK, 1, "리더기 재시작 요청 정상");
                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 재시작 요청입니다.");
                            func_code = 0x32;

                            writeBuffer = new char[6];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x01; //Length(2)
                            writeBuffer[4] = 0x33; //3초 후 리더기 재시작
                            writeBuffer[5] = xor_sum(writeBuffer, 5);

                            temp = new byte[6];
                            for (int i = 0; i < 6; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpen(MainActivity.this, "3초 후 리더기 재시작");

                            //LJY20201217 : 리더기 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

//                    handlerThread = new handler_thread(handler);
//                    handlerThread.start();

                            SetResultFunc(RESULT_OK, 1, "리더기 재시작 요청 정상");
                        } else {
                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                    isrun = true;

//                        handlerThread = new handler_thread(handler);
//                        handlerThread.start();

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();

                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 재시작 요청입니다.");
                                    func_code = 0x32;

                                    writeBuffer = new char[6];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x01; //Length(2)
                                    writeBuffer[4] = 0x33; //3초 후 리더기 재시작
                                    writeBuffer[5] = xor_sum(writeBuffer, 5);

                                    temp = new byte[6];
                                    for (int i = 0; i < 6; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpen(MainActivity.this, "3초 후 리더기 재시작");
                                    usbService.write(temp);

                                    SetResultFunc(RESULT_OK, 1, "리더기 재시작 요청 정상");
                                }

                                else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                    Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                    SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                        //LJY20220427 : 재시작 로직 추가
//                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                        Context currentActivity = getApplication();
//                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                        currentActivity.startActivity(restartIntent);
//                        System.exit(0);

                                return;
                            }
                        }
                    }
                    //LJY20201021 : NVCAT 재시작 순서 변경
//            else
//            if(sharedText.equals("RESTART")) //20200226 : NVCAT 재시작
//            {
//                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] NVCAT 재시작 버튼 클릭되었습니다.");
//                Toast.makeText(MainActivity.this, "NVCAT 재시작 버튼 클릭되었습니다.", Toast.LENGTH_SHORT).show();
//
//                //앱 재시작 //20200318 : 변경
//                SetResultFunc(RESULT_OK, 1, "정상");
//                OneFragment.performSetenv(); //SETENV
////                Context currentActivity = MainActivity.this;
////                Intent mainintent = new Intent(currentActivity, MainActivity.class);
////                Intent restartIntent = Intent.makeRestartActivityTask(mainintent.getComponent());
////                currentActivity.startActivity(restartIntent);
////                Intent mStartActivity = new Intent(MainActivity.this, MainActivity.class);
////                int mPendingIntentId = 123456;
////                PendingIntent mPendingIntent = PendingIntent.getActivity(MainActivity.this, mPendingIntentId, mStartActivity, PendingIntent.FLAG_CANCEL_CURRENT);
////                AlarmManager mgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
////                mgr.set(AlarmManager.RTC, System.currentTimeMillis() + 1000, mPendingIntent);
//
////                System.exit(0);
//            }
                    else if (sharedText.equals("CHKMEMBERSHIP")) //20200217 : 현금IC카드여부
                    {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 멤버쉽카드 요청 버튼 클릭되었습니다.");

                        mTimeout = mSharedManager.getPreferences().getString("Timeout", "30");

                        mCatid = mSharedManager.getPreferences().getString("Catid", "");
                        if (mCatid.length() != 10) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12 : POS전문오류 - CATID 길이가 10이 아닙니다.");
                            SetResultFunc(RESULT_CANCELED, -12, "POS전문오류 - CATID 길이가 10이 아닙니다.");
                            return;
                        }

                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                        {
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 멤버쉽카드 요청입니다.");
                            func_code = 0xBD;

                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // Serial Port Check
                            int readState = scr.checkSerialPortOpened();
                            if (readState != RTN_COMM_OK) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            scr.clearTxBuffer();

                            writeBuffer = new char[7];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x02; //Length(2)
                            String sendstr = mTimeout; //Card 대기시간(2)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                            writeBuffer[6] = xor_sum(writeBuffer, 6);

                            temp = new byte[7];
                            for (int i = 0; i < 7; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            scr.sendMsg(temp, temp.length);
                            PopupOpenEOT(MainActivity.this, "멤버쉽 카드리딩 해주세요.");

                            scr.clearRxBuffer();
                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 멤버쉽카드 요청입니다.");
                            func_code = 0xBD;

                            writeBuffer = new char[7];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x02; //Length(2)
                            String sendstr = mTimeout; //Card 대기시간(2)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                            writeBuffer[6] = xor_sum(writeBuffer, 6);

                            temp = new byte[7];
                            for (int i = 0; i < 7; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "멤버쉽 카드리딩 해주세요.");

                            //LJY20201217 : 리더기 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                    isrun = true;

                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();

                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 멤버쉽카드 요청입니다.");
                                    func_code = 0xBD;

                                    writeBuffer = new char[7];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x02; //Length(2)
                                    String sendstr = mTimeout; //Card 대기시간(2)
                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                                    writeBuffer[6] = xor_sum(writeBuffer, 6);

                                    temp = new byte[7];
                                    for (int i = 0; i < 7; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpenEOT(MainActivity.this, "멤버쉽 카드리딩 해주세요.");
                                    usbService.write(temp);
                                }

                                else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                    Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                    SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                        //LJY20220427 : 재시작 로직 추가
//                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                        Context currentActivity = getApplication();
//                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                        currentActivity.startActivity(restartIntent);
//                        System.exit(0);

                                return;
                            }
                        }
                    } else if (sharedText.equals("CHKCASHIC")) //20200217 : 현금IC카드여부
                    {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC카드여부 버튼 클릭되었습니다.");

                        cashic_dttm = (new SimpleDateFormat("yyyyMMddHHmmssFF")).format(new Date()); //LJY20200327 : 현금IC 일반거래

                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                        {
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC카드여부 요청입니다.");
                            func_code = 0x80;

                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // Serial Port Check
                            int readState = scr.checkSerialPortOpened();
                            if (readState != RTN_COMM_OK) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            scr.clearTxBuffer();

                            writeBuffer = new char[25];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x20; //Length(2)
                            String sendstr = "F1" + "10" + cashic_dttm; //현금IC 거래구분(2) + 대기시간(2) + TIME(16)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                            writeBuffer[24] = xor_sum(writeBuffer, 24);

                            temp = new byte[25];
                            for (int i = 0; i < 25; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            scr.sendMsg(temp, temp.length);
                            PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");

                            scr.clearRxBuffer();
                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC카드여부 요청입니다.");
                            func_code = 0x80;

                            writeBuffer = new char[25];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x20; //Length(2)
                            String sendstr = "F1" + "10" + cashic_dttm; //현금IC 거래구분(2) + 대기시간(2) + TIME(16)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                            writeBuffer[24] = xor_sum(writeBuffer, 24);

                            temp = new byte[25];
                            for (int i = 0; i < 25; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");

                            //LJY20201217 : 리더기 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                    isrun = true;

                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();

                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC카드여부 요청입니다.");
                                    func_code = 0x80;

                                    writeBuffer = new char[25];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x20; //Length(2)
                                    String sendstr = "F1" + "10" + cashic_dttm; //현금IC 거래구분(2) + 대기시간(2) + TIME(16)
                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                                    writeBuffer[24] = xor_sum(writeBuffer, 24);

                                    temp = new byte[25];
                                    for (int i = 0; i < 25; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");
                                    usbService.write(temp);
                                }

                                else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                    Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                    SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                        //LJY20220427 : 재시작 로직 추가
//                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                        Context currentActivity = getApplication();
//                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                        currentActivity.startActivity(restartIntent);
//                        System.exit(0);

                                return;
                            }
                        }
                    } else if (sharedText.equals("CHKCARDBIN")) //20200217 : 카드BIN
                    {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드BIN요청 버튼 클릭되었습니다.");

                        mTimeout = mSharedManager.getPreferences().getString("Timeout", "30");

                        mCatid = mSharedManager.getPreferences().getString("Catid", "");
                        if (mCatid.length() != 10) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12 : POS전문오류 - CATID 길이가 10이 아닙니다.");
                            SetResultFunc(RESULT_CANCELED, -12, "POS전문오류 - CATID 길이가 10이 아닙니다.");
                            return;
                        }

                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                        {
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드BIN 요청입니다.");
                            func_code = 0x6C;

                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // Serial Port Check
                            int readState = scr.checkSerialPortOpened();
                            if (readState != RTN_COMM_OK) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            scr.clearTxBuffer();

                            writeBuffer = new char[44];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x39; //Length(2)
                            String sendstr = mTimeout; //Card 대기시간(2)
                            sendstr = sendstr + (new SimpleDateFormat("yyyyMMddHHmmss")).format(new Date()); //거래일시(14)
                            sendstr = sendstr + "000000000000"; //거래금액(12)
                            sendstr = sendstr + mCatid; //TID(10)
                            sendstr = sendstr + "0"; //거래종류(1)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                            writeBuffer[43] = xor_sum(writeBuffer, 43);

                            temp = new byte[44];
                            for (int i = 0; i < 44; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            scr.sendMsg(temp, temp.length);
                            PopupOpenEOT(MainActivity.this, "카드리딩 해주세요.");

                            scr.clearRxBuffer();
                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else if ((mSharedManager.getPreferences().getInt("Readertype", 0) == 2) && (isrun == false)) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드BIN 요청입니다.");
                            func_code = 0x6C;

                            writeBuffer = new char[44];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x39; //Length(2)
                            String sendstr = mTimeout; //Card 대기시간(2)
                            sendstr = sendstr + (new SimpleDateFormat("yyyyMMddHHmmss")).format(new Date()); //거래일시(14)
                            sendstr = sendstr + "000000000000"; //거래금액(12)
                            sendstr = sendstr + mCatid; //TID(10)
                            sendstr = sendstr + "0"; //거래종류(1)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                            writeBuffer[43] = xor_sum(writeBuffer, 43);

                            temp = new byte[44];
                            for (int i = 0; i < 44; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "카드리딩 해주세요.");

                            //LJY20201217 : 리더기 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            if (usbService != null)  { // if UsbService was correctly binded, Send data
                                if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                    isrun = true;

                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();

                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드BIN 요청입니다.");
                                    func_code = 0x6C;

                                    writeBuffer = new char[44];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x39; //Length(2)
                                    String sendstr = mTimeout; //Card 대기시간(2)
                                    sendstr = sendstr + (new SimpleDateFormat("yyyyMMddHHmmss")).format(new Date()); //거래일시(14)
                                    sendstr = sendstr + "000000000000"; //거래금액(12)
                                    sendstr = sendstr + mCatid; //TID(10)
                                    sendstr = sendstr + "0"; //거래종류(1)
                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                    writeBuffer[43] = xor_sum(writeBuffer, 43);

                                    temp = new byte[44];
                                    for (int i = 0; i < 44; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpenEOT(MainActivity.this, "카드리딩 해주세요.");
                                    usbService.write(temp);
                                }

                                else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                    Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                    SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                        //LJY20220427 : 재시작 로직 추가
//                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                        Context currentActivity = getApplication();
//                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                        currentActivity.startActivity(restartIntent);
//                        System.exit(0);
                                return;
                            }
                        }
                    }	else if (intent.getStringExtra("NVCATSENDDATA").equals("ENCKEYDOWN")) { //OSM20240202 : 최초키 다운로드 API 추가
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] ENCKEYDOWN API 실행되었습니다.");
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 최초키 1단계 다운로드 중입니다."); //20200108LJY

                        if ((mSharedManager.getPreferences().getInt("Readertype", 0) == 3) && (isrun == false)) //POSBANK
                        {
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            func_code = 0x6A;

                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // Serial Port Check
                            int readState = scr.checkSerialPortOpened();
                            if (readState != RTN_COMM_OK) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            scr.clearTxBuffer();

                            writeBuffer = new char[16];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x11; //Length(2)

                            if (mSharedManager.getPreferences().getString("Catid", "").length() != 10) {
                                Toast.makeText(MainActivity.this, "CATID 길이 10자리가 아닙니다.", Toast.LENGTH_SHORT).show();
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] CATID 길이 10자리가 아닙니다.");
                                btnEnable();
                                return;
                            }
                            String sendstr = "1" + mSharedManager.getPreferences().getString("Catid", "");
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 11);
                            writeBuffer[15] = xor_sum(writeBuffer, 15);

                            temp = new byte[16];
                            for (int i = 0; i < 16; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }

                            scr.sendMsg(temp, temp.length);
                            PopupOpen(MainActivity.this, "최초키 1단계 다운로드 중입니다.");

                            scr.clearRxBuffer();
                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else if ((mSharedManager.getPreferences().getInt("Readertype", 0) == 2) && (isrun == false)) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            func_code = 0x6A;

                            writeBuffer = new char[16];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x11; //Length(2)
                            if (mSharedManager.getPreferences().getString("Catid", "").length() != 10) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] CATID 길이 10자리가 아닙니다.");
                                return;
                            }
                            String sendstr = "1" + mSharedManager.getPreferences().getString("Catid", "");
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 11);
                            writeBuffer[15] = xor_sum(writeBuffer, 15);

                            temp = new byte[16];
                            for (int i = 0; i < 16; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpen(MainActivity.this, "최초키 1단계 다운로드 중입니다.");

                            //LJY20201217 : 리더기 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            if (!SharedManager.isBizdown) {
                                //LJY20200812 : 가맹점다운로드 예외처리
//                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -22:가맹점다운로드 해주시길 바랍니다.");
//                        Toast.makeText(MainActivity.this, "가맹점다운로드 해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
//                        SetResultFunc(RESULT_CANCELED, -22, "가맹점다운로드 해주시길 바랍니다.");
//                        return;
                            }
//                    if (SharedManager.isStatus == false) {
                            //LJY20201217 : NVCAT 종료 중에도 호출 되도록 로직 변경
                            //if (SharedManager.isStatus == false && (mSharedManager.getPreferences().getInt("Readertype", 0) == 0 || mSharedManager.getPreferences().getInt("Readertype", 0) == 1) || mSharedManager.getPreferences().getInt("Readertype", 0) == 4 || mSharedManager.getPreferences().getInt("Readertype", 0) == 5) { //LJY20230911 : TITENG 리더기 추가 //LJY20220816 : 조은소프트웨어 추가
                            //    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                            //    Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                            //    SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                            //    return;
                            //}

                            if (usbService != null) {// if UsbService was correctly binded, Send data
                                if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추
                                    isrun = true;

                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();
                                    func_code = 0x6A;

                                    writeBuffer = new char[16];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x11; //Length(2)
                                    if (mSharedManager.getPreferences().getString("Catid", "").length() != 10) {
                                        Toast.makeText(MainActivity.this, "CATID 길이 10자리가 아닙니다.", Toast.LENGTH_SHORT).show();
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] CATID 길이 10자리가 아닙니다.");
                                        btnEnable();
                                        return;
                                    }

                                    String sendstr = "1" + mSharedManager.getPreferences().getString("Catid", "");
                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 11);
                                    writeBuffer[15] = xor_sum(writeBuffer, 15);

                                    temp = new byte[16];
                                    for (int i = 0; i < 16; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpen(MainActivity.this, "최초키 1단계 다운로드 중입니다."); //LJY20220908 : 문구 수정
                                    usbService.write(temp);
                                }

                                else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                    Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                    SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                InsertChkvalid("N", "USB 서비스 불가!");
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가");
                            }
                        }
                    } else if (sharedText.equals("CHKVALID") || sharedText.equals("GETREADERINFO")) { //LJY20221004 : GETREADERINFO 추가
                        if (sharedText.equals("GETREADERINFO"))
                            isGetReader = true;
                        else {
                            isGetReader = false;
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 상호인증및무결성점검 버튼 클릭되었습니다.");
                        }

                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] Device 정보 가져오는 중입니다.");
                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                        {
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            func_code = 0x31;

                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // Serial Port Check
                            int readState = scr.checkSerialPortOpened();
                            if (readState != RTN_COMM_OK) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            scr.clearTxBuffer();

                            writeBuffer = new char[5];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x00; //Length(2)
                            writeBuffer[4] = xor_sum(writeBuffer, 4);

                            temp = new byte[5];
                            for (int i = 0; i < 5; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            scr.sendMsg(temp, temp.length);
                            PopupOpen(MainActivity.this, "Device 정보 가져오는 중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정

                            scr.clearRxBuffer();
                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            func_code = 0x31;

                            writeBuffer = new char[5];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x00; //Length(2)
                            writeBuffer[4] = xor_sum(writeBuffer, 4);

                            temp = new byte[5];
                            for (int i = 0; i < 5; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpen(MainActivity.this, "Device 정보 가져오는 중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정

                            //LJY20201217 : 리더기 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            if (!SharedManager.isBizdown) {
                                //LJY20200812 : 가맹점다운로드 예외처리
//                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -22:가맹점다운로드 해주시길 바랍니다.");
//                        Toast.makeText(MainActivity.this, "가맹점다운로드 해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
//                        SetResultFunc(RESULT_CANCELED, -22, "가맹점다운로드 해주시길 바랍니다.");
//                        return;
                            }
//                    if (SharedManager.isStatus == false) {
                            //LJY20201217 : NVCAT 종료 중에도 호출 되도록 로직 변경
                            if (SharedManager.isStatus == false && (mSharedManager.getPreferences().getInt("Readertype", 0) == 0 || mSharedManager.getPreferences().getInt("Readertype", 0) == 1) || mSharedManager.getPreferences().getInt("Readertype", 0) == 4 || mSharedManager.getPreferences().getInt("Readertype", 0) == 5) { //LJY20230911 : TITENG 리더기 추가 //LJY20220816 : 조은소프트웨어 추가
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            if (usbService != null) // if UsbService was correctly binded, Send data
                            {
                                if (isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                    isrun = true;

                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();
                                    func_code = 0x31;

                                    writeBuffer = new char[5];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x00; //Length(2)
                                    writeBuffer[4] = xor_sum(writeBuffer, 4);

                                    temp = new byte[5];
                                    for (int i = 0; i < 5; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpen(MainActivity.this, "Device 정보 가져오는 중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정
                                    usbService.write(temp);
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                    Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                    SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                }
                            }
                            else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                InsertChkvalid("N", "USB 서비스 불가!");
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가");
                            }
                            //}
                        }
                    } else {
                        if (sharedText != null) {
                            if (SendSplit(sharedText) == -1 && bSetenv == false) { //OSM20240520 : SETENV 요청 시, -14 로직 안 타도록 수정     // FS 개수 불일치 Case
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -14:POS전문오류 - F/S 갯수 확인해주세요.");
                                SetResultFunc(RESULT_CANCELED, -14, "POS전문오류 - F/S 갯수 확인해주세요.");
                                return;
                            } else if(bSetenv == true) {          //OSM20240520 : SETENV 요청 시, -14 로직 안 타도록 수정
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 1 : 정상");
                                SetResultFunc(RESULT_OK, 1, "정상");
                                return;
                            }

                            else if (SendSplit(sharedText) == -2) { //전문오류
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -13:POS전문오류 - 필드의 전문길이 체크해주세요.");
                                SetResultFunc(RESULT_CANCELED, -13, "POS전문오류 - 필드의 전문길이 체크해주세요.");
                                return;
                            }
                            if (CompareSharedValue() != 1) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:POS전문오류 - 환경설정 변수 확인해주세요.");
                                SetResultFunc(RESULT_CANCELED, -12, "POS전문오류 - 환경설정 변수 확인해주세요.");
                                return;
                            }
                            SharedManager.LogDebug(bLogUse, "debugjy", "[POS -> NVCAT] NVCAT POS 전문 OK!!");

                            if (strDealgb.equals("0421")) //망상취소
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 망상취소 결제입니다.");

                                PosClient posClient = new PosClient();
                                if (strDealtp.equals("UP")) //은련
                                {
                                    if (strTxtnum.length() == 20)
                                        sendBuff = ("0437CUP" + strTxtnum + "042010H1          " + mCatid + "@" + "                                                                                                                               " + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                    else
                                        sendBuff = ("0437CUP" + mSharedManager.getPreferences().getString("Txtnum", strTxtnum) + "042010H1          " + mCatid + "@" + "                                                                                                                               " + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                } else //신용
                                {
                                    if (strTxtnum.length() == 20)
                                        sendBuff = ("0437HPS" + strTxtnum + "042010H1          " + mCatid + "@" + "                                                                                                                               " + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                    else
                                        sendBuff = ("0437HPS" + mSharedManager.getPreferences().getString("Txtnum", strTxtnum) + "042010H1          " + mCatid + "@" + "                                                                                                                               " + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                }
                                if (bRelease)
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                else
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                    System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                    recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                } else
                                    recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                PopupClose();
                                InsertRecv(recvBuff);

                                return;
                            }
                            else if (strDealgb.equals("0200") || strDealgb.equals("0420") || strDealgb.equals("0300") || strDealgb.equals("0520") || strDealgb.equals("0320") || strDealgb.equals("0540") || strDealgb.equals("0521") || strDealgb.equals("0561")) { //OSM20241011 : PAYPRO, BC QR 망취소 추가 //거래구분 체크 //20200129 : 포인트거래 //20200131 : 멤버쉽거래

                                if (strDealgb.equals("0200") && strDealtp.equals("20") && strWcc.equals("K")) { //수표조회
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 수표조회 거래입니다.");
                                    String space = "                                                                                                                                                      ";

                                    PosClient posClient = new PosClient();
                                    sendBuff = ("0256" + mTxt + mTxtnum + strDealgb + strDealtp + mDevicegb + "          " + mCatid + "@" + mMoney + mTax + mBongsa + mHalbu + mApprno + mApprdate + mApprtid + space.substring(0, 132)).getBytes();

                                    if (strDealtp.equals("65") || strDealtp.equals("66") || strDealtp.equals("67") || strDealtp.equals("68") || strDealtp.equals("20")) //OSM20230818 : 수표 조회 디버그 모드 설정
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                    else if (bRelease)
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                    else
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                    mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                    if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                        System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                        recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                    } else
                                        recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                    PopupClose();
                                    InsertRecv(recvBuff);
                                } else if ((strDealgb.equals("0300") || strDealgb.equals("0520") || strDealgb.equals("0521") || strDealgb.equals("0561")) && strWcc.equals("L") && mTxt.equals("PRO")) //OSM20241011 : PAYPRO, BC QR 망상취소 값 추가  //LJY20200825 : PAYPRO 통합전문
                                {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 거래입니다.");

                                    String space = "                                                                                                                                                      ";

                                    PosClient posClient = new PosClient();
                                    if (strDealgb.equals("0300")) {
                                        if (strCashnum.length() == 24 && strCashnum.substring(0, 6).equals("281006")) //카카오페이
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 카카오페이 거래입니다.");
                                            //서명도 필요
                                            //LJY20200902 : PAYPRO 서명연동
                                            if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("DC"))) {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카카오페이 - 서명");

                                                //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                if (strSigndata.length() > 0)
                                                    PayWithSign(strSigndata);
                                                else
                                                    //LJY20220427 : 멀티패드 서명 연동
                                                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                                        if (usbService != null) { // if UsbService was correctly binded, Send data
                                                            if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                                                isrun = true;

                                                                handlerThread = new handler_thread(handler);
                                                                handlerThread.start();

                                                                Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                initSerial();
                                                                //isMultipad = true;
                                                                //btnDisable();
                                                                isSign = true;

                                                                writeBuffer = new char[53];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = 0x42; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x48; //Length(2)
                                                                String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                temp = new byte[53];
                                                                for (int i = 0; i < 53; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                usbService.write(temp);
                                                            }

                                                            else {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                                                Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                                                SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                                            }
                                                        } else {
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                            Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                //LJY20220427 : 재시작 로직 추가
//                                                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                Context currentActivity = getApplication();
//                                                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                currentActivity.startActivity(restartIntent);
//                                                System.exit(0);

                                                            return;
                                                        }
                                                    } else
                                                        //LJY20201005 : OKPOS 서명 연동
                                                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                        {
                                                            mUart = new libUart();
                                                            isrun = true;

                                                            Arrays.fill(RECVBuf, (char) 0x00);

                                                            initSerial();
                                                            isSign = true;

                                                            writeBuffer = new char[53];
                                                            writeBuffer[0] = 0x02; //Header ID
                                                            writeBuffer[1] = 0x42; //Command ID
                                                            writeBuffer[2] = 0x00;
                                                            writeBuffer[3] = 0x48; //Length(2)
                                                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                            temp = new byte[53];
                                                            for (int i = 0; i < 53; i++) {
                                                                temp[i] = (byte) writeBuffer[i];
                                                            }
                                                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                            //LJY20201217 : 포트번호/통신속도 가변
                                                            mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                            }
                                                            mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                            mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                            handlerThread = new handler_thread(handler);
                                                            handlerThread.start();
                                                        } else {
                                                            Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                            startActivityForResult(SignPadintent, 1);
                                                        }
                                                return;
                                            }
                                        } else if (strCashnum.length() == 22 && strCashnum.substring(0, 2).equals("17")) //SSGPAY
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO SSGPAY 거래입니다.");
                                            //서명도 필요
                                            //LJY20200902 : PAYPRO 서명연동
                                            if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("DC"))) {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO - 서명");

                                                //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                if (strSigndata.length() > 0)
                                                    PayWithSign(strSigndata);
                                                else
                                                    //LJY20220427 : 멀티패드 서명 연동
                                                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                                        if (usbService != null) { // if UsbService was correctly binded, Send data
                                                            if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                                                isrun = true;

                                                                handlerThread = new handler_thread(handler);
                                                                handlerThread.start();

                                                                Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                initSerial();
                                                                //isMultipad = true;
                                                                //btnDisable();
                                                                isSign = true;

                                                                writeBuffer = new char[53];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = 0x42; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x48; //Length(2)
                                                                String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                temp = new byte[53];
                                                                for (int i = 0; i < 53; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                usbService.write(temp);
                                                            }

                                                            else {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                                                Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                                                SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                                            }
                                                        } else {
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                            Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                //LJY20220427 : 재시작 로직 추가
//                                                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                Context currentActivity = getApplication();
//                                                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                currentActivity.startActivity(restartIntent);
//                                                System.exit(0);

                                                            return;
                                                        }
                                                    } else
                                                        //LJY20201005 : OKPOS 서명 연동
                                                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                        {
                                                            mUart = new libUart();
                                                            isrun = true;

                                                            Arrays.fill(RECVBuf, (char) 0x00);

                                                            initSerial();
                                                            isSign = true;

                                                            writeBuffer = new char[53];
                                                            writeBuffer[0] = 0x02; //Header ID
                                                            writeBuffer[1] = 0x42; //Command ID
                                                            writeBuffer[2] = 0x00;
                                                            writeBuffer[3] = 0x48; //Length(2)
                                                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                            temp = new byte[53];
                                                            for (int i = 0; i < 53; i++) {
                                                                temp[i] = (byte) writeBuffer[i];
                                                            }
                                                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                            //LJY20201217 : 포트번호/통신속도 가변
                                                            mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                            }
                                                            mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                            mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                            handlerThread = new handler_thread(handler);
                                                            handlerThread.start();
                                                        } else {
                                                            Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                            startActivityForResult(SignPadintent, 1);
                                                        }
                                                return;
                                            }
                                        } else if (strCashnum.length() == 22 && strCashnum.substring(0, 4).equals("8710")) //LPAY
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO LPAY 거래입니다.");
                                            //서명도 필요
                                            //LJY20200902 : PAYPRO 서명연동
                                            if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("DC"))) {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] LPAY - 서명");

                                                //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                if (strSigndata.length() > 0)
                                                    PayWithSign(strSigndata);
                                                else
                                                    //LJY20220427 : 멀티패드 서명 연동
                                                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                                        if (usbService != null) { // if UsbService was correctly binded, Send data
                                                            if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                                                isrun = true;

                                                                handlerThread = new handler_thread(handler);
                                                                handlerThread.start();

                                                                Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                initSerial();
                                                                //isMultipad = true;
                                                                //btnDisable();
                                                                isSign = true;

                                                                writeBuffer = new char[53];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = 0x42; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x48; //Length(2)
                                                                String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                temp = new byte[53];
                                                                for (int i = 0; i < 53; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                usbService.write(temp);
                                                            }

                                                            else {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                                                Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                                                SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                                            }

                                                        } else {
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                            Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                //LJY20220427 : 재시작 로직 추가
//                                                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                Context currentActivity = getApplication();
//                                                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                currentActivity.startActivity(restartIntent);
//                                                System.exit(0);

                                                            return;
                                                        }
                                                    } else
                                                        //LJY20201005 : OKPOS 서명 연동
                                                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                        {
                                                            mUart = new libUart();
                                                            isrun = true;

                                                            Arrays.fill(RECVBuf, (char) 0x00);

                                                            initSerial();
                                                            isSign = true;

                                                            writeBuffer = new char[53];
                                                            writeBuffer[0] = 0x02; //Header ID
                                                            writeBuffer[1] = 0x42; //Command ID
                                                            writeBuffer[2] = 0x00;
                                                            writeBuffer[3] = 0x48; //Length(2)
                                                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                            temp = new byte[53];
                                                            for (int i = 0; i < 53; i++) {
                                                                temp[i] = (byte) writeBuffer[i];
                                                            }
                                                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                            //LJY20201217 : 포트번호/통신속도 가변
                                                            mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                            }
                                                            mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                            mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                            handlerThread = new handler_thread(handler);
                                                            handlerThread.start();
                                                        } else {
                                                            Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                            startActivityForResult(SignPadintent, 1);
                                                        }
                                                return;
                                            }
                                        } else if ((strCashnum.length() > 16 && strCashnum.length() < 25) && (Integer.parseInt(strCashnum.substring(0, 2)) > 19 && Integer.parseInt(strCashnum.substring(0, 2)) < 34)) //알리페이
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 알리페이 거래입니다.");
                                            //서명 필요 없음

                                            if (strCashnum.indexOf("=") == -1)
                                                strCashnum = strCashnum + "=";
                                            //전문관리번호 생성
                                            mTxtnum = "2301" + (new SimpleDateFormat("yyMMddHHmmss")).format(new Date()) + new Random().nextInt(9) + new Random().nextInt(9) + new Random().nextInt(9) + new Random().nextInt(9);

                                            sendBuff = ("0437" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();

                                            if (bRelease)
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                            else
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                                System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                            } else
                                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                            //PopupClose();

                                            try {
                                                if (new String(recvBuff, "EUC-KR").equals("-1")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                                                } else {
                                                    if (bRelease)
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 68) + "**********" + (new String(recvBuff, "EUC-KR")).substring(78, recvBuff.length - 78));
                                                    else
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));


                                                    Thread.sleep(1000);

                                                    if ((new String(recvBuff, 55, 4, "EUC-KR")).equals("1047") || (new String(recvBuff, 55, 4, "EUC-KR")).equals("1002")) {
                                                        for (int retrycnt = 0; retrycnt < 5; retrycnt++) {
                                                            sendBuff = ("0437" + "ALR" + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();

                                                            if (bRelease)
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                                            else
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                                                System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                                            } else
                                                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);

                                                            if (new String(recvBuff, "EUC-KR").equals("-1")) {
                                                            } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                                                            } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                                                            } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                                                            } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                                                            } else {
                                                                if ((new String(recvBuff, 55, 4, "EUC-KR")).equals("1047") || (new String(recvBuff, 55, 4, "EUC-KR")).equals("1002")) {

                                                                } else {
                                                                    break;
                                                                }
                                                            }

                                                            Thread.sleep(6000);
                                                        }
                                                    }
                                                }
                                                InsertRecv(recvBuff);
                                            } catch (UnsupportedEncodingException | InterruptedException e) {
                                                e.printStackTrace();
                                            }
                                            return;
                                        } else if ((strCashnum.length() > 15 && strCashnum.length() < 22) && (Integer.parseInt(strCashnum.substring(0, 2)) > 9 && Integer.parseInt(strCashnum.substring(0, 2)) < 16)) //위챗페이
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 위챗페이 거래입니다.");
                                            //서명 필요 없음

                                            if (strCashnum.indexOf("=") == -1)
                                                strCashnum = strCashnum + "=";
                                            //전문관리번호 생성
                                            mTxtnum = "2001" + (new SimpleDateFormat("yyMMddHHmmss")).format(new Date()) + new Random().nextInt(9) + new Random().nextInt(9) + new Random().nextInt(9) + new Random().nextInt(9);

                                            sendBuff = ("0437" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();

                                            if (bRelease)
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                            else
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                                System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                            } else
                                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                            //PopupClose();

                                            try {
                                                if (new String(recvBuff, "EUC-KR").equals("-1")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                                                } else {
                                                    if (bRelease)
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 68) + "**********" + (new String(recvBuff, "EUC-KR")).substring(78, recvBuff.length - 78));
                                                    else
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));


                                                    Thread.sleep(1000);

                                                    if ((new String(recvBuff, 55, 4, "EUC-KR")).equals("1047") || (new String(recvBuff, 55, 4, "EUC-KR")).equals("1002")) {
                                                        for (int retrycnt = 0; retrycnt < 5; retrycnt++) {
                                                            sendBuff = ("0437" + "WCR" + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();

                                                            if (bRelease)
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                                            else
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                                                System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                                            } else
                                                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);

                                                            if (new String(recvBuff, "EUC-KR").equals("-1")) {
                                                            } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                                                            } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                                                            } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                                                            } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                                                            } else {
                                                                if ((new String(recvBuff, 55, 4, "EUC-KR")).equals("1047") || (new String(recvBuff, 55, 4, "EUC-KR")).equals("1002")) {

                                                                } else {
                                                                    break;
                                                                }
                                                            }
                                                            Thread.sleep(6000);
                                                        }
                                                    }
                                                }
                                                InsertRecv(recvBuff);
                                            } catch (UnsupportedEncodingException | InterruptedException e) {
                                                e.printStackTrace();
                                            }
                                            return;
                                        } else if (strCashnum.length() == 24 && strCashnum.substring(0, 6).equals("800088")) //제로페이 바코드
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 제로페이 바코드 거래입니다.");
                                            //서명 필요 없음
                                        } else if (strCashnum.length() == 25 && strCashnum.substring(0, 4).equals("3-PG")) //제로페이 QR
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 제로페이 QR 거래입니다.");
                                            //서명 필요 없음
                                        } else if (strCashnum.length() == 21) //앱카드
                                        {
                                            if (strCashnum.substring(0, 6).equals("941083")) //LJY20230130 : 서울페이 서명 무시
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 서울페이 거래입니다.");
                                            else
//                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 앱카드 거래입니다.");
                                                //서명도 필요
                                                //LJY20200902 : PAYPRO 서명연동
                                                if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("DC"))) {
                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 앱카드 - 서명");

                                                    //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                    if (strSigndata.length() > 0)
                                                        PayWithSign(strSigndata);
                                                    else
                                                        //LJY20220427 : 멀티패드 서명 연동
                                                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                                                    isrun = true;

                                                                    handlerThread = new handler_thread(handler);
                                                                    handlerThread.start();

                                                                    Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                    initSerial();
                                                                    //isMultipad = true;
                                                                    //btnDisable();
                                                                    isSign = true;

                                                                    writeBuffer = new char[53];
                                                                    writeBuffer[0] = 0x02; //Header ID
                                                                    writeBuffer[1] = 0x42; //Command ID
                                                                    writeBuffer[2] = 0x00;
                                                                    writeBuffer[3] = 0x48; //Length(2)
                                                                    String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                    writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                    temp = new byte[53];
                                                                    for (int i = 0; i < 53; i++) {
                                                                        temp[i] = (byte) writeBuffer[i];
                                                                    }
                                                                    PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                    usbService.write(temp);
                                                                }

                                                                else {
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                                                    Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                                                    SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                                                }
                                                            } else {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                                Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                //LJY20220427 : 재시작 로직 추가
//                                                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                Context currentActivity = getApplication();
//                                                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                currentActivity.startActivity(restartIntent);
//                                                System.exit(0);

                                                                return;
                                                            }
                                                        } else
                                                            //LJY20201005 : OKPOS 서명 연동
                                                            if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                            {
                                                                mUart = new libUart();
                                                                isrun = true;

                                                                Arrays.fill(RECVBuf, (char) 0x00);

                                                                initSerial();
                                                                isSign = true;

                                                                writeBuffer = new char[53];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = 0x42; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x48; //Length(2)
                                                                String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                temp = new byte[53];
                                                                for (int i = 0; i < 53; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                                //LJY20201217 : 포트번호/통신속도 가변
                                                                mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                    mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                    mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                                }
                                                                mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                                handlerThread = new handler_thread(handler);
                                                                handlerThread.start();
                                                            } else {
                                                                Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                                startActivityForResult(SignPadintent, 1);
                                                            }
                                                    return;
                                                }
                                        } else if (strCashnum.length() >= 100 && strCashnum.substring(0, 7).equals("hQVDUFY")) //비씨은련QR
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 거래입니다.");

                                            NiceUniQr niceuniqr = new NiceUniQr(); //LJY20220905 : JAR로 변경

                                            //LJY20220905 : byte > char 변경
                                            char[] Output_AID_FIRST = new char[1024];
                                            char[] Output_PAN = new char[1024];
                                            char[] Output_EMV_NICE = new char[1024];
                                            char[] Output_TLV = new char[1024];
                                            char[] Output_UPLAN = new char[1024];

                                            Arrays.fill(Output_AID_FIRST, (char) 0x00);
                                            Arrays.fill(Output_PAN, (char) 0x00);
                                            Arrays.fill(Output_EMV_NICE, (char) 0x00);
                                            Arrays.fill(Output_TLV, (char) 0x00);
                                            Arrays.fill(Output_UPLAN, (char) 0x00);

//                                    int ret = niceuniqr.Uni_QR(strCashnum.getBytes(), Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);
                                            int ret = niceuniqr.Uni_QR2(strCashnum, Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);

                                            String tvaid = "", tvpan = "", tvemv = "", tvtlv = "", tvuplancode = "";

                                            if (ret == 1) {
                                                for (int i = 0; i < 1024; i++) {
                                                    if (Output_AID_FIRST[i] == 0x00) {
                                                        tvaid = new String(Output_AID_FIRST).substring(0, i);
                                                        break;
                                                    }
                                                }
                                                for (int i = 0; i < 1024; i++) {
                                                    if (Output_PAN[i] == 0x00) {
                                                        tvpan = new String(Output_PAN).substring(0, i);
                                                        break;
                                                    }
                                                }
                                                for (int i = 0; i < 1024; i++) {
                                                    if (Output_EMV_NICE[i] == 0x00) {
                                                        tvemv = new String(Output_EMV_NICE).substring(0, i);
                                                        break;
                                                    }
                                                }
                                                for (int i = 0; i < 1024; i++) {
                                                    if (Output_TLV[i] == 0x00) {
                                                        tvtlv = new String(Output_TLV).substring(0, i);
                                                        break;
                                                    }
                                                }
                                                for (int i = 0; i < 1024; i++) {
                                                    if (Output_UPLAN[i] == 0x00) {
                                                        tvuplancode = new String(Output_UPLAN).substring(0, i);
                                                        break;
                                                    }
                                                }

                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 변환 성공!");

                                                if (tvaid.equals("A")) //은련QR
                                                {
                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 은련QR 거래!");

                                                    mTxt = "CUP";

                                                    //LJY20200902 : PAYPRO 서명연동
                                                    if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("DC"))) {
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 은련QR - 서명");

                                                        //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                        if (strSigndata.length() > 0)
                                                            PayWithSign(strSigndata);
                                                        else
                                                            //LJY20220427 : 멀티패드 서명 연동
                                                            if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false) == true) {
                                                                if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                    if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                                                        isrun = true;

                                                                        handlerThread = new handler_thread(handler);
                                                                        handlerThread.start();

                                                                        Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                        initSerial();
                                                                        //isMultipad = true;
                                                                        //btnDisable();
                                                                        isSign = true;

                                                                        writeBuffer = new char[53];
                                                                        writeBuffer[0] = 0x02; //Header ID
                                                                        writeBuffer[1] = 0x42; //Command ID
                                                                        writeBuffer[2] = 0x00;
                                                                        writeBuffer[3] = 0x48; //Length(2)
                                                                        String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                        writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                        temp = new byte[53];
                                                                        for (int i = 0; i < 53; i++) {
                                                                            temp[i] = (byte) writeBuffer[i];
                                                                        }
                                                                        PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                        usbService.write(temp);
                                                                    }

                                                                    else {
                                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                                                        Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                                                        SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                                                    }
                                                                } else {
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                                    Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                                    SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                        //LJY20220427 : 재시작 로직 추가
//                                                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                        Context currentActivity = getApplication();
//                                                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                        currentActivity.startActivity(restartIntent);
//                                                        System.exit(0);

                                                                    return;
                                                                }
                                                            } else
                                                                //LJY20201005 : OKPOS 서명 연동
                                                                if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                                {
                                                                    mUart = new libUart();
                                                                    isrun = true;

                                                                    Arrays.fill(RECVBuf, (char) 0x00);

                                                                    initSerial();
                                                                    isSign = true;

                                                                    writeBuffer = new char[53];
                                                                    writeBuffer[0] = 0x02; //Header ID
                                                                    writeBuffer[1] = 0x42; //Command ID
                                                                    writeBuffer[2] = 0x00;
                                                                    writeBuffer[3] = 0x48; //Length(2)
                                                                    String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                    writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                    temp = new byte[53];
                                                                    for (int i = 0; i < 53; i++) {
                                                                        temp[i] = (byte) writeBuffer[i];
                                                                    }
                                                                    PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                                    //LJY20201217 : 포트번호/통신속도 가변
                                                                    mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                    if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                        mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                        mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                                    }
                                                                    mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                    mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                                    handlerThread = new handler_thread(handler);
                                                                    handlerThread.start();
                                                                } else {
                                                                    Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                                    startActivityForResult(SignPadintent, 1);
                                                                }
                                                        return;
                                                    }
                                                    sendBuff = ("0694" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + tvemv).getBytes();
                                                } else //비씨QR
                                                {
                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨QR 거래!");

                                                    mTxt = "HPS";

                                                    //LJY20200902 : PAYPRO 서명연동
                                                    if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("DC"))) {
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 비씨QR - 서명");

                                                        //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                        if (strSigndata.length() > 0)
                                                            PayWithSign(strSigndata);
                                                        else
                                                            //LJY20220427 : 멀티패드 서명 연동
                                                            if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                                                if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                    if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                                                        isrun = true;

                                                                        handlerThread = new handler_thread(handler);
                                                                        handlerThread.start();

                                                                        Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                        initSerial();
                                                                        //isMultipad = true;
                                                                        //btnDisable();
                                                                        isSign = true;

                                                                        writeBuffer = new char[53];
                                                                        writeBuffer[0] = 0x02; //Header ID
                                                                        writeBuffer[1] = 0x42; //Command ID
                                                                        writeBuffer[2] = 0x00;
                                                                        writeBuffer[3] = 0x48; //Length(2)
                                                                        String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                        writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                        temp = new byte[53];
                                                                        for (int i = 0; i < 53; i++) {
                                                                            temp[i] = (byte) writeBuffer[i];
                                                                        }
                                                                        PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                        usbService.write(temp);
                                                                    }

                                                                    else {
                                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                                                        Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                                                        SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                                                    }
                                                                } else {
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                                    Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                                    SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                        //LJY20220427 : 재시작 로직 추가
//                                                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                        Context currentActivity = getApplication();
//                                                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                        currentActivity.startActivity(restartIntent);
//                                                        System.exit(0);

                                                                    return;
                                                                }
                                                            } else
                                                                //LJY20201005 : OKPOS 서명 연동
                                                                if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                                {
                                                                    mUart = new libUart();
                                                                    isrun = true;

                                                                    Arrays.fill(RECVBuf, (char) 0x00);

                                                                    initSerial();
                                                                    isSign = true;

                                                                    writeBuffer = new char[53];
                                                                    writeBuffer[0] = 0x02; //Header ID
                                                                    writeBuffer[1] = 0x42; //Command ID
                                                                    writeBuffer[2] = 0x00;
                                                                    writeBuffer[3] = 0x48; //Length(2)
                                                                    String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                    writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                    temp = new byte[53];
                                                                    for (int i = 0; i < 53; i++) {
                                                                        temp[i] = (byte) writeBuffer[i];
                                                                    }
                                                                    PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                                    //LJY20201217 : 포트번호/통신속도 가변
                                                                    mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                    if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                        mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                        mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                                    }
                                                                    mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                    mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                                    handlerThread = new handler_thread(handler);
                                                                    handlerThread.start();
                                                                } else {
                                                                    Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                                    startActivityForResult(SignPadintent, 1);
                                                                }
                                                        return;
                                                    }
                                                    sendBuff = ("0694" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + tvemv).getBytes();
                                                }
                                            } else {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -13 : 비씨은련QR 변환 실패!");
                                                SetResultFunc(RESULT_CANCELED, -13, "POS전문오류 - 비씨은련QR 변환 실패!");
                                                return;
                                            }

                                            if (bRelease)
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                            else
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                                System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                            } else
                                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                            try {
                                                if (new String(recvBuff, "EUC-KR").equals("-1")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                                                } else {
//                                            if (bRelease)
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 68) + "**********" + (new String(recvBuff, "EUC-KR")).substring(78, recvBuff.length - 78));
//                                            else
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));

                                                    System.arraycopy("PRO".getBytes(), 0, recvBuff, 4, 3);
                                                    if (tvaid.equals("A")) //은련QR
                                                        System.arraycopy("UPQ".getBytes(), 0, recvBuff, 35, 3);
                                                    else if (tvaid.equals("N")) //LJY20220905 : 네이버페이
                                                        System.arraycopy("NHQ".getBytes(), 0, recvBuff, 35, 3);
                                                    else
                                                        System.arraycopy("BCQ".getBytes(), 0, recvBuff, 35, 3);
                                                }
                                                sTxtnum = new String(recvBuff, 7, 20, "EUC-KR");    //OSM20241011 : 전문 Recv 이후, 전문관리번호 변수에 저장
                                                SharedManager.LogDebug(bLogUse, "debugjy", sTxtnum);

                                                InsertRecv(recvBuff);
                                            } catch (UnsupportedEncodingException e) {
                                                e.printStackTrace();
                                            }
                                            //InsertRecv(recvBuff);
                                            return;
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 기타 거래입니다.");
                                        }

                                        if (strCashnum.indexOf("=") == -1)
                                            strCashnum = strCashnum + "=";
                                        sendBuff = ("0437" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                    } else {
                                        if (strDealtp.equals("10")) strDealtp = "30";

                                        if(strDealgb.equals("0521") || strDealgb.equals("0561"))   //OSM20241011 : PAYPRO 및 BC QR 망상취소 처리
                                        {
                                            if(strDealgb.equals("0521"))
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 망상취소 결제입니다.");
                                            else
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] BC QR 망상취소 결제입니다.");

                                            strDealtp = "10";
                                            mApprno = "        ";
                                            mApprdate = "      ";
                                            mTxtnum = sTxtnum;
                                        }

                                        if (strCashnum.length() == 24 && strCashnum.substring(0, 6).equals("281006")) //카카오페이
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 카카오페이 거래입니다.- 취소");
                                            //서명도 필요

                                            if(strDealgb.equals("0521"))    //OSM20241011 : 카카오페이 서명 망상취소
                                            {
                                                if (strCashnum.indexOf("=") == -1)
                                                    strCashnum = strCashnum + "=";
                                                sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                            }

                                            else {
                                            //LJY20200902 : PAYPRO 서명연동
                                            if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("30") || strDealtp.equals("DC"))) {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카카오페이 - 서명");

                                                //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                if (strSigndata.length() > 0)
                                                    PayWithSign(strSigndata);
                                                else
                                                    //LJY20220427 : 멀티패드 서명 연동
                                                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                                        if (usbService != null) { // if UsbService was correctly binded, Send data
                                                            if(isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                                                isrun = true;

                                                                handlerThread = new handler_thread(handler);
                                                                handlerThread.start();

                                                                Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                initSerial();
                                                                //isMultipad = true;
                                                                //btnDisable();
                                                                isSign = true;

                                                                writeBuffer = new char[53];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = 0x42; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x48; //Length(2)
                                                                String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                temp = new byte[53];
                                                                for (int i = 0; i < 53; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                usbService.write(temp);
                                                            }

                                                            else {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                                                Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                                                SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                                            }
                                                        } else {
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                            Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                //LJY20220427 : 재시작 로직 추가
//                                                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                Context currentActivity = getApplication();
//                                                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                currentActivity.startActivity(restartIntent);
//                                                System.exit(0);

                                                            return;
                                                        }
                                                    } else
                                                        //LJY20201005 : OKPOS 서명 연동
                                                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                        {
                                                            mUart = new libUart();
                                                            isrun = true;

                                                            Arrays.fill(RECVBuf, (char) 0x00);

                                                            initSerial();
                                                            isSign = true;

                                                            writeBuffer = new char[53];
                                                            writeBuffer[0] = 0x02; //Header ID
                                                            writeBuffer[1] = 0x42; //Command ID
                                                            writeBuffer[2] = 0x00;
                                                            writeBuffer[3] = 0x48; //Length(2)
                                                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                            temp = new byte[53];
                                                            for (int i = 0; i < 53; i++) {
                                                                temp[i] = (byte) writeBuffer[i];
                                                            }
                                                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                            //LJY20201217 : 포트번호/통신속도 가변
                                                            mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                            }
                                                            mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                            mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                            handlerThread = new handler_thread(handler);
                                                            handlerThread.start();
                                                        } else {
                                                            Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                            startActivityForResult(SignPadintent, 1);
                                                        }
                                                return;
                                            } else {
                                                if (strCashnum.indexOf("=") == -1)
                                                    strCashnum = strCashnum + "=";
                                                sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                            }
                                          }
                                        } else if (strCashnum.length() == 22 && strCashnum.substring(0, 2).equals("17")) //SSGPAY
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO SSGPAY 거래입니다.");
                                            //서명도 필요

                                            if (strDealgb.equals("0521")) {     //OSM20241011 : SSGPAY 서명 망상취소
                                                if (strCashnum.indexOf("=") == -1)
                                                    strCashnum = strCashnum + "=";
                                                sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                            } else {

                                                //LJY20200902 : PAYPRO 서명연동
                                                if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("30") || strDealtp.equals("DC"))) {
                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] SSGPAY - 서명");

                                                    //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                    if (strSigndata.length() > 0)
                                                        PayWithSign(strSigndata);
                                                    else
                                                        //LJY20220427 : 멀티패드 서명 연동
                                                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                if (isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                                                    isrun = true;

                                                                    handlerThread = new handler_thread(handler);
                                                                    handlerThread.start();

                                                                    Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                    initSerial();
                                                                    //isMultipad = true;
                                                                    //btnDisable();
                                                                    isSign = true;

                                                                    writeBuffer = new char[53];
                                                                    writeBuffer[0] = 0x02; //Header ID
                                                                    writeBuffer[1] = 0x42; //Command ID
                                                                    writeBuffer[2] = 0x00;
                                                                    writeBuffer[3] = 0x48; //Length(2)
                                                                    String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                    writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                    temp = new byte[53];
                                                                    for (int i = 0; i < 53; i++) {
                                                                        temp[i] = (byte) writeBuffer[i];
                                                                    }
                                                                    PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                    usbService.write(temp);
                                                                } else {
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                                                    Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                                                    SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                                                }
                                                            } else {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                                Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                //LJY20220427 : 재시작 로직 추가
//                                                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                Context currentActivity = getApplication();
//                                                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                currentActivity.startActivity(restartIntent);
//                                                System.exit(0);

                                                                return;
                                                            }
                                                        } else
                                                            //LJY20201005 : OKPOS 서명 연동
                                                            if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                            {
                                                                mUart = new libUart();
                                                                isrun = true;

                                                                Arrays.fill(RECVBuf, (char) 0x00);

                                                                initSerial();
                                                                isSign = true;

                                                                writeBuffer = new char[53];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = 0x42; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x48; //Length(2)
                                                                String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                temp = new byte[53];
                                                                for (int i = 0; i < 53; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                                //LJY20201217 : 포트번호/통신속도 가변
                                                                mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                    mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                    mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                                }
                                                                mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                                handlerThread = new handler_thread(handler);
                                                                handlerThread.start();
                                                            } else {
                                                                Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                                startActivityForResult(SignPadintent, 1);
                                                            }
                                                    return;
                                                } else {
                                                    if (strCashnum.indexOf("=") == -1)
                                                        strCashnum = strCashnum + "=";
                                                    sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                                }
                                            }
                                        } else if (strCashnum.length() == 24 && strCashnum.substring(0, 4).equals("8710")) //LPAY
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO LPAY 거래입니다.");

                                            if (strDealgb.equals("0521")) {     //OSM20241011 : LPAY 서명 망상취소
                                                if (strCashnum.indexOf("=") == -1)
                                                    strCashnum = strCashnum + "=";
                                                sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                            } else {
                                                //서명도 필요

                                                //LJY20200902 : PAYPRO 서명연동
                                                if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("30") || strDealtp.equals("DC"))) {
                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] LPAY - 서명");

                                                    //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                    if (strSigndata.length() > 0)
                                                        PayWithSign(strSigndata);
                                                    else
                                                        //LJY20220427 : 멀티패드 서명 연동
                                                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false) == true) {
                                                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                if (isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                                                    isrun = true;

                                                                    handlerThread = new handler_thread(handler);
                                                                    handlerThread.start();

                                                                    Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                    initSerial();
                                                                    //isMultipad = true;
                                                                    //btnDisable();
                                                                    isSign = true;

                                                                    writeBuffer = new char[53];
                                                                    writeBuffer[0] = 0x02; //Header ID
                                                                    writeBuffer[1] = 0x42; //Command ID
                                                                    writeBuffer[2] = 0x00;
                                                                    writeBuffer[3] = 0x48; //Length(2)
                                                                    String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                    writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                    temp = new byte[53];
                                                                    for (int i = 0; i < 53; i++) {
                                                                        temp[i] = (byte) writeBuffer[i];
                                                                    }
                                                                    PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                    usbService.write(temp);
                                                                } else {
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                                                    Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                                                    SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                                                }
                                                            } else {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                                Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                //LJY20220427 : 재시작 로직 추가
//                                                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                Context currentActivity = getApplication();
//                                                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                currentActivity.startActivity(restartIntent);
//                                                System.exit(0);

                                                                return;
                                                            }
                                                        } else
                                                            //LJY20201005 : OKPOS 서명 연동
                                                            if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                            {
                                                                mUart = new libUart();
                                                                isrun = true;

                                                                Arrays.fill(RECVBuf, (char) 0x00);

                                                                initSerial();
                                                                isSign = true;

                                                                writeBuffer = new char[53];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = 0x42; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x48; //Length(2)
                                                                String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                temp = new byte[53];
                                                                for (int i = 0; i < 53; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                                //LJY20201217 : 포트번호/통신속도 가변
                                                                mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                    mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                    mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                                }
                                                                mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                                handlerThread = new handler_thread(handler);
                                                                handlerThread.start();
                                                            } else {
                                                                Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                                startActivityForResult(SignPadintent, 1);
                                                            }
                                                    return;
                                                } else {
                                                    if (strCashnum.indexOf("=") == -1)
                                                        strCashnum = strCashnum + "=";
                                                    sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                                }
                                            }
                                        }   else if ((strCashnum.length() > 16 && strCashnum.length() < 25) && (Integer.parseInt(strCashnum.substring(0, 2)) > 19 && Integer.parseInt(strCashnum.substring(0, 2)) < 34)) //알리페이
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 알리페이 거래입니다.");

                                            mTxtnum = "";
                                            if (mApprno.length() == 20)
                                                mTxtnum = mApprno;
                                            mApprno = "        ";

                                            if (strCashnum.indexOf("=") == -1)
                                                strCashnum = strCashnum + "=";
                                            sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                        } else if ((strCashnum.length() > 15 && strCashnum.length() < 22) && (Integer.parseInt(strCashnum.substring(0, 2)) > 9 && Integer.parseInt(strCashnum.substring(0, 2)) < 16)) //위챗페이
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 위챗페이 거래입니다.");

                                            mTxtnum = "";
                                            if (mApprno.length() == 20)
                                                mTxtnum = mApprno;
                                            mApprno = "        ";

                                            if (strCashnum.indexOf("=") == -1)
                                                strCashnum = strCashnum + "=";
                                            sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                        } else if (strCashnum.length() == 24 && strCashnum.substring(0, 6).equals("800088")) //제로페이 바코드
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 제로페이 바코드 거래입니다.");
                                            if (strCashnum.indexOf("=") == -1)
                                                strCashnum = strCashnum + "=";
                                            if (mApprno.length() >= 12)
                                                sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + mApprdate.substring(0, 6) + mApprno.substring(0, 12) + "                                       " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                            else
                                                sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + mApprdate.substring(0, 6) + mApprno + space.substring(0, 12 - mApprno.length()) + "                                       " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                        } else if (strCashnum.length() == 25 && strCashnum.substring(0, 4).equals("3-PG")) //제로페이 QR
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 제로페이 QR 거래입니다.");
                                            if (strCashnum.indexOf("=") == -1)
                                                strCashnum = strCashnum + "=";
                                            if (mApprno.length() >= 12)
                                                sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + mApprdate.substring(0, 6) + mApprno.substring(0, 12) + "                                       " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                            else
                                                sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + mApprdate.substring(0, 6) + mApprno + space.substring(0, 12 - mApprno.length()) + "                                       " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                        } else if (strCashnum.length() == 21) //앱카드
                                        {
                                            if (strCashnum.substring(0, 6).equals("941083")) { //LJY20230130 : 서울페이 서명 무시
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 서울페이 거래입니다.");
                                                if (strCashnum.indexOf("=") == -1)
                                                    strCashnum = strCashnum + "=";
                                                sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                            } else
//                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 앱카드 거래입니다.");

                                                if (strDealgb.equals("0521")) {     //OSM20241011 : 앱카드 서명 망상취소
                                                    if (strCashnum.indexOf("=") == -1)
                                                        strCashnum = strCashnum + "=";
                                                    sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                                } else {
                                                    //LJY20200902 : PAYPRO 서명연동
                                                    if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("30") || strDealtp.equals("DC"))) {
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 앱카드 - 서명");

                                                        //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                        if (strSigndata.length() > 0)
                                                            PayWithSign(strSigndata);
                                                        else
                                                            //LJY20220427 : 멀티패드 서명 연동
                                                            if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false) == true) {
                                                                if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                    if (isrun == false) {        //OSM20240605 : 중복 호출 방지 추가
                                                                        isrun = true;

                                                                        handlerThread = new handler_thread(handler);
                                                                        handlerThread.start();

                                                                        Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                        initSerial();
                                                                        //isMultipad = true;
                                                                        //btnDisable();
                                                                        isSign = true;

                                                                        writeBuffer = new char[53];
                                                                        writeBuffer[0] = 0x02; //Header ID
                                                                        writeBuffer[1] = 0x42; //Command ID
                                                                        writeBuffer[2] = 0x00;
                                                                        writeBuffer[3] = 0x48; //Length(2)
                                                                        String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                        writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                        temp = new byte[53];
                                                                        for (int i = 0; i < 53; i++) {
                                                                            temp[i] = (byte) writeBuffer[i];
                                                                        }
                                                                        PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                        usbService.write(temp);
                                                                    } else {
                                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -12:API가 이미 진행중입니다.");
                                                                        Toast.makeText(MainActivity.this, "-12:API가 이미 진행중입니다.", Toast.LENGTH_SHORT).show();
                                                                        SetResultFunc(RESULT_CANCELED, -12, "API 실행중, 중복 요청 불가"); //OSM20240707 : 중복요청 팝업 추가
                                                                    }
                                                                } else {
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                                    Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                                    SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                //LJY20220427 : 재시작 로직 추가
//                                                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                Context currentActivity = getApplication();
//                                                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                currentActivity.startActivity(restartIntent);
//                                                System.exit(0);

                                                                    return;
                                                                }
                                                            } else
                                                                //LJY20201005 : OKPOS 서명 연동
                                                                if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                                {
                                                                    mUart = new libUart();
                                                                    isrun = true;

                                                                    Arrays.fill(RECVBuf, (char) 0x00);

                                                                    initSerial();
                                                                    isSign = true;

                                                                    writeBuffer = new char[53];
                                                                    writeBuffer[0] = 0x02; //Header ID
                                                                    writeBuffer[1] = 0x42; //Command ID
                                                                    writeBuffer[2] = 0x00;
                                                                    writeBuffer[3] = 0x48; //Length(2)
                                                                    String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                    writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                    temp = new byte[53];
                                                                    for (int i = 0; i < 53; i++) {
                                                                        temp[i] = (byte) writeBuffer[i];
                                                                    }
                                                                    PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                                    //LJY20201217 : 포트번호/통신속도 가변
                                                                    mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                    if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                        mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                        mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                                    }
                                                                    mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                    mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                                    handlerThread = new handler_thread(handler);
                                                                    handlerThread.start();
                                                                } else {
                                                                    Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                                    startActivityForResult(SignPadintent, 1);
                                                                }
                                                        return;
                                                    } else {
                                                        if (strCashnum.indexOf("=") == -1)
                                                            strCashnum = strCashnum + "=";
                                                        sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                                    }
                                              }
                                        } else if (strCashnum.length() >= 100 && strCashnum.substring(0, 7).equals("hQVDUFY")) //비씨은련QR
                                        {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 거래입니다.");

                                            NiceUniQr niceuniqr = new NiceUniQr(); //LJY20220905 : JAR로 변경

                                            //LJY20220905 : byte > char 변경
                                            char[] Output_AID_FIRST = new char[1024];
                                            char[] Output_PAN = new char[1024];
                                            char[] Output_EMV_NICE = new char[1024];
                                            char[] Output_TLV = new char[1024];
                                            char[] Output_UPLAN = new char[1024];

                                            Arrays.fill(Output_AID_FIRST, (char) 0x00);
                                            Arrays.fill(Output_PAN, (char) 0x00);
                                            Arrays.fill(Output_EMV_NICE, (char) 0x00);
                                            Arrays.fill(Output_TLV, (char) 0x00);
                                            Arrays.fill(Output_UPLAN, (char) 0x00);

//                                    int ret = niceuniqr.Uni_QR(strCashnum.getBytes(), Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);
                                            int ret = niceuniqr.Uni_QR2(strCashnum, Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);

                                            String tvaid = "", tvpan = "", tvemv = "", tvtlv = "", tvuplancode = "";

                                            if (ret == 1) {
                                                for (int i = 0; i < 1024; i++) {
                                                    if (Output_AID_FIRST[i] == 0x00) {
                                                        tvaid = new String(Output_AID_FIRST).substring(0, i);
                                                        break;
                                                    }
                                                }
                                                for (int i = 0; i < 1024; i++) {
                                                    if (Output_PAN[i] == 0x00) {
                                                        tvpan = new String(Output_PAN).substring(0, i);
                                                        break;
                                                    }
                                                }
                                                for (int i = 0; i < 1024; i++) {
                                                    if (Output_EMV_NICE[i] == 0x00) {
                                                        tvemv = new String(Output_EMV_NICE).substring(0, i);
                                                        break;
                                                    }
                                                }
                                                for (int i = 0; i < 1024; i++) {
                                                    if (Output_TLV[i] == 0x00) {
                                                        tvtlv = new String(Output_TLV).substring(0, i);
                                                        break;
                                                    }
                                                }
                                                for (int i = 0; i < 1024; i++) {
                                                    if (Output_UPLAN[i] == 0x00) {
                                                        tvuplancode = new String(Output_UPLAN).substring(0, i);
                                                        break;
                                                    }
                                                }

                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 변환 성공!");

                                                if (tvaid.equals("A")) //은련QR
                                                {
                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 은련QR 거래!");

                                                    mTxt = "CUP";

                                                    if (strDealgb.equals("0561")) {     //OSM20241011 : PAYPRO 은련 BCQR 서명 망상취소
                                                        sendBuff = ("0694" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + tvemv).getBytes();
                                                    } else {
                                                        //LJY20200902 : PAYPRO 서명연동
                                                        if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("30") || strDealtp.equals("DC"))) {
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 은련QR - 서명");

                                                            //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                            if (strSigndata.length() > 0)
                                                                PayWithSign(strSigndata);
                                                            else
                                                                //LJY20220427 : 멀티패드 서명 연동
                                                                if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                                                    if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                        isrun = true;

                                                                        handlerThread = new handler_thread(handler);
                                                                        handlerThread.start();

                                                                        Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                        initSerial();
                                                                        //isMultipad = true;
                                                                        //btnDisable();
                                                                        isSign = true;

                                                                        writeBuffer = new char[53];
                                                                        writeBuffer[0] = 0x02; //Header ID
                                                                        writeBuffer[1] = 0x42; //Command ID
                                                                        writeBuffer[2] = 0x00;
                                                                        writeBuffer[3] = 0x48; //Length(2)
                                                                        String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                        writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                        temp = new byte[53];
                                                                        for (int i = 0; i < 53; i++) {
                                                                            temp[i] = (byte) writeBuffer[i];
                                                                        }
                                                                        PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                        usbService.write(temp);
                                                                    } else {
                                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                                        Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                                        SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                        //LJY20220427 : 재시작 로직 추가
//                                                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                        Context currentActivity = getApplication();
//                                                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                        currentActivity.startActivity(restartIntent);
//                                                        System.exit(0);

                                                                        return;
                                                                    }
                                                                } else
                                                                    //LJY20201005 : OKPOS 서명 연동
                                                                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                                    {
                                                                        mUart = new libUart();
                                                                        isrun = true;

                                                                        Arrays.fill(RECVBuf, (char) 0x00);

                                                                        initSerial();
                                                                        isSign = true;

                                                                        writeBuffer = new char[53];
                                                                        writeBuffer[0] = 0x02; //Header ID
                                                                        writeBuffer[1] = 0x42; //Command ID
                                                                        writeBuffer[2] = 0x00;
                                                                        writeBuffer[3] = 0x48; //Length(2)
                                                                        String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                        writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                        temp = new byte[53];
                                                                        for (int i = 0; i < 53; i++) {
                                                                            temp[i] = (byte) writeBuffer[i];
                                                                        }
                                                                        PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                                        //LJY20201217 : 포트번호/통신속도 가변
                                                                        mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                        if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                            mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                            mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                                        }
                                                                        mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                        mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                                        handlerThread = new handler_thread(handler);
                                                                        handlerThread.start();
                                                                    } else {
                                                                        Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                                        startActivityForResult(SignPadintent, 1);
                                                                    }
                                                            return;
                                                        } else
                                                            sendBuff = ("0694" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + tvemv).getBytes();
                                                    }
                                                } else //비씨QR
                                                {
                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨QR 거래!");

                                                    mTxt = "HPS";

                                                    if (strDealgb.equals("0561")) {     //OSM20241011 : PAYPRO BCQR 서명 망상취소
                                                        sendBuff = ("0694" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + tvemv).getBytes();
                                                    } else {

                                                        //LJY20200902 : PAYPRO 서명연동
                                                        if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("30") || strDealtp.equals("DC"))) {
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 비씨QR - 서명");

                                                            //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                                            if (strSigndata.length() > 0)
                                                                PayWithSign(strSigndata);
                                                            else
                                                                //LJY20220427 : 멀티패드 서명 연동
                                                                if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                                                    if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                        isrun = true;

                                                                        handlerThread = new handler_thread(handler);
                                                                        handlerThread.start();

                                                                        Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                                                        initSerial();
                                                                        //isMultipad = true;
                                                                        //btnDisable();
                                                                        isSign = true;

                                                                        writeBuffer = new char[53];
                                                                        writeBuffer[0] = 0x02; //Header ID
                                                                        writeBuffer[1] = 0x42; //Command ID
                                                                        writeBuffer[2] = 0x00;
                                                                        writeBuffer[3] = 0x48; //Length(2)
                                                                        String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                        writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                        temp = new byte[53];
                                                                        for (int i = 0; i < 53; i++) {
                                                                            temp[i] = (byte) writeBuffer[i];
                                                                        }
                                                                        PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                                                        usbService.write(temp);
                                                                    } else {
                                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                                                        Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                                        SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                                        //LJY20220427 : 재시작 로직 추가
//                                                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                                        Context currentActivity = getApplication();
//                                                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                                        currentActivity.startActivity(restartIntent);
//                                                        System.exit(0);

                                                                        return;
                                                                    }
                                                                } else
                                                                    //LJY20201005 : OKPOS 서명 연동
                                                                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                                    {
                                                                        mUart = new libUart();
                                                                        isrun = true;

                                                                        Arrays.fill(RECVBuf, (char) 0x00);

                                                                        initSerial();
                                                                        isSign = true;

                                                                        writeBuffer = new char[53];
                                                                        writeBuffer[0] = 0x02; //Header ID
                                                                        writeBuffer[1] = 0x42; //Command ID
                                                                        writeBuffer[2] = 0x00;
                                                                        writeBuffer[3] = 0x48; //Length(2)
                                                                        String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                                                        writeBuffer[52] = xor_sum(writeBuffer, 52);

                                                                        temp = new byte[53];
                                                                        for (int i = 0; i < 53; i++) {
                                                                            temp[i] = (byte) writeBuffer[i];
                                                                        }
                                                                        PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                                                        //LJY20201217 : 포트번호/통신속도 가변
                                                                        mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                        if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                                            mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                                            mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                                                        }
                                                                        mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                                                        mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                                                        handlerThread = new handler_thread(handler);
                                                                        handlerThread.start();
                                                                    } else {
                                                                        Intent SignPadintent = new Intent(MainActivity.this, SignPad.class);
                                                                        startActivityForResult(SignPadintent, 1);
                                                                    }
                                                            return;
                                                        } else
                                                            sendBuff = ("0694" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + tvemv).getBytes();
                                                    }
                                                }
                                            } else {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -13 : 비씨은련QR 변환 실패!");
                                                SetResultFunc(RESULT_CANCELED, -13, "POS전문오류 - 비씨은련QR 변환 실패!");
                                                return;
                                            }

                                            if (bRelease)
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                            else
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                                System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                            } else
                                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                            try {
                                                if (new String(recvBuff, "EUC-KR").equals("-1")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                                                } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                                                } else {
//                                            if (bRelease)
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 68) + "**********" + (new String(recvBuff, "EUC-KR")).substring(78, recvBuff.length - 78));
//                                            else
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));

                                                    System.arraycopy("PRO".getBytes(), 0, recvBuff, 4, 3);
                                                    if (tvaid.equals("A")) //은련QR
                                                        System.arraycopy("UPQ".getBytes(), 0, recvBuff, 35, 3);
                                                    else if (tvaid.equals("N")) //LJY20220905 : 네이버페이
                                                        System.arraycopy("NHQ".getBytes(), 0, recvBuff, 35, 3);
                                                    else
                                                        System.arraycopy("BCQ".getBytes(), 0, recvBuff, 35, 3);
                                                }

                                                try {
                                                    sTxtnum = new String(recvBuff, 7, 20, "EUC-KR");    //OSM20241011 : 전문 Recv 이후, 전문관리번호 변수에 저장
                                                    SharedManager.LogDebug(bLogUse, "debugjy", sTxtnum);
                                                }

                                                catch(UnsupportedEncodingException e)
                                                {
                                                    e.printStackTrace();
                                                }

                                                InsertRecv(recvBuff);
                                            } catch (UnsupportedEncodingException e) {
                                                e.printStackTrace();
                                            }

                                            try {
                                                sTxtnum = new String(recvBuff, 7, 20, "EUC-KR");    //OSM20241011 : 전문 Recv 이후, 전문관리번호 변수에 저장
                                                SharedManager.LogDebug(bLogUse, "debugjy", sTxtnum);
                                            }

                                            catch(UnsupportedEncodingException e)
                                            {
                                                e.printStackTrace();
                                            }

                                            //InsertRecv(recvBuff);
                                            return;
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 기타 거래입니다.");
                                            if (strCashnum.indexOf("=") == -1)
                                                strCashnum = strCashnum + "=";
                                            sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                        }
                                    }

                                    if (bRelease)
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                    else
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                    mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                    if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                        System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                        recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                    } else
                                        recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
//                            PopupClose();

                                    try {
                                        sTxtnum = new String(recvBuff, 7, 20, "EUC-KR");    //OSM20241011 : 전문 Recv 이후, 전문관리번호 변수에 저장
                                        SharedManager.LogDebug(bLogUse, "debugjy", sTxtnum);
                                    }

                                    catch(UnsupportedEncodingException e)
                                    {
                                        e.printStackTrace();
                                    }

                                    InsertRecv(recvBuff);
                                } else if ((strDealgb.equals("0300") || strDealgb.equals("0520") || strDealgb.equals("0320") || strDealgb.equals("0540")) && strWcc.equals("L")) {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드 거래입니다.");
                                    IntentIntegrator integrator = new IntentIntegrator(MainActivity.this);
//                            integrator.setBeepEnabled(false);
                                    integrator.setCaptureActivity(CaptureActivityAnyOrientation.class);
                                    integrator.setOrientationLocked(false);
                                    integrator.initiateScan();
                                    return;
                                } else
                                    //20200207 : 멤버쉽바코드입력거래
                                    if ((strDealgb.equals("0320") || strDealgb.equals("0540")) && strWcc.equals("P")) {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 멤버쉽 POS 입력 거래입니다.");
                                        String space = "                                                                                                                                                      ";

                                        if (strCashnum.indexOf("=") == -1)
                                            strCashnum = strCashnum + "=";

                                        PosClient posClient = new PosClient();
                                        if (strDealgb.equals("0320")) {
                                            sendBuff = ("0343" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + mTax + mBongsa + new SimpleDateFormat("YYYYMMddHHmmss").format(new Date()) + "@37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mMoney.substring(3, 12) + mHalbu + "            " + "      " + mUninum + mFiller + " ").getBytes();
                                        } else {
                                            if (strDealtp.equals("10")) strDealtp = "30";

                                            sendBuff = ("0343" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + mTax + mBongsa + new SimpleDateFormat("YYYYMMddHHmmss").format(new Date()) + "@37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mMoney.substring(3, 12) + mHalbu + mApprno.substring(0, 12) + mApprdate.substring(0, 6) + mUninum + mFiller + " ").getBytes();
                                        }

                                        if (strDealtp.equals("65") || strDealtp.equals("66") || strDealtp.equals("67") || strDealtp.equals("68")) //OSM20230818 : IFC 멤버십 요청 디버깅 모드 설정
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                        else if (bRelease)
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                        else
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                        mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                        if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                            System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                            recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                        } else
                                            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                        PopupClose();
                                        InsertRecv(recvBuff);
                                    } else
                                        //20200207 : 포인트바코드입력거래
                                        if ((strDealgb.equals("0300") || strDealgb.equals("0520")) && strWcc.equals("P")) {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 포인트 POS 입력 거래입니다.");
                                            String space = "                                                                                                                                                      ";

                                            if (strCashnum.indexOf("=") == -1)
                                                strCashnum = strCashnum + "=";

                                            PosClient posClient = new PosClient();
                                            if (strDealgb.equals("0300")) {
                                                if (mTxt.equals("ZRP"))
                                                    sendBuff = ("0437" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "@" + strCashnum + space.substring(0, 127 - strCashnum.length()) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                                else
                                                    sendBuff = ("0437" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "@37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                            } else {
                                                if (strDealtp.equals("10")) strDealtp = "30";

                                                if (mTxt.equals("ZRP"))
                                                    sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "@" + strCashnum + space.substring(0, 127 - strCashnum.length()) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                                else
                                                    sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "@37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                            }

                                            if (bRelease)
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                            else
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                                System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                            } else
                                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                            PopupClose();
                                            InsertRecv(recvBuff);
                                        } else
                                            //OSM20231215 : 신용 무카드 부분취소
                                            if ((strDealgb.equals("0420") || strDealgb.equals("0520")) && strDealtp.equals("10") && strWcc.equals("N") && strTxt.equals("PCL")) {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 신용 무카드 부분취소입니다.");
                                                String space = "                                                                                                                                                      ";

                                                PosClient posClient = new PosClient();
                                                sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "@" + strCashnum + space.substring(0, 127 - strCashnum.length()) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + space.substring(0, 12) + space.substring(0, 10) + strStoamt + space.substring(0, 13 - strStoamt.length()) + space.substring(0, 16) + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));

                                                if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //전용회선 사용 시
                                                    System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                    recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                                } else
                                                    recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);

                                                InsertRecv(recvBuff);
                                            }
                                            else
                                                //20200207 : 신용거래일련번호취소
                                                if ((strDealgb.equals("0420") || strDealgb.equals("0520")) && strDealtp.equals("10") && strWcc.equals("N")) {
                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 신용 거래일련번호취소입니다.");
                                                    String space = "                                                                                                                                                      ";

                                                    PosClient posClient = new PosClient();
                                                    sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "@" + strCashnum + space.substring(0, 107) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                                    if (bRelease)
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                                    else
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                                    mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                                    if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                                        System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                        recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                                    } else
                                                        recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                                    PopupClose();
                                                    InsertRecv(recvBuff);
                                                } else
                                                    //20200207 : 현금무카드취소
                                                    if ((strDealgb.equals("0420") || strDealgb.equals("0520")) && strDealtp.equals("21") && strWcc.equals("N")) {
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금 무카드취소입니다.");
                                                        String space = "                                                                                                                                                      ";

                                                        PosClient posClient = new PosClient();
                                                        sendBuff = ("0437" + mTxt + mTxtnum + "042021" + mDevicegb + "          " + mCatid + "@" + space.substring(0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(1, 9) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                                        if (bRelease)
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                                        else
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                                        mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                                        if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                                            System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                            recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                                        } else
                                                            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                                        PopupClose();
                                                        InsertRecv(recvBuff);
                                                    } else if ((strWcc.equals("P") || strHalbu.equals("03")) && strDealtp.equals("21")) { //현금 식별번호 입력 방식 또는 자진발급
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금 식별번호 입력 결제입니다.");
                                                        String cashnum;
                                                        String space = "                                                                                                                                                      ";

                                                        if (strHalbu.equals("03")) {
                                                            cashnum = "37" + "0100001234" + "=";
                                                            mHalbu = "01";
                                                        } else
                                                            cashnum = "37" + strCashnum + "="; //길이체크함

                                                        PosClient posClient = new PosClient();
                                                        if (strDealgb.equals("0200"))
                                                            sendBuff = ("0437" + mTxt + mTxtnum + "020021" + mDevicegb + "          " + mCatid + "@" + cashnum + space.substring(0, 127 - cashnum.length()) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                                        else
                                                            sendBuff = ("0437" + mTxt + mTxtnum + "042021" + mDevicegb + "          " + mCatid + "@" + cashnum + space.substring(0, 127 - cashnum.length()) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(1, 9) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                                        if (bRelease)
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                                        else
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                                        mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                                        if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                                            System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                            recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                                        } else
                                                            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                                        PopupClose();
                                                        InsertRecv(recvBuff);

                                                        return;
                                                    } else if (strWcc.equals("T") && strDealtp.equals("21")) //현금 터치 스크린
                                                    {
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금 터치 스크린 결제입니다.");
                                                        Intent i = new Intent(MainActivity.this, KeyPadNumber.class);
                                                        startActivityForResult(i, 3);
                                                    } else if ((strDealgb.equals("0200") || strDealgb.equals("0420")) && (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) && (strHalbu.equals("00") || strHalbu.equals("01") || strHalbu.equals("02"))) //20200316 : 현금IC
                                                    {
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC 결제입니다.");

                                                        cashic_dttm = (new SimpleDateFormat("yyyyMMddHHmmssFF")).format(new Date()); //LJY20200327 : 현금IC 일반거래

                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] cashic_dttm : " + cashic_dttm);

                                                        if (strDealgb.equals("0420") && strDealtp.equals("I4") && strHalbu.equals("02")) //LJY20200327 : 현금IC 무카드취소
                                                        {
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC 무카드취소 VAN 승인");
                                                            PopupOpen(MainActivity.this, "현금IC 무카드취소 VAN 승인 중입니다.");

                                                            PosClient posClient = new PosClient();

                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC 무카드취소 거래");
                                                            if (mTxtnum.length() != 20 || strDealgb.length() != 4 || strDealtp.length() != 2 || mHalbu.length() != 2 || mApprno.length() != 8 || mApprdate.length() != 6) {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -22 : 현금IC 무카드취소 전문길이 에러");
                                                                Toast.makeText(MainActivity.this, "-22 : 현금IC 무카드취소 전문길이 에러", Toast.LENGTH_SHORT).show();
                                                                SetResultFunc(RESULT_CANCELED, -22, "현금IC 무카드취소 전문길이 에러");
                                                                return;
                                                            }
                                                            if (!mApprtid.substring(0, 2).equals("  ") && mApprtid.length() == 10)
                                                                mCatid = mApprtid;

                                                            sendBuff = ("0407" + "HPS" + mTxtnum + strDealgb + strDealtp + "H1" + "          " + mCatid + " 37" + space.substring(0, 30) + "       " + mHalbu + mBongsa + mTax + mMoney + mApprno + mApprdate + space.substring(0, 51) + space.substring(0, 3) + space.substring(0, 16) + space.substring(0, 130) + "  " + mFiller + (char) 0x0d).getBytes();

                                                            if (bRelease)
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                                            else
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));

                                                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                                                System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                                            } else
                                                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                                            PopupClose();
                                                            InsertRecv(recvBuff);
                                                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                                                        {
                                                            isrun = true;

                                                            Arrays.fill(RECVBuf, (char) 0x00);
                                                            Arrays.fill(encdata, (char) 0x00);
                                                            Arrays.fill(icdata, (char) 0x00);

                                                            initSerial();

                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC카드여부 요청입니다.");
                                                            func_code = 0x80;

                                                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                                                            // Serial Port Check
                                                            int readState = scr.checkSerialPortOpened();
                                                            if (readState != RTN_COMM_OK) {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                                                return;
                                                            }

                                                            scr.clearTxBuffer();

                                                            writeBuffer = new char[25];
                                                            writeBuffer[0] = 0x02; //Header ID
                                                            writeBuffer[1] = func_code; //Command ID
                                                            writeBuffer[2] = 0x00;
                                                            writeBuffer[3] = 0x20; //Length(2)
                                                            String sendstr = "F1" + mTimeout + cashic_dttm; //현금IC 거래구분(2) + 대기시간(2) + TIME(16)
                                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                                                            writeBuffer[24] = xor_sum(writeBuffer, 24);

                                                            temp = new byte[25];
                                                            for (int i = 0; i < 25; i++) {
                                                                temp[i] = (byte) writeBuffer[i];
                                                            }
                                                            scr.sendMsg(temp, temp.length);
                                                            PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");

                                                            scr.clearRxBuffer();
                                                            handlerThread = new handler_thread(handler);
                                                            handlerThread.start();
                                                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                                        {
                                                            mUart = new libUart();
                                                            isrun = true;

                                                            Arrays.fill(RECVBuf, (char) 0x00);
                                                            Arrays.fill(encdata, (char) 0x00);
                                                            Arrays.fill(icdata, (char) 0x00);

                                                            initSerial();

                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC카드여부 요청입니다.");
                                                            func_code = 0x80;

                                                            writeBuffer = new char[25];
                                                            writeBuffer[0] = 0x02; //Header ID
                                                            writeBuffer[1] = func_code; //Command ID
                                                            writeBuffer[2] = 0x00;
                                                            writeBuffer[3] = 0x20; //Length(2)
                                                            String sendstr = "F1" + mTimeout + cashic_dttm; //현금IC 거래구분(2) + 대기시간(2) + TIME(16)
                                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                                                            writeBuffer[24] = xor_sum(writeBuffer, 24);

                                                            temp = new byte[25];
                                                            for (int i = 0; i < 25; i++) {
                                                                temp[i] = (byte) writeBuffer[i];
                                                            }
                                                            PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");

                                                            //LJY20201217 : 포트번호/통신속도 가변
                                                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                                                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                                                            }
                                                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                                                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                                                            handlerThread = new handler_thread(handler);
                                                            handlerThread.start();
                                                        } else {
                                                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                isrun = true;

                                                                handlerThread = new handler_thread(handler);
                                                                handlerThread.start();

                                                                Arrays.fill(RECVBuf, (char) 0x00);
                                                                Arrays.fill(encdata, (char) 0x00);
                                                                Arrays.fill(icdata, (char) 0x00);

                                                                initSerial();

                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC카드여부 요청입니다.");
                                                                func_code = 0x80;

                                                                writeBuffer = new char[25];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = func_code; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x20; //Length(2)
                                                                String sendstr = "F1" + mTimeout + cashic_dttm; //현금IC 거래구분(2) + 대기시간(2) + TIME(16)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                                                                writeBuffer[24] = xor_sum(writeBuffer, 24);

                                                                temp = new byte[25];
                                                                for (int i = 0; i < 25; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");
                                                                usbService.write(temp);
                                                            } else {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                                                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                    //LJY20220427 : 재시작 로직 추가
//                                    mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                    Context currentActivity = getApplication();
//                                    Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                    Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                    currentActivity.startActivity(restartIntent);
//                                    System.exit(0);

                                                                return;
                                                            }
                                                        }
                                                    } else { //카드리딩
                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드리딩 결제입니다.");

                                                        if(mSharedManager.getPreferences().getInt("Readertype", 0) == 5) //LJY20230911 : TITENG 리더기 추가
                                                        {
                                                            final int[] itimeover = new int[1];
                                                            final int[] ret = new int[1];
                                                            final String[] sTitRecvCode = {""}; //응답코드

                                                            ret[0] = TitComm((byte) 'A'); //MS 버퍼 클리어 요청

                                                            if (ret[0] == -15) {
                                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                                                                return;
                                                            }


                                                            new TitCommAsyncTask().performAsyncTask(new TitCommCallback() {
                                                                @Override
                                                                public void onSuccess(CallbackResult result) {
                                                                    sTitRecvCode[0] = result.getResult1().substring(6, 8);
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 클리어 응답데이터 : " + result.getResult1());
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 클리어 응답코드 : " + sTitRecvCode[0]);

                                                                    if (!sTitRecvCode[0].equals("50")) { //실패 시
                                                                        SetResultFunc(RESULT_CANCELED, -901, "MS 클리어 실패! : " + sTitRecvCode[0]);
                                                                        return;
                                                                    } else { //성공 시
                                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 클리어 성공! : " + sTitRecvCode[0]);

                                                                        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
                                                                            @Override
                                                                            public void run() {
                                                                                // 사용하고자 하는 코드
                                                                                PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");
                                                                            }
                                                                        }, 0);

                                                                        lb_cardin = false;
                                                                        lb_dead = true;
                                                                        lb_insert = false;
                                                                        lb_sspay = false;
                                                                        m_Exit = false;

                                                                        tstarttit = System.currentTimeMillis();
                                                                        tendtit = 0;

                                                                        while(lb_dead)
                                                                        {
                                                                            try {
                                                                                Thread.sleep(1000);
                                                                            } catch (InterruptedException e) {
                                                                                e.printStackTrace();
                                                                            }

                                                                            itimeover[0] = calculate_interval_tit(Integer.parseInt(mTimeout));

                                                                            ret[0] = TitComm((byte) 'S');

                                                                            if (ret[0] == -15) {
                                                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                                                                                return;
                                                                            }

                                                                            new TitCommAsyncTask().performAsyncTask(new TitCommCallback() {
                                                                                @Override
                                                                                public void onSuccess(CallbackResult result) {
                                                                                    sTitRecvCode[0] = result.getResult1().substring(6, 8);
                                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 상태체크 응답데이터 : " + result.getResult1());
                                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 상태체크 응답코드 : " + sTitRecvCode[0]);

                                                                                    if (!sTitRecvCode[0].equals("50")) { //실패 시
                                                                                        SetResultFunc(RESULT_CANCELED, -903, "상태체크 실패! : " + sTitRecvCode[0]);
                                                                                        return;
                                                                                    } else {
                                                                                        char[] bResult = result.getResult2();
                                                                                        int[] bBit = new int[32];
                                                                                        Arrays.fill(bBit, 0x00);
                                                                                        hexToBinary(bBit, (int) bResult[4]);

                                                                                        if (func_code == 'S' && (bBit[7] == 1 || bBit[6] == 1)) { //상태체크 && 응답코드 'P' && 카드삽입시
                                                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드 삽입 대기 중");
                                                                                            lb_insert = true;
                                                                                        }

                                                                                        if (func_code == 'S' && (bBit[7] == 1 && bBit[6] == 1)) {
                                                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드 삽입 됨");

                                                                                            lb_cardin = true;
                                                                                            lb_dead = false;

                                                                                            return ;
                                                                                        }

                                                                                        if(func_code == 'S' && (bBit[7] == 0 && bBit[6] == 0 && (!lb_insert)))
                                                                                        {
                                                                                            if(bBit[4] == 1)
                                                                                            {
                                                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 삼성페이 인식 됨");

                                                                                                lb_cardin = true;
                                                                                                lb_dead = false;
                                                                                                lb_sspay = true;

                                                                                                return ;
                                                                                            }
                                                                                        }

                                                                                        if(itimeover[0] == 1)
                                                                                            lb_dead = false;

                                                                                        if(m_Exit)
                                                                                            lb_dead = false;
                                                                                    }
                                                                                }

                                                                                @Override
                                                                                public void onFailure(Throwable throwable) {
                                                                                    SetResultFunc(RESULT_CANCELED, -904, "상태체크 실패! : " + throwable.getMessage());
                                                                                    return ;
                                                                                }
                                                                            });
                                                                        }

                                                                        if(m_Exit)
                                                                        {
                                                                            SetResultFunc(RESULT_CANCELED, -7, "TITENG 에러코드 : CD");
                                                                            return;
                                                                        }

                                                                        if(itimeover[0] == 1)
                                                                        {
                                                                            SetResultFunc(RESULT_CANCELED, -7, "TITENG 에러코드 : F2");
                                                                            return;
                                                                        }

                                                                        if(lb_cardin) {
                                                                            try {
                                                                                Thread.sleep(1000);
                                                                            } catch (InterruptedException e) {
                                                                                e.printStackTrace();
                                                                            }

                                                                            if (lb_sspay == false)
                                                                            {
                                                                                ret[0] = TitComm((byte) 'R');

                                                                                lb_poweron = true;

                                                                                if (ret[0] == -15) {
                                                                                    SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                                                                                    return;
                                                                                }

                                                                                new TitCommAsyncTask().performAsyncTask(new TitCommCallback() {
                                                                                    @Override
                                                                                    public void onSuccess(CallbackResult result) {
                                                                                        sTitRecvCode[0] = result.getResult1().substring(6, 8);
                                                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] POWERON 응답데이터 : " + result.getResult1());
                                                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] POWERON 응답코드 : " + sTitRecvCode[0]);

                                                                                        char[] bResult = result.getResult2();
                                                                                        int[] bBit = new int[32];
                                                                                        Arrays.fill(bBit, 0x00);
                                                                                        hexToBinary(bBit, (int) bResult[4]);

                                                                                        if (!(sTitRecvCode[0].equals("50") && lb_sspay == false && bBit[5] == 1)) { //실패 시
                                                                                            SharedManager.LogDebug(bLogUse, "debugjy", "POWERON 실패! : " + sTitRecvCode[0]);

                                                                                            PopupClose();

                                                                                            ret[0] = TitComm((byte) 'e');

                                                                                            if (ret[0] == -15) {
                                                                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                                                                                                return;
                                                                                            }

                                                                                            //ret[0] = TitComm((byte) 'A');       //OSM20240704 : TIT리더기 Buffer클리어

                                                                                            new TitCommAsyncTask().performAsyncTask(new TitCommCallback() {
                                                                                                @Override
                                                                                                public void onSuccess(CallbackResult result) {
                                                                                                    sTitRecvCode[0] = result.getResult1().substring(6, 8);
                                                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드제거 응답데이터 : " + result.getResult1());
                                                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드제거 응답코드 : " + sTitRecvCode[0]);

                                                                                                    if (!sTitRecvCode[0].equals("50")) { //실패 시
                                                                                                        SetResultFunc(RESULT_CANCELED, -907, "카드제거 실패! : " + sTitRecvCode[0]);
                                                                                                        return;
                                                                                                    } else { //성공 시
                                                                                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드제거 성공! : " + sTitRecvCode[0]);

                                                                                                        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
                                                                                                            @Override
                                                                                                            public void run() {
                                                                                                                // 사용하고자 하는 코드
                                                                                                                PopupOpenEOT(MainActivity.this, "FALLBACK 카드리딩 해주세요.");
                                                                                                            }
                                                                                                        }, 0);

                                                                                                        lb_dead = true;

                                                                                                        tstarttit = System.currentTimeMillis();
                                                                                                        tendtit = 0;

                                                                                                        while(lb_dead)
                                                                                                        {
                                                                                                            try {
                                                                                                                Thread.sleep(1000);
                                                                                                            } catch (InterruptedException e) {
                                                                                                                e.printStackTrace();
                                                                                                            }

                                                                                                            if(Integer.parseInt(mTimeout) == 0)
                                                                                                                itimeover[0] = calculate_interval_tit(7200);        //OSM20240722 : 타임아웃 추가
                                                                                                            else
                                                                                                                itimeover[0] = calculate_interval_tit(Integer.parseInt(mTimeout));

                                                                                                            ret[0] = TitComm((byte) 'S');

                                                                                                            if (ret[0] == -15) {
                                                                                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                                                                                                                return;
                                                                                                            }

                                                                                                            new TitCommAsyncTask().performAsyncTask(new TitCommCallback() {
                                                                                                                @Override
                                                                                                                public void onSuccess(CallbackResult result) {
                                                                                                                    sTitRecvCode[0] = result.getResult1().substring(6, 8);
                                                                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 상태체크 응답데이터 : " + result.getResult1());
                                                                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 상태체크 응답코드 : " + sTitRecvCode[0]);

                                                                                                                    if (!sTitRecvCode[0].equals("50")) { //실패 시
                                                                                                                        SetResultFunc(RESULT_CANCELED, -903, "상태체크 실패! : " + sTitRecvCode[0]);
                                                                                                                        return;
                                                                                                                    } else {
                                                                                                                        char[] bResult = result.getResult2();
                                                                                                                        int[] bBit = new int[32];
                                                                                                                        Arrays.fill(bBit, 0x00);
                                                                                                                        hexToBinary(bBit, (int) bResult[4]);

                                                                                                                        if(func_code == 'S' && bBit[7] == 0 && bBit[6] == 0)
                                                                                                                        {
                                                                                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드 제거 됨2");

                                                                                                                            lb_cardin = false;
                                                                                                                            lb_dead = false;

                                                                                                                            return;
                                                                                                                        }

                                                                                                                        if(itimeover[0] == 1)
                                                                                                                            lb_dead = false;
                                                                                                                        if(m_Exit)
                                                                                                                            lb_dead = false;

                                                                                                                    }
                                                                                                                }
                                                                                                                @Override
                                                                                                                public void onFailure(Throwable throwable) {
                                                                                                                    SetResultFunc(RESULT_CANCELED, -904, "상태체크 실패! : " + throwable.getMessage());

                                                                                                                    return ;                                                                                                                }
                                                                                                            });
                                                                                                        }

                                                                                                        if(m_Exit)
                                                                                                        {
                                                                                                            SetResultFunc(RESULT_CANCELED, -7, "TITENG 에러코드 : CD");
                                                                                                            return;
                                                                                                        }

                                                                                                        if(itimeover[0] == 1)
                                                                                                        {
                                                                                                            SetResultFunc(RESULT_CANCELED, -7, "TITENG 에러코드 : F2");
                                                                                                            return;
                                                                                                        }



                                                                                                        if(func_code == 'S' && bBit[4] == 1)
                                                                                                        {
                                                                                                            lb_poweron = false;

                                                                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 리딩 됨");


                                                                                                            try {
                                                                                                                Thread.sleep(500);
                                                                                                            } catch (InterruptedException e) {
                                                                                                                e.printStackTrace();
                                                                                                            }

                                                                                                            ret[0] = TitComm((byte) 'S');

                                                                                                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                                                                isrun = true;

                                                                                                                handlerThread = new handler_thread(handler);
                                                                                                                handlerThread.start();


                                                                                                                Arrays.fill(RECVBuf, (char) 0x00);
                                                                                                                Arrays.fill(encdata, (char) 0x00);
                                                                                                                Arrays.fill(icdata, (char) 0x00);

                                                                                                                initSerial();

                                                                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 카드리딩 요청입니다.");
                                                                                                                func_code = 0x6C;

                                                                                                                writeBuffer = new char[44];
                                                                                                                writeBuffer[0] = 0x02; //Header ID
                                                                                                                writeBuffer[1] = func_code; //Command ID
                                                                                                                writeBuffer[2] = 0x00;
                                                                                                                writeBuffer[3] = 0x39; //Length(2)
                                                                                                                String sendstr = mTimeout; //Card 대기시간(2)
                                                                                                                Date now = new Date();
                                                                                                                String strDate = (new SimpleDateFormat("yyyyMMddHHmmss")).format(now);
                                                                                                                sendstr = sendstr + strDate; //거래일시(14)
                                                                                                                sendstr = sendstr + mMoney; //거래금액(12)
                                                                                                                sendstr = sendstr + mCatid; //TID(10)
                                                                                                                if (strDealgb.equals("0200"))
                                                                                                                    sendstr = sendstr + "0"; //거래종류(1)
                                                                                                                else
                                                                                                                    sendstr = sendstr + "1"; //LJY20230912 : 2 > 1 //거래종류(1)
                                                                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                                                                                                writeBuffer[43] = xor_sum(writeBuffer, 43);

                                                                                                                temp = new byte[44];
                                                                                                                for (int i = 0; i < 44; i++) {
                                                                                                                    temp[i] = (byte) writeBuffer[i];
                                                                                                                }

//                                                                                                				PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");
                                                                                                                usbService.write(temp);
                                                                                                            } else {
                                                                                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                                                                                                                return;
                                                                                                            }
                                                                                                            return;
                                                                                                        }                                                                                                    }
                                                                                                }
                                                                                                @Override
                                                                                                public void onFailure(Throwable throwable) {
                                                                                                    SetResultFunc(RESULT_CANCELED, -908, "카드제거 실패! : " + throwable.getMessage());
                                                                                                    return;
                                                                                                }


                                                                                            });
                                                                                        } else {
                                                                                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                                                isrun = true;


                                                                                                handlerThread = new handler_thread(handler);
                                                                                                handlerThread.start();

                                                                                                Arrays.fill(RECVBuf, (char) 0x00);
                                                                                                Arrays.fill(encdata, (char) 0x00);
                                                                                                Arrays.fill(icdata, (char) 0x00);

                                                                                                initSerial();

                                                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 카드리딩 요청입니다.");
                                                                                                func_code = 0x6C;

                                                                                                writeBuffer = new char[44];
                                                                                                writeBuffer[0] = 0x02; //Header ID
                                                                                                writeBuffer[1] = func_code; //Command ID
                                                                                                writeBuffer[2] = 0x00;
                                                                                                writeBuffer[3] = 0x39; //Length(2)
                                                                                                String sendstr = mTimeout; //Card 대기시간(2)
                                                                                                Date now = new Date();
                                                                                                String strDate = (new SimpleDateFormat("yyyyMMddHHmmss")).format(now);
                                                                                                sendstr = sendstr + strDate; //거래일시(14)
                                                                                                sendstr = sendstr + mMoney; //거래금액(12)
                                                                                                sendstr = sendstr + mCatid; //TID(10)
                                                                                                if (strDealgb.equals("0200"))
                                                                                                    sendstr = sendstr + "0"; //거래종류(1)
                                                                                                else
                                                                                                    sendstr = sendstr + "1"; //LJY20230912 : 2 > 1 //거래종류(1)
                                                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                                                                                writeBuffer[43] = xor_sum(writeBuffer, 43);

                                                                                                temp = new byte[44];
                                                                                                for (int i = 0; i < 44; i++) {
                                                                                                    temp[i] = (byte) writeBuffer[i];
                                                                                                }
//                                                                                                PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");
                                                                                                usbService.write(temp);
                                                                                            } else {
                                                                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                                                                                                return;
                                                                                            }
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                    @Override
                                                                                    public void onFailure(Throwable throwable) {
                                                                                        SetResultFunc(RESULT_CANCELED, -906, "POWERON 실패! : " + throwable.getMessage());
                                                                                        return ;
                                                                                    }
                                                                                });
                                                                            } else {
                                                                                if (usbService != null) { // if UsbService was correctly binded, Send data
                                                                                    isrun = true;

                                                                                    handlerThread = new handler_thread(handler);
                                                                                    handlerThread.start();

                                                                                    Arrays.fill(RECVBuf, (char) 0x00);
                                                                                    Arrays.fill(encdata, (char) 0x00);
                                                                                    Arrays.fill(icdata, (char) 0x00);

                                                                                    initSerial();

                                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 카드리딩 요청입니다.");
                                                                                    func_code = 0x6C;

                                                                                    writeBuffer = new char[44];
                                                                                    writeBuffer[0] = 0x02; //Header ID
                                                                                    writeBuffer[1] = func_code; //Command ID
                                                                                    writeBuffer[2] = 0x00;
                                                                                    writeBuffer[3] = 0x39; //Length(2)
                                                                                    String sendstr = mTimeout; //Card 대기시간(2)
                                                                                    Date now = new Date();
                                                                                    String strDate = (new SimpleDateFormat("yyyyMMddHHmmss")).format(now);
                                                                                    sendstr = sendstr + strDate; //거래일시(14)
                                                                                    sendstr = sendstr + mMoney; //거래금액(12)
                                                                                    sendstr = sendstr + mCatid; //TID(10)
                                                                                    if (strDealgb.equals("0200"))
                                                                                        sendstr = sendstr + "0"; //거래종류(1)
                                                                                    else
                                                                                        sendstr = sendstr + "1"; //LJY20230912 : 2 > 1 //거래종류(1)
                                                                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                                                                    writeBuffer[43] = xor_sum(writeBuffer, 43);

                                                                                    temp = new byte[44];
                                                                                    for (int i = 0; i < 44; i++) {
                                                                                        temp[i] = (byte) writeBuffer[i];
                                                                                    }
//                                                                                                PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");
                                                                                    usbService.write(temp);
                                                                                } else {
                                                                                    SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                                                                                    return;
                                                                                }
                                                                                return;
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                @Override
                                                                public void onFailure(Throwable throwable) {
                                                                    SetResultFunc(RESULT_CANCELED, -902, "MS 클리어 실패! : " + throwable.getMessage());
                                                                    return ;
                                                                }
                                                            });
                                                        }
                                                        else
                                                        if ((mSharedManager.getPreferences().getInt("Readertype", 0) == 3) && (isrun == false)) //POSBANK
                                                        {
                                                            isrun = true;

                                                            Arrays.fill(RECVBuf, (char) 0x00);
                                                            Arrays.fill(encdata, (char) 0x00);
                                                            Arrays.fill(icdata, (char) 0x00);

                                                            initSerial();

                                                            if (strWcc.equals("F")) //FALLBACK 요청
                                                            {
                                                                try {
                                                                    Thread.sleep(500);
                                                                } catch (InterruptedException e) {
                                                                    e.printStackTrace();
                                                                }
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 카드리딩 요청입니다.");
                                                                func_code = 0x6E;

                                                                scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                                                                // Serial Port Check
                                                                int readState = scr.checkSerialPortOpened();
                                                                if (readState != RTN_COMM_OK) {
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                                                    Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                                                    SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                                                    return;
                                                                }

                                                                scr.clearTxBuffer();

                                                                writeBuffer = new char[7];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = func_code; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x02; //Length(2)
                                                                String sendstr = mTimeout; //Card 대기시간(2)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                                                                writeBuffer[6] = xor_sum(writeBuffer, 6);

                                                                temp = new byte[7];
                                                                for (int i = 0; i < 7; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                scr.sendMsg(temp, temp.length);
                                                                PopupOpenEOT(MainActivity.this, "FALLBACK 카드리딩 해주세요.");

                                                                scr.clearRxBuffer();
                                                                handlerThread = new handler_thread(handler);
                                                                handlerThread.start();
                                                            } else {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 카드리딩 요청입니다.");
                                                                func_code = 0x6C;

                                                                scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                                                                // Serial Port Check
                                                                int readState = scr.checkSerialPortOpened();
                                                                if (readState != RTN_COMM_OK) {
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                                                    Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                                                    SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                                                    return;
                                                                }

                                                                scr.clearTxBuffer();

                                                                writeBuffer = new char[44];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = func_code; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x39; //Length(2)
                                                                String sendstr = mTimeout; //Card 대기시간(2)
                                                                Date now = new Date();
                                                                String strDate = (new SimpleDateFormat("yyyyMMddHHmmss")).format(now);
                                                                sendstr = sendstr + strDate; //거래일시(14)
                                                                sendstr = sendstr + mMoney; //거래금액(12)
                                                                sendstr = sendstr + mCatid; //TID(10)
                                                                if (strDealgb.equals("0200"))
                                                                    sendstr = sendstr + "0"; //거래종류(1)
                                                                else
                                                                    sendstr = sendstr + "1"; //LJY20230912 : 2 > 1 //거래종류(1)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                                                writeBuffer[43] = xor_sum(writeBuffer, 43);

                                                                temp = new byte[44];
                                                                for (int i = 0; i < 44; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                scr.sendMsg(temp, temp.length);
                                                                PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");

                                                                scr.clearRxBuffer();
                                                                handlerThread = new handler_thread(handler);
                                                                handlerThread.start();
                                                            }
                                                        } else if ((mSharedManager.getPreferences().getInt("Readertype", 0) == 2) && (isrun == false)) //OKPOS
                                                        {
                                                            mUart = new libUart();
                                                            isrun = true;

                                                            Arrays.fill(RECVBuf, (char) 0x00);
                                                            Arrays.fill(encdata, (char) 0x00);
                                                            Arrays.fill(icdata, (char) 0x00);

                                                            initSerial();

                                                            if (strWcc.equals("F")) //FALLBACK 요청
                                                            {
                                                                try {
                                                                    Thread.sleep(500);
                                                                } catch (InterruptedException e) {
                                                                    e.printStackTrace();
                                                                }
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 카드리딩 요청입니다.");
                                                                func_code = 0x6E;

                                                                writeBuffer = new char[7];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = func_code; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x02; //Length(2)
                                                                String sendstr = mTimeout; //Card 대기시간(2)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                                                                writeBuffer[6] = xor_sum(writeBuffer, 6);

                                                                temp = new byte[7];
                                                                for (int i = 0; i < 7; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                PopupOpenEOT(MainActivity.this, "FALLBACK 카드리딩 해주세요.");
                                                            } else {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 카드리딩 요청입니다.");
                                                                func_code = 0x6C;

                                                                writeBuffer = new char[44];
                                                                writeBuffer[0] = 0x02; //Header ID
                                                                writeBuffer[1] = func_code; //Command ID
                                                                writeBuffer[2] = 0x00;
                                                                writeBuffer[3] = 0x39; //Length(2)
                                                                String sendstr = mTimeout; //Card 대기시간(2)
                                                                Date now = new Date();
                                                                String strDate = (new SimpleDateFormat("yyyyMMddHHmmss")).format(now);
                                                                sendstr = sendstr + strDate; //거래일시(14)
                                                                sendstr = sendstr + mMoney; //거래금액(12)
                                                                sendstr = sendstr + mCatid; //TID(10)
                                                                if (strDealgb.equals("0200"))
                                                                    sendstr = sendstr + "0"; //거래종류(1)
                                                                else
                                                                    sendstr = sendstr + "1"; //LJY20230912 : 2 > 1 //거래종류(1)
                                                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                                                writeBuffer[43] = xor_sum(writeBuffer, 43);

                                                                temp = new byte[44];
                                                                for (int i = 0; i < 44; i++) {
                                                                    temp[i] = (byte) writeBuffer[i];
                                                                }
                                                                PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");
                                                            }

                                                            //LJY20201217 : 포트번호/통신속도 가변
                                                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                                                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                                                            }
                                                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                                                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                                                            handlerThread = new handler_thread(handler);
                                                            handlerThread.start();
                                                        } else {
                                                            if ((usbService != null) && (isrun == false)) { // if UsbService was correctly binded, Send data
                                                                isrun = true;

                                                                handlerThread = new handler_thread(handler);
                                                                handlerThread.start();

                                                                Arrays.fill(RECVBuf, (char) 0x00);
                                                                Arrays.fill(encdata, (char) 0x00);
                                                                Arrays.fill(icdata, (char) 0x00);

                                                                initSerial();

                                                                if (strWcc.equals("F")) //FALLBACK 요청
                                                                {
                                                                    try {
                                                                        Thread.sleep(500);
                                                                    } catch (InterruptedException e) {
                                                                        e.printStackTrace();
                                                                    }
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 카드리딩 요청입니다.");
                                                                    func_code = 0x6E;

                                                                    writeBuffer = new char[7];
                                                                    writeBuffer[0] = 0x02; //Header ID
                                                                    writeBuffer[1] = func_code; //Command ID
                                                                    writeBuffer[2] = 0x00;
                                                                    writeBuffer[3] = 0x02; //Length(2)
                                                                    String sendstr = mTimeout; //Card 대기시간(2)
                                                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                                                                    writeBuffer[6] = xor_sum(writeBuffer, 6);

                                                                    temp = new byte[7];
                                                                    for (int i = 0; i < 7; i++) {
                                                                        temp[i] = (byte) writeBuffer[i];
                                                                    }
                                                                    PopupOpenEOT(MainActivity.this, "FALLBACK 카드리딩 해주세요.");
                                                                    usbService.write(temp);
                                                                } else {
                                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 카드리딩 요청입니다.");

                                                                    try {
                                                                        Thread.sleep(500);
                                                                    } catch (InterruptedException e) {
                                                                        e.printStackTrace();
                                                                    }

                                                                    func_code = 0x6C;

                                                                    writeBuffer = new char[44];
                                                                    writeBuffer[0] = 0x02; //Header ID
                                                                    writeBuffer[1] = func_code; //Command ID
                                                                    writeBuffer[2] = 0x00;
                                                                    writeBuffer[3] = 0x39; //Length(2)
                                                                    String sendstr = mTimeout; //Card 대기시간(2)
                                                                    Date now = new Date();
                                                                    String strDate = (new SimpleDateFormat("yyyyMMddHHmmss")).format(now);
                                                                    sendstr = sendstr + strDate; //거래일시(14)
                                                                    sendstr = sendstr + mMoney; //거래금액(12)
                                                                    sendstr = sendstr + mCatid; //TID(10)
                                                                    if (strDealgb.equals("0200"))
                                                                        sendstr = sendstr + "0"; //거래종류(1)
                                                                    else
                                                                        sendstr = sendstr + "1"; //LJY20230912 : 2 > 1 //거래종류(1)
                                                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                                                    writeBuffer[43] = xor_sum(writeBuffer, 43);

                                                                    temp = new byte[44];
                                                                    for (int i = 0; i < 44; i++) {
                                                                        temp[i] = (byte) writeBuffer[i];
                                                                    }
                                                                    PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");

                                                                    try {
                                                                        Thread.sleep(500);
                                                                    } catch (InterruptedException e) {
                                                                        e.printStackTrace();
                                                                    }

                                                                    usbService.write(temp);
                                                                }
                                                            } else {
                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                                                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                    //LJY20220427 : 재시작 로직 추가
//                                    mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                    Context currentActivity = getApplication();
//                                    Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                    Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                    currentActivity.startActivity(restartIntent);
//                                    System.exit(0);

                                                                return;
                                                            }
                                                        }
                                                    }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -11:전문 포멧 오류");
                                Toast.makeText(MainActivity.this, "-11:전문 포멧 오류", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -11, "전문 포멧 오류");
                                return;
                            }
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -10:요청 전문 없음");
                            Toast.makeText(MainActivity.this, "-10:요청 전문 없음", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -10, "요청 전문 없음");
                            return;
                        }
                    }
        } else {
            initViews();
            mLayoutMainContainer.setBackgroundColor(Color.BLACK);
            //LJY20220427 : NVCAT 재시작시 팝업만 보이도록 로직 수정
//            LinearLayout mllmain = (LinearLayout) findViewById(R.id.llmain);
//            if(mSharedManager.getPreferences().getBoolean("MainVisible", true)) {

            if(mSharedManager.getPreferences().getBoolean("bRESTART", false)) { //LJY20231006 : RESTART 호출 시 INVISIBLE
                mLayoutMainContainer.setVisibility(View.INVISIBLE);
            } else
            if (mSharedManager.getPreferences().getInt("MainVisibleInt", 1) == 1 /*|| (mSharedManager.getPreferences().getInt("MainVisibleInt", 1) == 2 && mSharedManager.getPreferences().getString("Catid", "").length() != 10)*/) { //LJY20220913 : INT형으로 변경

//                mllmain.setVisibility(View.VISIBLE);
                mLayoutMainContainer.setVisibility(View.VISIBLE);
//                mLayoutMainContainer.setBackgroundColor(Color.BLACK);
//                SharedManager.LogDebug(bLogUse, "debugjy", "MainVisible = true");
            } else {
//                mllmain.setVisibility(View.INVISIBLE);
                mLayoutMainContainer.setVisibility(View.INVISIBLE);
//                mLayoutMainContainer.setBackgroundColor(Color.TRANSPARENT);
//                SharedManager.LogDebug(bLogUse, "debugjy", "MainVisible = false");
            }
//            mSharedManager.getPreferences().edit().putBoolean("MainVisible", true).commit();
//            mSharedManager.getPreferences().edit().putInt("MainVisibleInt", 2).commit(); //LJY20220913 : INT 형으로 변경

            if (bRooting) {
                dialog = new Dialog(MainActivity.this);
                dialog.setContentView(R.layout.activity_popup_dialog);
                dialog.setCancelable(false);
                dialog.getWindow().getDecorView().setBackgroundResource(R.drawable.bg_dialog);
                ((TextView) dialog.findViewById(R.id.tvpopup)).setText("루팅된장비입니다.");
                ((ImageView) dialog.findViewById(R.id.iv_card)).setVisibility(View.GONE);
                ((TextView) dialog.findViewById(R.id.tv_guide_dock_card)).setVisibility(View.GONE);
                ((TextView) dialog.findViewById(R.id.tv_guide_payment)).setVisibility(View.GONE);
                ((TextView) dialog.findViewById(R.id.tv_guide_auto_cancel)).setVisibility(View.GONE);
                ((Button) dialog.findViewById(R.id.btrooting)).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //앱 권한 없을시 앱 종료
                        moveTaskToBack(true);
                        finish();
                        android.os.Process.killProcess(android.os.Process.myPid());
                        return;
                    }
                });
                dialog.show();
            }
        }
    }

    private int SendSplit(String senddata) {
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] POS -> NVCAT SendData 확인 Start!");
        char fs = 0x1C;
        boolean bFsChk = false;

        int i = 0, j = 0, k = 0;
        for (i = 0; i < senddata.length(); i++) {
            if (senddata.substring(i, i + 1).equals(String.valueOf(fs))) {
                k++;

                switch (k) {
                    case 1: //거래구분
                        strDealgb = senddata.substring(j, i);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 거래구분 : [" + strDealgb + "]");
                        j = i + 1;
                        if (strDealgb.length() != 4) return -2;
                        break;
                    case 2: //거래유형
                        strDealtp = senddata.substring(j, i);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 거래유형 : [" + strDealtp + "]");
                        j = i + 1;
                        if (strDealtp.length() != 2) return -2;
                        break;
                    case 3: //WCC
                        if (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) //20200313 : 현금IC
                        {
                            strWcc = senddata.substring(j, i);
                            j = i + 1;
                        } else {
                            strWcc = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] WCC : [" + strWcc + "]");
                            j = i + 1;
                            if (strWcc.length() != 1) return -2;
                        }
                        break;
                    case 4: //거래금액
                        if (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) //20200313 : 현금IC
                        {
                            strMoney = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 거래금액 : [" + strMoney + "]");
                            j = i + 1;
                            if (strMoney.length() > 9 || strMoney.length() == 0) return -2;
                        } else if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
                        {
                            strMoney = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 수표종류 : [" + strMoney + "]");
                            j = i + 1;
                            if (strMoney.length() != 2) return -2;
                        } else {
                            strMoney = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 거래금액 : [" + strMoney + "]");
                            j = i + 1;
                            if (strMoney.length() > 12 || strMoney.length() == 0) return -2;
                        }
                        break;
                    case 5: //20200131 : 멤버쉽거래 //부가세
                        if (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) //20200313 : 현금IC
                        {
                            strTax = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 부가세 : [" + strTax + "]");
                            j = i + 1;
                            if (strTax.length() > 9) return -2;
                        } else if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
                        {
                            strTax = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 수표권종 : [" + strTax + "]");
                            j = i + 1;
                            if (strTax.length() != 2) return -2;
                        } else if (strDealgb.equals("0320") || strDealgb.equals("0540")) //적립구분(2)
                        {
                            strTax = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 적립구분 : [" + strTax + "]");
                            j = i + 1;
                            if (strTax.length() != 2) return -2;
                        } else {
                            strTax = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 부가세 : [" + strTax + "]");
                            j = i + 1;
                            if (strTax.length() > 12) return -2;
                        }
                        break;
                    case 6: //20200131 : 멤버쉽거래 //봉사료
                        if (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) //20200313 : 현금IC
                        {
                            strBongsa = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 봉사료 : [" + strBongsa + "]");
                            j = i + 1;
                            if (strBongsa.length() > 9) return -2;
                        } else if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
                        {
                            strBongsa = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 수표번호 : [" + strBongsa + "]");
                            j = i + 1;
                            if (strBongsa.length() != 14) return -2;
                        } else if (strDealgb.equals("0320") || strDealgb.equals("0540")) //포인트구분(2)
                        {
                            strBongsa = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 포인트구분 : [" + strBongsa + "]");
                            j = i + 1;
                            if (strBongsa.length() != 2) return -2;
                        } else {
                            strBongsa = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 봉사료 : [" + strBongsa + "]");
                            j = i + 1;
                            if (strBongsa.length() > 12) return -2;
                        }
                        break;
                    case 7: //20200131 : 멤버쉽거래 //할부
                        if (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) //20200313 : 현금IC
                        {
                            strHalbu = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 결재구분 : [" + strHalbu + "]");
                            j = i + 1;
                            if (strHalbu.length() != 2) return -2;
                        } else if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
                        {
                            strHalbu = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 발행일 : [" + strHalbu + "]");
                            j = i + 1;
                            if (strHalbu.length() != 6) return -2;
                        } else if (strDealgb.equals("0320") || strDealgb.equals("0540")) //비밀번호(16)
                        {
                            strHalbu = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 비밀번호 : [" + strHalbu + "]");
                            j = i + 1;
                            if (strHalbu.length() > 16) return -2;
                        } else {
                            strHalbu = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 할부 : [" + strHalbu + "]");
                            j = i + 1;
                            if (strHalbu.length() != 2) return -2;
                        }
                        break;
                    case 8: //승인번호
                        if (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) //20200313 : 현금IC
                        {
                            strAgreenum = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 승인번호 : [" + strAgreenum + "]");
                            j = i + 1;
                            if (strAgreenum.length() > 0 && strAgreenum.length() > 9) return -2;
                        } else if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
                        {
                            strAgreenum = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 주민등록번호 : [" + strAgreenum + "]");
                            j = i + 1;
                            if (strAgreenum.length() != 13) return -2;
                        } else {
                            strAgreenum = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 승인번호 : [" + strAgreenum + "]");
                            j = i + 1;
                            //LJY20200825 : PAYPRO통합전문
                            if (strAgreenum.length() == 20) {

                            } else if (strAgreenum.length() > 0 && strAgreenum.length() > 12)
                                return -2;
                        }
                        break;
                    case 9: //원거래일자
                        if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
                        {
                            strAgreedate = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 수표금액 : [" + strAgreedate + "]");
                            j = i + 1;
                            if (strAgreedate.length() != 9) return -2;
                        } else {
                            strAgreedate = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 원거래일자 : [" + strAgreedate + "]");
                            j = i + 1;
                            if (strAgreedate.length() > 0 && strAgreedate.length() != 6) return -2;
                        }
                        break;
                    case 10: //승인CATID
                        if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
                        {
                            strApprtid = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 계좌일련번호 : [" + strApprtid + "]");
                            j = i + 1;
                            if (strApprtid.length() != 6) return -2;
                        } else {
                            strApprtid = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 승인CATID : [" + strApprtid + "]");
                            j = i + 1;
                            if (strApprtid.length() > 0 && strApprtid.length() != 10) return -2;
                        }
                        break;
                    case 11: //베이스통화코드(숫자)
                        if (strDealtp.equals("DC")) { //20200311 : DCC
                            strDcc1 = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 베이스통화코드(숫자) : [" + strDcc1 + "]");
                            j = i + 1;
                            if (strDcc1.length() != 3) return -2;
                        } else {
                            strSend11 = senddata.substring(j, i);
                            j = i + 1;
                        }
                        break;
                    case 12: //베이스거래금액
                        if (strDealtp.equals("DC")) { //20200311 : DCC
                            strDcc2 = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 베이스거래금액 : [" + strDcc2 + "]");
                            j = i + 1;
                            if (strDcc2.length() > 14) return -2;
                        } else {
                            strSend12 = senddata.substring(j, i);
                            j = i + 1;
                        }
                        break;
                    case 13: //현금영수증식별번호 ////베이스거래금액소수점
                        strCashnum = senddata.substring(j, i);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금영수증식별번호 : [" + strCashnum + "]");
                        j = i + 1;
                        if (strDealtp.equals("DC")) { //20200311 : DCC
                            strDcc3 = strCashnum;
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 베이스거래금액소수점 : [" + strDcc3 + "]");
                            if (strDcc3.length() != 1) return -2;
                        } else if ((strDealgb.equals("0300") || strDealgb.equals("0520") || strDealgb.equals("0320") || strDealgb.equals("0540")) && (strWcc.equals("P") || strWcc.equals("L"))) //LJY20200825 : PAYPRO 통합전문
                        {
                            //LJY20200825 : PAYPRO통합전문
                            if (strDealgb.equals("0520") && strAgreenum.length() == 20 && (strCashnum.length() > 16 && strCashnum.length() < 25) && (Integer.parseInt(strCashnum.substring(0, 2)) > 19 && Integer.parseInt(strCashnum.substring(0, 2)) < 34)) {
                                break;
                            }
                            if (strDealgb.equals("0520") && strAgreenum.length() == 20 && (strCashnum.length() > 15 && strCashnum.length() < 22) && (Integer.parseInt(strCashnum.substring(0, 2)) > 9 && Integer.parseInt(strCashnum.substring(0, 2)) < 16)) {
                                break;
                            }
                            if ((strDealgb.equals("0300") || strDealgb.equals("0520")) && strCashnum.length() >= 100 && strCashnum.substring(0, 7).equals("hQVDUFY")) //LJY20200825 : PAYPRO통합전문
                            {
                                break;
                            }
                            if (strDealtp.equals("21")) return -2;
                            if (strCashnum.length() > 37) return -2;
                        } else if ((strDealgb.equals("0420") || strDealgb.equals("0520")) && strDealtp.equals("10") && strWcc.equals("N")) {
                            if (strCashnum.length() != 20) return -2;
                        } else {
                            if (strCashnum.length() > 0 && strCashnum.length() > 13) return -2;
                        }
                        break;
                    case 14:
                        strMyunse = senddata.substring(j, i);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 면세금액 : [" + strMyunse + "]");
                        j = i + 1;
                        if (strMyunse.length() > 9) return -2;
                        break;
                    case 15:
                        strSend15 = senddata.substring(j, i);
                        j = i + 1;
                        break;
                    case 16:
                        strSend16 = senddata.substring(j, i);
                        j = i + 1;
                        break;
                    case 17: //전문관리번호
                        strTxtnum = senddata.substring(j, i);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 전문관리번호 : [" + strTxtnum + "]");
                        j = i + 1;
                        if (strTxtnum.length() > 0 && strTxtnum.length() != 20) return -2;
                        break;
                    case 18: //Filler
                        strFiller = senddata.substring(j, i);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] Filler : [" + strFiller + "]");
                        j = i + 1;
                        if (strFiller.length() > 31) return -2;
                        break;
                    case 19: //OSM20231228 : 주민번호 필드 추가
                        strStoamt = senddata.substring(j, i);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 주민번호 : [" + strStoamt + "]");
                        if (strStoamt.length() > 13) return -2;
                        j = i + 1;
                        break;
                    case 20: //전문TEXT
                        strTxt = senddata.substring(j, i);
                        j = i + 1;
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 전문TEXT : [" + strTxt + "]");
                        if (strTxt.length() > 0 && strTxt.length() != 3) return -2;
                        break;
                    case 21: //기종구분
                        strDevicegb = senddata.substring(j, i);
                        j = i + 1;
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 기종구분 : [" + strDevicegb + "]");
                        if (strDevicegb.length() > 0 && strDevicegb.length() != 2) return -2;
                        break;
                    case 22: //20200131 : 멤버쉽거래 //원거래고유번호
                        if (strDealgb.equals("0320") || strDealgb.equals("0540")) //Filler2(32)
                        {
                            strUninum = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] Filler2 : [" + strUninum + "]");
                            j = i + 1;
                            if (strUninum.length() > 32) return -2;
                        } else {
                            strUninum = senddata.substring(j, i);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 원거래고유번호 : [" + strUninum + "]");
                            if (strUninum.length() > 0 && strUninum.length() > 12) return -2;
                            j = i + 1;
                        }
                        break;
                    case 23: //도메인
                        strDomain = senddata.substring(j, i);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 도메인 : [" + strDomain + "]");
                        if (strDomain.length() > 0 && strDomain.length() > 30) return -2;
                        j = i + 1;
                        break;
                    case 24: //IPADDRESS
                        strIpaddr = senddata.substring(j, i);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IPADDRESS : [" + strIpaddr + "]");
                        if (strIpaddr.length() > 0 && strIpaddr.length() > 20) return -2;
                        j = i + 1;
                        break;
                    case 25: //LJY20220427 : 전문 서명데이터 파싱 추가
                        strSigndata = senddata.substring(j, i);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] SignData : [" + strSigndata + "]");
                        if (strSigndata.length() > 0 && strSigndata.length() > 2096) return -2;
                        if (strSigndata.length() > 4) {
                            if (Integer.parseInt(strSigndata.substring(0, 4)) * 2 + 4 != strSigndata.length()) //길이 체크
                                return -2;
                        }
                        j = i + 1;
                        break;
                    case 26:
                        strSend26 = senddata.substring(j, i);
                        j = i + 1;
                        break;
                    case 27:
                        strSend27 = senddata.substring(j, i);
                        j = i + 1;
                        break;
                    case 28:
                        strSend28 = senddata.substring(j, i);
                        j = i + 1;
                        break;
                    case 29:
                        strSend29 = senddata.substring(j, i);
                        j = i + 1;
                        break;
                    case 30:
                        strSend30 = senddata.substring(j, i);
                        j = i + 1;
                        bFsChk = true; //F/S개수 체크
                        break;
                }
            }
        }

        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] POS -> NVCAT SendData 확인 Finish!");
        if (bFsChk == false)
            return -1;

        return 1;
    }

    private int CompareSharedValue() {
        mTimeout = mSharedManager.getPreferences().getString("Timeout", "30");

        mCatid = mSharedManager.getPreferences().getString("Catid", "");
        if (mCatid.length() != 10) {
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] CATID 길이가 10이 아닙니다.");
            Toast.makeText(MainActivity.this, "[NVCAT] CATID 길이가 10이 아닙니다.", Toast.LENGTH_SHORT).show();        //OSM20240702 : 오류 메시지 토스트 추가
            return -1;
        }

        if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
        {
            mMoney = strMoney;
        } else if (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) //20200317 : 현금IC
        {
            if (strMoney.length() == 0 || strMoney.length() > 9) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 금액을 입력해주세요.");
                Toast.makeText(MainActivity.this, "금액을 입력해주세요.", Toast.LENGTH_SHORT).show();                  //OSM20240702 : 오류 메시지 토스트 추가

                return -1;
            } else {
                mMoney = String.format("%09d", Long.parseLong(strMoney));
            }
        } else {
            if (strMoney.length() == 0 || strMoney.length() > 12) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 금액을 입력해주세요.");
                Toast.makeText(MainActivity.this, "금액을 입력해주세요.", Toast.LENGTH_SHORT).show();                  //OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            } else {
                mMoney = String.format("%012d", Long.parseLong(strMoney));
            }
        }

        if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
        {
            mHalbu = strHalbu;
        } else if (strDealgb.equals("0320") || strDealgb.equals("0540")) //비밀번호(16)
        {
            if (strHalbu.length() == 0) {
                mHalbu = "                ";
            } else if (strHalbu.length() > 16) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 비밀번호가 잘못 입력했습니다.");
                Toast.makeText(MainActivity.this, "비밀번호가 잘못 입력했습니다.", Toast.LENGTH_SHORT).show();         //OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            } else
                mHalbu = String.format("%-16s", strHalbu);
        } else {
            if (strHalbu.length() == 0 || strHalbu.length() > 2) {
                mHalbu = "00";
            } else {
                mHalbu = String.format("%02d", Long.parseLong(strHalbu));
            }
        }

        if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
        {
            mTax = strTax;
        } else if (strDealgb.equals("0320") || strDealgb.equals("0540")) //적립구분(2)
        {
            if (strTax.length() == 0 || strTax.length() > 2) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 적립구분이 잘못 입력했습니다.");
                Toast.makeText(MainActivity.this, "적립구분이 잘못 입력했습니다.", Toast.LENGTH_SHORT).show();         //OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            } else
                mTax = strTax;
        } else if (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) //20200317 : 현금IC
        {
            if (strTax.length() == 0) {
                mTax = "000000000";
            } else if (strTax.length() > 9) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 부가세를 잘못 입력했습니다.");
                Toast.makeText(MainActivity.this, "부가세를 잘못 입력했습니다.", Toast.LENGTH_SHORT).show();          //OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            } else {
                mTax = String.format("%09d", Long.parseLong(strTax));
            }
        } else {
            if (strTax.length() == 0) {
                mTax = "000000000000";
            } else if (strTax.length() > 12) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 부가세를 잘못 입력했습니다.");
                Toast.makeText(MainActivity.this, "부가세를 잘못 입력했습니다.", Toast.LENGTH_SHORT).show();          //OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            } else {
                mTax = String.format("%012d", Long.parseLong(strTax));
            }
        }

        if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
        {
            mBongsa = strBongsa;
        } else if (strDealgb.equals("0320") || strDealgb.equals("0540")) //포인트구분(2)
        {
            if (strBongsa.length() == 0 || strBongsa.length() > 2) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 포인트구분이 잘못 입력했습니다.");
                Toast.makeText(MainActivity.this, "포인트구분이 잘못 입력했습니다.", Toast.LENGTH_SHORT).show();      //OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            } else
                mBongsa = strBongsa;
        } else if (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) //20200317 : 현금IC
        {
            if (strBongsa.length() == 0) {
                mBongsa = "000000000";
            } else if (strBongsa.length() > 9) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 봉사료를 잘못 입력했습니다.");
                Toast.makeText(MainActivity.this, "봉사료를 잘못 입력했습니다.", Toast.LENGTH_SHORT).show();         //OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            } else {
                mBongsa = String.format("%09d", Long.parseLong(strBongsa));
            }
        } else {
            if (strBongsa.length() == 0) {
                mBongsa = "000000000000";
            } else if (strBongsa.length() > 12) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 봉사료를 잘못 입력했습니다.");
                Toast.makeText(MainActivity.this, "봉사료를 잘못 입력했습니다.", Toast.LENGTH_SHORT).show();         //OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            } else {
                mBongsa = String.format("%012d", Long.parseLong(strBongsa));
            }
        }

        mServerip = mSharedManager.getPreferences().getString("Serverip", "");
        if (mServerip.length() == 0 || mServerip.length() > 16) {
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서버 IP가 잘못 되었습니다.");
            Toast.makeText(MainActivity.this, "서버 IP가 잘못 되었습니다.", Toast.LENGTH_SHORT).show();             //OSM20240702 : 오류 메시지 토스트 추가
            return -1;
        }

        mServerport = mSharedManager.getPreferences().getString("Serverport", "");
        if (mServerport.length() == 0 || mServerport.length() > 6) {
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서버 PORT가 잘못 되었습니다.");
            Toast.makeText(MainActivity.this, "서버 PORT가 잘못 되었습니다.", Toast.LENGTH_SHORT).show();		    //OSM20240702 : 오류 메시지 토스트 추가
            return -1;
        }

        mHwnum = mSharedManager.getPreferences().getString("HWNUM", "################"); //LJY20220905 : 디폴드값 설정
        if (mHwnum.length() != 16) {
            //LJY20220316 : 무카드 취소 예외 처리
            if (((strDealgb.equals("0420") || strDealgb.equals("0520")) && strDealtp.equals("10") && strWcc.equals("N")) || ((strDealgb.equals("0420") || strDealgb.equals("0520")) && strDealtp.equals("21") && strWcc.equals("N"))) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 무카드 취소로 HW 식별번호 ################");
                mHwnum = "################";
            } else {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] HW식별번호가 잘못 되었습니다.");
                Toast.makeText(MainActivity.this, "HW식별번호가 잘못 되었습니다.", Toast.LENGTH_SHORT).show();		//OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            }
        }

        if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
        {
            mApprno = strAgreenum;
            mApprdate = strAgreedate;
        } else if (strDealgb.equals("0420") || strDealgb.equals("0520") || strDealgb.equals("0540") || (strDealgb.equals("0200") && strDealtp.equals("I2"))) { //20200318 : 현금IC //20200131 : 멤버쉽거래 //20200129 : 포인트거래
            if (strDealtp.equals("21")) {
                if (strAgreenum.length() >= 9) {
                    mApprno = strAgreenum + "   ";
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금영수증 승인번호 잘못되었습니다.");
                    Toast.makeText(MainActivity.this, "현금영수증 승인번호 잘못되었습니다.", Toast.LENGTH_SHORT).show();		//OSM20240702 : 오류 메시지 토스트 추가
                    return -1;
                }
            } else if (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) //20200318 : 현금IC
            {
                if (strAgreenum.length() == 8) {
                    mApprno = strAgreenum;
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC 승인번호 잘못되었습니다.");
                    Toast.makeText(MainActivity.this, "현금IC 승인번호 잘못되었습니다.", Toast.LENGTH_SHORT).show();		//OSM20240702 : 오류 메시지 토스트 추가
                    return -1;
                }
            } else {
                //LJY20200825 : PAYPRO 통합전문
                if (strDealgb.equals("0520") && strAgreenum.length() == 20 && (strCashnum.length() > 16 && strCashnum.length() < 25) && (Integer.parseInt(strCashnum.substring(0, 2)) > 19 && Integer.parseInt(strCashnum.substring(0, 2)) < 34)) {
                    mApprno = strAgreenum;
                } else if (strDealgb.equals("0520") && strAgreenum.length() == 20 && (strCashnum.length() > 15 && strCashnum.length() < 22) && (Integer.parseInt(strCashnum.substring(0, 2)) > 9 && Integer.parseInt(strCashnum.substring(0, 2)) < 16)) {
                    mApprno = strAgreenum;
                } else if (strDealgb.equals("0520") && strCashnum.length() == 24 && strCashnum.substring(0, 6).equals("800088")) {
                    mApprno = strAgreenum;
                } else if (strAgreenum.length() >= 8) {
                    mApprno = strAgreenum + "    ";
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 신용/은련 승인번호 잘못되었습니다.");
                    Toast.makeText(MainActivity.this, "신용/은련 승인번호 잘못되었습니다.", Toast.LENGTH_SHORT).show();		//OSM20240702 : 오류 메시지 토스트 추가
                    return -1;
                }
            }

            if (strAgreedate.length() >= 6) {
                mApprdate = strAgreedate;
            } else {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 승인날짜 잘못되었습니다.");
                Toast.makeText(MainActivity.this, "승인날짜 잘못되었습니다.", Toast.LENGTH_SHORT).show();		//OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            }
        }

        if (strDealgb.equals("0200") && strDealtp.equals("20")) //20200214 : 수표조회거래
        {
            mApprtid = strApprtid;
        } else if (strApprtid.length() != 0)
            mApprtid = "DU02" + strApprtid + "                ";
        else mApprtid = "                              ";

        if (strMyunse.length() != 0) {
            if (strDealtp.equals("21"))
                mMyunse = "TFA" + String.format("%09d", Long.parseLong(strMyunse)) + "        ";
            else
                mMyunse = "TAX" + String.format("%09d", Long.parseLong(strMyunse)) + "        ";
        } else mMyunse = "                    ";

        if (strDealgb.equals("0200") && strDealtp.equals("DC")) //20200312 : DCC개발
        {
            mDcc1 = strDcc1;
            mDcc2 = String.format("%014d", Long.parseLong(strDcc2));
            mDcc3 = strDcc3;
        }

        Date now = new Date();
        String strDate = new SimpleDateFormat("MMddHHmmss").format(now);
        if (strTxtnum.length() != 0) mTxtnum = strTxtnum;
        else mTxtnum = mCatid + strDate;

        if (strTxt.length() != 0) mTxt = strTxt;
        else {
            if (strDealtp.equals("UP")) mTxt = "CUP";
            else if (strDealtp.equals("DC")) mTxt = "DCC"; //20200312 : DCC개발
            else mTxt = "HPS";
        }

        if (strDevicegb.length() != 0) mDevicegb = strDevicegb;
        else mDevicegb = "H1";

        if (mSharedManager.getPreferences().getString("READERSN", "          ").length() == 0) { //LJY20220905 : 디폴트값 설정
            //LJY20220316 : 무카드 취소 예외 처리
            if (((strDealgb.equals("0420") || strDealgb.equals("0520")) && strDealtp.equals("10") && strWcc.equals("N")) || ((strDealgb.equals("0420") || strDealgb.equals("0520")) && strDealtp.equals("21") && strWcc.equals("N"))) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 무카드 취소로 리더기 시리얼번호 Space(10)");
                mSharedManager.getPreferences().edit().putString("READERSN", "          ").commit();
            } else {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 시리얼번호 길이가 0 입니다.");
                Toast.makeText(MainActivity.this, "리더기 시리얼번호 길이가 0 입니다.", Toast.LENGTH_SHORT).show();		//OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            }
        }

        String space = "                                                                                                                                                      ";
        //mFiller = "NVC" + mSharedManager.getPreferences().getString("READERSN", "          ") + SharedManager.ROMVER + strFiller + space.substring(0, 31 - strFiller.length());
        //LJY20220816 : READERSN 예외 처리
        String sReaderSn = mSharedManager.getPreferences().getString("READERSN", "          ");
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] READERSN : " + sReaderSn);
        if (sReaderSn.length() != 10) {
            mFiller = "NVC" + "          " + SharedManager.ROMVER + "                               ";
        } else
            mFiller = "NVC" + mSharedManager.getPreferences().getString("READERSN", "          ") + SharedManager.ROMVER + strFiller + space.substring(0, 31 - strFiller.length()); //20200318 : 리더기일련번호

        if (strDealgb.equals("0320") || strDealgb.equals("0540")) //Filler2(32)
        {
            if (strUninum.length() == 0) {
                mUninum = "                                ";
            } else if (strUninum.length() > 32) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] Filler2가 잘못 입력했습니다.");
                Toast.makeText(MainActivity.this, "Filler2가 잘못 입력했습니다.", Toast.LENGTH_SHORT).show();		//OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            } else {
                if (mApprtid.substring(0, 4).equals("DU02"))
                    mUninum = mApprtid + "  ";
                else
                    mUninum = String.format("%-32s", strUninum);
            }
        } else {
            if (strUninum.length() == 0) {
                mUninum = "            ";
            } else if (strUninum.length() > 12) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 원거래고유번호 잘못 입력했습니다.");
                Toast.makeText(MainActivity.this, "원거래고유번호 잘못 입력했습니다.", Toast.LENGTH_SHORT).show();		//OSM20240702 : 오류 메시지 토스트 추가
                return -1;
            } else {
                mUninum = String.format("%-12s", strUninum);
            }
        }
        return 1;
    }

    private void initViews() {
        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectNetwork().penaltyLog().build()); //인터넷연결 관련 쓰레드 정책 추가
        //LJY20201217 : NVCAT 종료 중에도 호출 되도록 로직 변경
//        dbHelper = new DBHelper(this, "ANDROIDNVCAT.db", null, 1); //"ANDROIDNVCAT.db" 위치에 DB 저장
        mHandler = new MyHandler(this); //MyHandler 생성자 - 시리얼통신 데이터 체크

        vp = (CustomViewPager) findViewById(R.id.vp);
        one = (Button) findViewById(R.id.one);
        two = (Button) findViewById(R.id.two);
        three = (Button) findViewById(R.id.three);
        four = (Button) findViewById(R.id.four);
        five = (Button) findViewById(R.id.five);

        vp.setAdapter(new pagerAdapter(getSupportFragmentManager())); //Viewpager와 FragmentAdapter 연결
        vp.setCurrentItem(0); //처음에 환경설정 탭
        vp.setSwipeEnabled(false); //ViewPager 스와이프 방지

        //환경설정 탭
        one.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                vp.setCurrentItem(0);
            }
        });
        one.setTag(0);

        //신용결제 탭
        two.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                vp.setCurrentItem(1);
            }
        });
        two.setTag(1);

        //현금결제 탭
        three.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                vp.setCurrentItem(2);
            }
        });
        three.setTag(2);

        //무결성점검 내역 탭
        four.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                vp.setCurrentItem(3);
            }
        });
        four.setTag(3);

        //승인 내역 탭
        five.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                vp.setCurrentItem(4);
            }
        });
        five.setTag(4);

        //LJY20220427 : OKPOS 개발시에만 잠시 제거한 내용 해제
        if (AppCheck.CheckAppSign(getApplicationContext()) == false && bRelease) { //LJY20220707 : 릴리즈용만 위변조 체크 //앱서명위변조된경우
            bApkchk = true;
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 위변조된 앱입니다.");
            Toast.makeText(getApplicationContext(), "위변조된 앱입니다.", Toast.LENGTH_SHORT).show();

            dialog = new Dialog(MainActivity.this);
//            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
            dialog.setContentView(R.layout.activity_popup_dialog);
            dialog.setCancelable(false);
//            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
            dialog.getWindow().getDecorView().setBackgroundResource(R.drawable.bg_dialog);
            ((TextView) dialog.findViewById(R.id.tvpopup)).setText("위변조된 앱입니다.");
            ((ImageView) dialog.findViewById(R.id.iv_card)).setVisibility(View.GONE);
            ((TextView) dialog.findViewById(R.id.tv_guide_dock_card)).setVisibility(View.GONE);
            ((TextView) dialog.findViewById(R.id.tv_guide_payment)).setVisibility(View.GONE);
            ((TextView) dialog.findViewById(R.id.tv_guide_auto_cancel)).setVisibility(View.GONE);
            ((Button) dialog.findViewById(R.id.btrooting)).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    //앱 권한 없을시 앱 종료
                    moveTaskToBack(true);
                    finish();
                    android.os.Process.killProcess(android.os.Process.myPid());
                    return;
                }
            });
            dialog.show();
            return;
        }
    }

    private class pagerAdapter extends FragmentStatePagerAdapter {
        public pagerAdapter(android.support.v4.app.FragmentManager fm) {
            super(fm);
        }

        @Override
        public android.support.v4.app.Fragment getItem(int position) {
            switch (position) {
                case 0:
                    return new OneFragment();
                case 1:
                    return new TwoFragment();
                case 2:
                    return new ThreeFragment();
                case 3:
                    return new FourFragment();
                case 4:
                    return new FiveFragment();
                default:
                    return new OneFragment();
            }
        }

        @Override
        public int getCount() {
            return 5;
        }
    }

    @Override
    protected void onStart() {
        super.onStart();

        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] onStart");

        //if(mSharedManager.getPreferences().getBoolean("Printeruse", false) && mSharedManager.getPreferences().getInt("Printertype", 0) == 0) { //LJY20230726
        if (mSharedManager.getPreferences().getBoolean("Bluetoothuse", false)) { //LJY20230726
            if (!isBleEnabled()) { //블루투스 비활성화 시 활성화 요청
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] !isBleEnabled");
                enableBle();
            }

            requestRequiredPermissions(); //권한요청
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 0 || mSharedManager.getPreferences().getInt("Readertype", 0) == 1 || mSharedManager.getPreferences().getInt("Readertype", 0) == 4 || mSharedManager.getPreferences().getInt("Readertype", 0) == 5) //LJY20230911 : TITENG 리더기 추가 //LJY20220816 : 조은소프트웨어 추가 //OKPOS
        {
            setFilters();  // Start listening notifications from UsbService
            startService(UsbService.class, usbConnection, null); // Start UsbService(if it was not started before) and Bind i'
        }
    }

    @Override
    public void onPause() {
        super.onPause();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        if (mIsRegisteredUSB) {
            unregisterReceiver(mUsbReceiver);
            unbindService(usbConnection);
        }

        System.gc(); //가비지 컬렉션
        //Runtime.getRuntime().gc();
    }

    private void startService(Class<?> service, ServiceConnection serviceConnection, Bundle extras) {
        if (!UsbService.SERVICE_CONNECTED) {
            Intent startService = new Intent(MainActivity.this, service);
            startService(startService);
        }
        Intent bindingIntent = new Intent(MainActivity.this, service);
        bindService(bindingIntent, serviceConnection, Context.BIND_AUTO_CREATE);
    }

    private void setFilters() {
        mIsRegisteredUSB = true;
        IntentFilter filter = new IntentFilter();
        filter.addAction(UsbService.ACTION_USB_PERMISSION_GRANTED);
        filter.addAction(UsbService.ACTION_NO_USB);
        filter.addAction(UsbService.ACTION_USB_DISCONNECTED);
        filter.addAction(UsbService.ACTION_USB_NOT_SUPPORTED);
        filter.addAction(UsbService.ACTION_USB_PERMISSION_NOT_GRANTED);
        registerReceiver(mUsbReceiver, filter);
    }

    private static class MyHandler extends Handler {
        private final WeakReference<MainActivity> mActivity;

        public MyHandler(MainActivity activity) {
            mActivity = new WeakReference<>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case UsbService.MESSAGE_FROM_SERIAL_PORT:
                    handlertemp = (byte[]) (msg.obj); //SERIAL RECV DATA

                    if (!bRelease) SharedManager.LogBinHex("Serial RData", handlertemp); //LJY20230911 : 로그 추가

                    for (int i = 0; i < handlertemp.length; i++) {
                        if (istep == 0 && handlertemp[i] == 0x06) //ACK수신
                        {
                            slen = 0;
                            istep = 0;
                        } else if (istep == 0 && handlertemp[i] == 0x04) //EOT수신
                        {
                            slen = 0;
                            RECVBuf[slen++] = (char) handlertemp[i];

                            istep = 0;
                            status = 1;
                        }
                        //LJY20220520 : 서명시 좌표 정리
                        else if (istep == 0 && isSign && handlertemp[i] == 0x0F) //좌표시작
                        {
                            slen = 0;
                            istep = 10;
                        } else if (istep == 10 && slen < 2 && isSign) //좌표입력
                        {
                            RECVBuf[slen++] = (char) handlertemp[i];
                            istep = 10;
                        } else if (istep == 10 && slen == 2 && isSign && handlertemp[i] == 0x0E) //좌표종료
                        {
                            slen = 0;
                            istep = 0;
                        } else if (istep == 0 && handlertemp[i] == 0x02) //STX수신
                        {
                            slen = 0;
                            if (bTitchk) //LJY20230911 : TITENG 리더기 추가
                                istep = 21;
                            else
                                istep = 15;
                            RECVBuf[slen++] = (char) handlertemp[i];
                        } else if (istep == 15) //COMMAND수신
                        {
                            istep = 20;
                            RECVBuf[slen++] = (char) handlertemp[i];
                        } else if (istep == 20) //길이수신
                        {
                            RECVBuf[slen++] = (char) handlertemp[i];
                            if (slen == 4) {
                                istep = 25;
                                length_recv = Integer.parseInt(String.format("%02X", RECVBuf[2] & 0xff) + String.format("%02X", RECVBuf[3] & 0xff));
                            }
                        } else if (istep == 21) { //LJY20230911 : TITENG 리더기 추가 //길이수신
                            RECVBuf[slen++] = (char) handlertemp[i];
                            if (slen == 3) {
                                istep = 26;
                                length_recv = RECVBuf[1] * 16 + RECVBuf[2];
                            }
                        } else if (istep == 25) { //데이터수신
                            RECVBuf[slen++] = (char) handlertemp[i];
                            if (length_recv == slen - 4) {
                                istep = 30;
                            }
                        } else if (istep == 26) { //LJY20230911 : TITENG 리더기 추가 //데이터수신
                            RECVBuf[slen++] = (char) handlertemp[i];
                            if (length_recv + 1 == slen - 3) //ETX(1)
                                istep = 30;
                        } else if (istep == 30) { //데이터수신완료
                            istep = 0;
                            status = 1;
                            break; //LJY20221202 : 응답데이터 길이만큼 받고 종료
                        }
                    }
                    break;

                default: //LJY20230911 : TITENG 리더기 추가
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] handleMessage default : " + msg.what);
                    break;
            }
        }
    }

    final Handler handler = new Handler() {
        @SuppressLint("HandlerLeak")
        @Override
        public void handleMessage(Message msg) {
            isrun = false;
            PopupClose();

            if (status == 2) { //타임아웃
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 시리얼 통신 타임아웃");
                if (func_code == 0x31 || func_code == 0xA0 || func_code == 0xA1)
                    InsertChkvalid("N", "시리얼 통신 타임아웃");
                SetResultFunc(RESULT_CANCELED, -18, "시리얼 통신 타임아웃");

                //LJY20201217 : NVCAT 종료 중에도 호출 되도록 로직 변경
                isMultipad = false;
                isSign = false;
                return;
            }
            status = 0;

            if (bRelease == false) //20200108LJY : 디버깅로그
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 시리얼데이터 : [" + new String(RECVBuf) + "]");

            if (func_code == 0x6B) {
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 0x6B 에러코드 : " + errcode);

                if (errcode.equals("00")) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 키다운로드 성공");
                    Toast.makeText(MainActivity.this, "키다운로드 성공", Toast.LENGTH_SHORT).show();
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 키다운로드 실패");
                    Toast.makeText(MainActivity.this, "키다운로드 실패", Toast.LENGTH_SHORT).show();
                }
                btnEnable();
                SetResultFunc(RESULT_OK, 1, "최초키 다운로드 성공");

                return;
            } else if (func_code == 0x6A) {
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 0x6A 에러코드 : " + errcode);

                Toast.makeText(MainActivity.this, "키다운로드 1단계 성공", Toast.LENGTH_SHORT).show();

                if (errcode.equals("00")) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 키다운로드 1단계 성공");
                    Toast.makeText(MainActivity.this, "키다운로드 1단계 성공", Toast.LENGTH_SHORT).show();
                    SharedManager.LogDebug(bLogUse, "debugjy", "핸들러 진입 1");
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 키다운로드 1단계 실패");
                    Toast.makeText(MainActivity.this, "키다운로드 1단계 실패", Toast.LENGTH_SHORT).show();
                    btnEnable();
                    return;
                }

                System.arraycopy(RECVBuf, 15, key_info, 0, 64); //key_info에 리더기 키정보 저장
                System.arraycopy(RECVBuf, 39, KeyDownCnt, 0, 2); //LJY20200918 : 키다운로드 카운트

                Arrays.fill(RECVBuf, (char) 0x00);
                Arrays.fill(encdata, (char) 0x00);
                Arrays.fill(icdata, (char) 0x00);

                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);

                if(writeBuffer[4] == '1') { //LJY20200918 : 키다운로드 카운트
                    bFirst = true;
                    String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());

                    mServerip = mSharedManager.getPreferences().getString("Serverip", "");
                    if (mServerip.length() == 0 || mServerip.length() > 16) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서버 IP가 잘못 되었습니다.");
                        Toast.makeText(MainActivity.this, "서버 IP가 잘못 되었습니다.", Toast.LENGTH_SHORT).show();
                        btnEnable();
                        return;
                    }

                    mServerport = mSharedManager.getPreferences().getString("Serverport", "");
                    if (mServerport.length() == 0 || mServerport.length() > 6) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서버 PORT가 잘못 되었습니다.");
                        Toast.makeText(MainActivity.this, "서버 PORT가 잘못 되었습니다.", Toast.LENGTH_SHORT).show();
                        btnEnable();
                        return;
                    }

                    PosClient posClient = new PosClient();
                    if (bFirst == true)
                        sendBuff = ("0256HPS" + mSharedManager.getPreferences().getString("Catid", "") + strDate + "0200KWH1          " + mSharedManager.getPreferences().getString("Catid", "") + new String(key_info) + "                                                                                                                                       ").getBytes();
                    else
                        sendBuff = ("0256HPS" + mSharedManager.getPreferences().getString("Catid", "") + strDate + "0200KXH1          " + mSharedManager.getPreferences().getString("Catid", "") + new String(key_info) + "                                                                                                                                       ").getBytes();
                    if (bRelease)
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 55) + "*******************************************************************************************************************************");
                    else
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                    if(mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                        System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                        recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                    } else
                        recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);

                    try {
                        if (new String(recvBuff, "EUC-KR").equals("-1")) {
                            Toast.makeText(MainActivity.this, "-1:서버연결실패", Toast.LENGTH_SHORT).show();
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -1:서버연결실패");
                            btnEnable();
                            return;
                        } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                            Toast.makeText(MainActivity.this, "-2:서버 전문 송신 실패", Toast.LENGTH_SHORT).show();
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -2:서버 전문 송신 실패");
                            btnEnable();
                            return;
                        } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                            Toast.makeText(MainActivity.this, "-3:서버 전문 수신 실패", Toast.LENGTH_SHORT).show();
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -3:서버 전문 수신 실패");
                            btnEnable();
                            return;
                        } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                            Toast.makeText(MainActivity.this, "-4:서버 키교환 실패", Toast.LENGTH_SHORT).show();
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -4:서버 키교환 실패");
                            btnEnable();
                            return;
                        } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -5:서버 전문 암복호화 실패");
                            Toast.makeText(MainActivity.this, "-5:서버 전문 암복호화 실패", Toast.LENGTH_SHORT).show();
                            btnEnable();
                            return;
                        } else {
                            if (bRelease)
                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 59) + "**************************************************");
                            else
                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));

                            for (int k = 0; k < 287; k++) {
                                key_down[k] = (char) recvBuff[k + 59];
                            }
                        }
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }

                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 키다운로드 2단계 중입니다.");
                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                    {
                        isrun = true;

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
                        func_code = 0x6B;
                        btnDisable();

                        scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                        // Serial Port Check
                        int readState = scr.checkSerialPortOpened();
                        if (readState != RTN_COMM_OK) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 연결 상태 체크해주시길 바랍니다.");
                            Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                            btnEnable();
                            return;
                        }

                        scr.clearTxBuffer();

                        writeBuffer = new char[305];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x03;
                        writeBuffer[3] = 0x00; //Length(2)
                        String sendstr = "";
                        if (bFirst == true)
                            sendstr = "102" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                        else
                            sendstr = "202" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 300);
                        writeBuffer[304] = xor_sum(writeBuffer, 304);

                        temp = new byte[305];
                        for (int i = 0; i < 305; i++) {
                            temp[i] = (byte) writeBuffer[i];
                        }
                        scr.sendMsg(temp, temp.length);
                        if (bFirst == true) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 최초키다운로드 2단계 중입니다.");
                            PopupOpen(MainActivity.this, "최초키다운로드 2단계 중입니다.");
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 갱신키다운로드 2단계 중입니다.");
                            PopupOpen(MainActivity.this, "갱신키다운로드 2단계 중입니다.");
                        }

                        scr.clearRxBuffer();
                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                    {
                        mUart = new libUart();
                        isrun = true;

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
                        func_code = 0x6B;
                        btnDisable();

                        writeBuffer = new char[305];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x03;
                        writeBuffer[3] = 0x00; //Length(2)
                        String sendstr = "";
                        if (bFirst == true)
                            sendstr = "102" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                        else
                            sendstr = "202" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 300);
                        writeBuffer[304] = xor_sum(writeBuffer, 304);

                        temp = new byte[305];
                        for (int i = 0; i < 305; i++) {
                            temp[i] = (byte) writeBuffer[i];
                        }
                        if (bFirst == true) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 최초키다운로드 2단계 중입니다.");
                            PopupOpen(MainActivity.this, "최초키다운로드 2단계 중입니다.");
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 갱신키다운로드 2단계 중입니다.");
                            PopupOpen(MainActivity.this, "갱신키다운로드 2단계 중입니다.");
                        }

                        //LJY20201217 : 리더기 포트번호/통신속도 가변
                        mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                        if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                            mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                            mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                        }
                        //카드리더UART로 IC테스트 명령 전송
                        mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                        mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else {
                        if (!SharedManager.isBizdown) {
                            //LJY20200812 : 가맹점다운로드 예외처리
//                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 가맹점다운로드 해주시길 바랍니다.");
//                        Toast.makeText(MainActivity.this, "가맹점다운로드 해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
//                        btnEnable();
//                        return;
                        }
                        if (SharedManager.isStatus == false) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 연결 상태 체크해주시길 바랍니다.");
                            Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                            btnEnable();
                            return;
                        }

                        if (usbService != null) {
                            isrun = true;

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            func_code = 0x6B;
                            btnDisable();

                            writeBuffer = new char[305];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x03;
                            writeBuffer[3] = 0x00; //Length(2)
                            String sendstr = "";
                            if (bFirst == true)
                                sendstr = "102" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                            else
                                sendstr = "202" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 300);
                            writeBuffer[304] = xor_sum(writeBuffer, 304);

                            temp = new byte[305];
                            for (int i = 0; i < 305; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            if (bFirst == true) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 최초키다운로드 2단계 중입니다.");
                                PopupOpen(MainActivity.this, "최초키다운로드 2단계 중입니다.");
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 갱신키다운로드 2단계 중입니다.");
                                PopupOpen(MainActivity.this, "갱신키다운로드 2단계 중입니다.");
                            }
                            usbService.write(temp);
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                            Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                            btnEnable();
                            return;
                        }
                    }

                    return ;
                }




                String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());

                mServerip = mSharedManager.getPreferences().getString("Serverip", "");
                if (mServerip.length() == 0 || mServerip.length() > 16) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서버 IP가 잘못 되었습니다.");
                    Toast.makeText(MainActivity.this, "서버 IP가 잘못 되었습니다.", Toast.LENGTH_SHORT).show();
                    btnEnable();
                    return;
                }

                mServerport = mSharedManager.getPreferences().getString("Serverport", "");
                if (mServerport.length() == 0 || mServerport.length() > 6) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서버 PORT가 잘못 되었습니다.");
                    Toast.makeText(MainActivity.this, "서버 PORT가 잘못 되었습니다.", Toast.LENGTH_SHORT).show();
                    btnEnable();
                    return;
                }

                PosClient posClient = new PosClient();
                if (bFirst == true)
                    sendBuff = ("0256HPS" + mSharedManager.getPreferences().getString("Catid", "") + strDate + "0200KWH1          " + mSharedManager.getPreferences().getString("Catid", "") + new String(key_info) + "                                                                                                                                       ").getBytes();
                else
                    sendBuff = ("0256HPS" + mSharedManager.getPreferences().getString("Catid", "") + strDate + "0200KXH1          " + mSharedManager.getPreferences().getString("Catid", "") + new String(key_info) + "                                                                                                                                       ").getBytes();
                if (bRelease)
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 55) + "*******************************************************************************************************************************");
                else
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                if(mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                    System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                    recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                } else
                    recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);

                try {
                    if (new String(recvBuff, "EUC-KR").equals("-1")) {
                        Toast.makeText(MainActivity.this, "-1:서버연결실패", Toast.LENGTH_SHORT).show();
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -1:서버연결실패");
                        btnEnable();
                        return;
                    } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                        Toast.makeText(MainActivity.this, "-2:서버 전문 송신 실패", Toast.LENGTH_SHORT).show();
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -2:서버 전문 송신 실패");
                        btnEnable();
                        return;
                    } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                        Toast.makeText(MainActivity.this, "-3:서버 전문 수신 실패", Toast.LENGTH_SHORT).show();
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -3:서버 전문 수신 실패");
                        btnEnable();
                        return;
                    } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                        Toast.makeText(MainActivity.this, "-4:서버 키교환 실패", Toast.LENGTH_SHORT).show();
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -4:서버 키교환 실패");
                        btnEnable();
                        return;
                    } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -5:서버 전문 암복호화 실패");
                        Toast.makeText(MainActivity.this, "-5:서버 전문 암복호화 실패", Toast.LENGTH_SHORT).show();
                        btnEnable();
                        return;
                    } else {
                        if (bRelease)
                            SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 59) + "**************************************************");
                        else
                            SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));

                        for (int k = 0; k < 287; k++) {
                            key_down[k] = (char) recvBuff[k + 59];
                        }
                    }
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }

                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 키다운로드 2단계 중입니다.");
                if(mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                {
                    isrun = true;

                    Arrays.fill(RECVBuf, (char) 0x00);
                    Arrays.fill(encdata, (char) 0x00);
                    Arrays.fill(icdata, (char) 0x00);

                    initSerial();
                    func_code = 0x6B;
                    btnDisable();

                    scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0)+1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                    // Serial Port Check
                    int readState = scr.checkSerialPortOpened();
                    if (readState != RTN_COMM_OK) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 연결 상태 체크해주시길 바랍니다.");
                        Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                        btnEnable();
                        return;
                    }

                    scr.clearTxBuffer();

                    writeBuffer = new char[305];
                    writeBuffer[0] = 0x02; //Header ID
                    writeBuffer[1] = func_code; //Command ID
                    writeBuffer[2] = 0x03;
                    writeBuffer[3] = 0x00; //Length(2)
                    String sendstr = "";
                    if (bFirst == true)
                        sendstr = "102" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                    else
                        sendstr = "202" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 300);
                    writeBuffer[304] = xor_sum(writeBuffer, 304);

                    temp = new byte[305];
                    for (int i = 0; i < 305; i++) {
                        temp[i] = (byte) writeBuffer[i];
                    }
                    scr.sendMsg(temp, temp.length);
                    if (bFirst == true) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 최초키다운로드 2단계 중입니다.");
                        PopupOpen(MainActivity.this, "최초키다운로드 2단계 중입니다.");
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 갱신키다운로드 2단계 중입니다.");
                        PopupOpen(MainActivity.this, "갱신키다운로드 2단계 중입니다.");
                    }

                    scr.clearRxBuffer();
                    handlerThread = new handler_thread(handler);
                    handlerThread.start();
                }
                else
                if(mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                {
                    mUart = new libUart();
                    isrun = true;

                    Arrays.fill(RECVBuf, (char) 0x00);
                    Arrays.fill(encdata, (char) 0x00);
                    Arrays.fill(icdata, (char) 0x00);

                    initSerial();
                    func_code = 0x6B;
                    btnDisable();

                    writeBuffer = new char[305];
                    writeBuffer[0] = 0x02; //Header ID
                    writeBuffer[1] = func_code; //Command ID
                    writeBuffer[2] = 0x03;
                    writeBuffer[3] = 0x00; //Length(2)
                    String sendstr = "";
                    if (bFirst == true)
                        sendstr = "102" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                    else
                        sendstr = "202" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 300);
                    writeBuffer[304] = xor_sum(writeBuffer, 304);

                    temp = new byte[305];
                    for (int i = 0; i < 305; i++) {
                        temp[i] = (byte) writeBuffer[i];
                    }
                    if (bFirst == true) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 최초키다운로드 2단계 중입니다.");
                        PopupOpen(MainActivity.this, "최초키다운로드 2단계 중입니다.");
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 갱신키다운로드 2단계 중입니다.");
                        PopupOpen(MainActivity.this, "갱신키다운로드 2단계 중입니다.");
                    }

                    //LJY20201217 : 리더기 포트번호/통신속도 가변
                    mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                    if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                        mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                        mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                    }
                    //카드리더UART로 IC테스트 명령 전송
                    mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                    mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                    handlerThread = new handler_thread(handler);
                    handlerThread.start();
                } else {
                    if(!SharedManager.isBizdown)
                    {
                        //LJY20200812 : 가맹점다운로드 예외처리
//                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 가맹점다운로드 해주시길 바랍니다.");
//                        Toast.makeText(MainActivity.this, "가맹점다운로드 해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
//                        btnEnable();
//                        return;
                    }
                    if (SharedManager.isStatus == false) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 연결 상태 체크해주시길 바랍니다.");
                        Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                        btnEnable();
                        return;
                    }

                    if (usbService != null) {
                        isrun = true;

                        handlerThread = new handler_thread(handler);
                        handlerThread.start();

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
                        func_code = 0x6B;
                        btnDisable();

                        writeBuffer = new char[305];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x03;
                        writeBuffer[3] = 0x00; //Length(2)
                        String sendstr = "";
                        if (bFirst == true)
                            sendstr = "102" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                        else
                            sendstr = "202" + mSharedManager.getPreferences().getString("Catid", "") + new String(key_down);
                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 300);
                        writeBuffer[304] = xor_sum(writeBuffer, 304);

                        temp = new byte[305];
                        for (int i = 0; i < 305; i++) {
                            temp[i] = (byte) writeBuffer[i];
                        }
                        if (bFirst == true) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 최초키다운로드 2단계 중입니다.");
                            PopupOpen(MainActivity.this, "최초키다운로드 2단계 중입니다.");
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 갱신키다운로드 2단계 중입니다.");
                            PopupOpen(MainActivity.this, "갱신키다운로드 2단계 중입니다.");
                        }
                        usbService.write(temp);
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                        Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                        btnEnable();
                        return ;
                    }
                }
            }

            //SharedManager.LogDebug(bLogUse, "debugjy", "Test13");

            if(getIntent().getStringExtra("NVCATSENDDATA").equals("REQCMD")) //LJY20231212 : COMMAND 요청 추가
            {
                char fs = 0x1C;

                if(func_code <= 0x64) { //에러코드 + FS + 응답데이터 + FS 포멧
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 응답데이터1 : [" + fs + new String(RECVBuf, 4, length_recv) + fs + "]");
                    SetResultFunc(RESULT_OK, 1, fs + new String(RECVBuf, 4, length_recv) + fs);
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 응답데이터2 : [" + String.format("%02X", RECVBuf[4] & 0xff) + fs + new String(RECVBuf, 5, length_recv - 1) + fs + "]");
                    SetResultFunc(RESULT_OK, 1, String.format("%02X", RECVBuf[4] & 0xff) + fs + new String(RECVBuf, 5, length_recv - 1) + fs);
                }
                return ;
            }

            if (mSharedManager.getPreferences().getInt("Readertype", 0) == 5 && bTitchk && (func_code == 'A' || func_code == 'S' || func_code == 'R' || func_code == 'E' || func_code == 'e')) //LJY20230911 : TITENG 리더기 추가
            {
            } else if (isMultipad) {
                isMultipad = false;

                if (RECVBuf[0] == 0x04 || (RECVBuf[0] == 0x00 && RECVBuf[4] == 0xCD)) //EOT 수신
                {
                    //LJY20220520 : 응답메시지 변경
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -19:PIN EOT 수신 (취소됨)");
                    SetResultFunc(RESULT_CANCELED, -19, "PIN EOT 수신 (취소됨)");
                    return; //TTA요청 : 은련터치 막아야 됨
                } else {
                    //LJY20220520 : 고객식별번호 추가
                    if (func_code == 0x45) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 고객식별번호 수신 정상");

                        System.arraycopy(RECVBuf, 4, encdata, 0, length_recv); //고객식별번호
                        temp = new byte[length_recv];
                        for (int i = 0; i < length_recv; i++) {
                            temp[i] = (byte) encdata[i];
                        }
                        PopupClose();

                        try {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 고객식별번호 : " + new String(temp, 0, length_recv, "EUC-KR"));
                            SetResultFunc(RESULT_OK, 1, new String(temp, 0, length_recv, "EUC-KR"));
                        } catch (UnsupportedEncodingException e) {
                            e.printStackTrace();
                        }
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 암호화 PIN 수신 정상");
                        EncPin = new String(RECVBuf, 4, 16);
                        if (String.format("%02X", RECVBuf[4] & 0xff).equals("9F")) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -19:멀티패드 아닙니다.");
                            SetResultFunc(RESULT_CANCELED, -19, "멀티패드 아닙니다.");
                            return; //TTA요청 : 은련터치 막아야 됨
                        }
                        CUPfunc();
                        return;
                    }
                }
            } else if (isSign) { //LJY20201005 : OKPOS 서명 연동
                isSign = false;

                if (RECVBuf[0] == 0x04 || (RECVBuf[0] == 0x00 && RECVBuf[4] == 0xCD)) //EOT 수신
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -6:서명 취소 하셨습니다.");
                    SetResultFunc(RESULT_CANCELED, -6, "서명 취소 하셨습니다.");
                    return; //TTA요청 : 은련터치 막아야 됨
                } else {
//                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 0x42 : " + new String(RECVBuf));
                    String SignData = "";
                    for (int kk = 2; kk < RECVBuf.length - 2; kk++) {
                        SignData = SignData + String.format("%02X", RECVBuf[kk] & 0xff);
                    }
                    SignData = SignData.substring(0, 4) + SignData.substring(4, Integer.parseInt(SignData.substring(0, 4)) * 2 + 4);
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] SignData : " + SignData);

                    if(getIntent().getStringExtra("NVCATSENDDATA").equals("REQSIGNDATA")) { //OSM20231127 : 서명 정보 가져오기
                        SetResultFunc(RESULT_OK, 1, SignData);
                        return;
                    }

                    //LJY20200902 : PAYPRO 서명연동
                    if ((strDealgb.equals("0300") || strDealgb.equals("0520")) && strWcc.equals("L") && strTxt.equals("PRO")) {
                        String SignLen = String.format("%04d", Integer.parseInt(SignData.substring(0, 4)) + 34);
                        String TotalLen = String.format("%04d", 475 + 257 + Integer.parseInt(SignData.substring(0, 4)));
                        String TotalLenSwipe = String.format("%04d", 475 + Integer.parseInt(SignData.substring(0, 4)));

                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 서명 결제");

                        String space = "                                                                                                                                                      ";

                        PosClient posClient = new PosClient();
                        temp = new byte[4096];
                        if (strDealgb.equals("0300")) {
                            if (strCashnum.length() == 24 && strCashnum.substring(0, 6).equals("281006")) //카카오페이
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 카카오페이 거래입니다.");
                            } else if (strCashnum.length() == 22 && strCashnum.substring(0, 2).equals("17")) //SSGPAY
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO SSGPAY 거래입니다.");
                            } else if (strCashnum.length() == 22 && strCashnum.substring(0, 4).equals("8710")) //LPAY
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO LPAY 거래입니다.");
                            } else if (strCashnum.length() == 21) //앱카드
                            {
                                if (strCashnum.substring(0, 6).equals("941083")) //LJY20230130 : 서울페이 서명 무시
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 서울페이 거래입니다.");
                                else
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 앱카드 거래입니다.");
                            } else if (strCashnum.length() >= 100 && strCashnum.substring(0, 7).equals("hQVDUFY")) //비씨은련QR
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 거래입니다.");

                                NiceUniQr niceuniqr = new NiceUniQr(); //LJY20220905 : JAR로 변경

                                //LJY20220905 : byte > char 변경
                                char[] Output_AID_FIRST = new char[1024];
                                char[] Output_PAN = new char[1024];
                                char[] Output_EMV_NICE = new char[1024];
                                char[] Output_TLV = new char[1024];
                                char[] Output_UPLAN = new char[1024];

                                Arrays.fill(Output_AID_FIRST, (char) 0x00);
                                Arrays.fill(Output_PAN, (char) 0x00);
                                Arrays.fill(Output_EMV_NICE, (char) 0x00);
                                Arrays.fill(Output_TLV, (char) 0x00);
                                Arrays.fill(Output_UPLAN, (char) 0x00);

//                                    int ret = niceuniqr.Uni_QR(strCashnum.getBytes(), Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);
                                int ret = niceuniqr.Uni_QR2(strCashnum, Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);

                                String tvaid = "", tvpan = "", tvemv = "", tvtlv = "", tvuplancode = "";

                                if (ret == 1) {
                                    for (int i = 0; i < 1024; i++) {
                                        if (Output_AID_FIRST[i] == 0x00) {
                                            tvaid = new String(Output_AID_FIRST).substring(0, i);
                                            break;
                                        }
                                    }
                                    for (int i = 0; i < 1024; i++) {
                                        if (Output_PAN[i] == 0x00) {
                                            tvpan = new String(Output_PAN).substring(0, i);
                                            break;
                                        }
                                    }
                                    for (int i = 0; i < 1024; i++) {
                                        if (Output_EMV_NICE[i] == 0x00) {
                                            tvemv = new String(Output_EMV_NICE).substring(0, i);
                                            break;
                                        }
                                    }
                                    for (int i = 0; i < 1024; i++) {
                                        if (Output_TLV[i] == 0x00) {
                                            tvtlv = new String(Output_TLV).substring(0, i);
                                            break;
                                        }
                                    }
                                    for (int i = 0; i < 1024; i++) {
                                        if (Output_UPLAN[i] == 0x00) {
                                            tvuplancode = new String(Output_UPLAN).substring(0, i);
                                            break;
                                        }
                                    }

                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 변환 성공!");

                                    if (tvaid.equals("A")) //은련QR
                                    {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 은련QR 거래!");

                                        mTxt = "CUP";
                                        sendBuff = (TotalLen + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                    } else //비씨QR
                                    {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨QR 거래!");

                                        mTxt = "HPS";
                                        sendBuff = (TotalLen + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                    }
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -13 : 비씨은련QR 변환 실패!");
                                    SetResultFunc(RESULT_CANCELED, -13, "POS전문오류 - 비씨은련QR 변환 실패!");
                                    return;
                                }

                                System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                                System.arraycopy(stringTobytes(SignData), 2, temp, sendBuff.length, stringTobytes(SignData).length - 2);
                                System.arraycopy(tvemv.getBytes(), 0, temp, sendBuff.length + stringTobytes(SignData).length - 2, tvemv.length());

                                if (bRelease)
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                                else
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                                mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                    System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                                    recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                                } else
                                    recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
                                try {
                                    if (new String(recvBuff, "EUC-KR").equals("-1")) {
                                    } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                                    } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                                    } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                                    } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                                    } else {
//                                            if (bRelease)
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 68) + "**********" + (new String(recvBuff, "EUC-KR")).substring(78, recvBuff.length - 78));
//                                            else
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));

                                        System.arraycopy("PRO".getBytes(), 0, recvBuff, 4, 3);
                                        if (tvaid.equals("A")) //은련QR
                                            System.arraycopy("UPQ".getBytes(), 0, recvBuff, 35, 3);
                                        else if (tvaid.equals("N")) //LJY20220905 : 네이버페이
                                            System.arraycopy("NHQ".getBytes(), 0, recvBuff, 35, 3);
                                        else
                                            System.arraycopy("BCQ".getBytes(), 0, recvBuff, 35, 3);
                                    }
                                    InsertRecv(recvBuff);
                                } catch (UnsupportedEncodingException e) {
                                    e.printStackTrace();                                }
                                //InsertRecv(recvBuff);
                                return;
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 기타 거래입니다.");
                            }

                            if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                            sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                        } else {
                            if (strDealtp.equals("10")) strDealtp = "30";

                            if (strCashnum.length() == 24 && strCashnum.substring(0, 6).equals("281006")) //카카오페이
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 카카오페이 거래입니다.");
                                //서명도 필요
                                if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                                sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            } else if (strCashnum.length() == 22 && strCashnum.substring(0, 2).equals("17")) //SSGPAY
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO SSGPAY 거래입니다.");
                                //서명도 필요
                                if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                                sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            } else if (strCashnum.length() == 24 && strCashnum.substring(0, 4).equals("8710")) //LPAY
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO LPAY 거래입니다.");
                                //서명도 필요
                                if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                                sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            } else if (strCashnum.length() == 21) //앱카드
                            {
                                if (strCashnum.substring(0, 6).equals("941083")) { //LJY20230130 : 서울페이 서명 무시
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 서울페이 거래입니다.");
                                    if (strCashnum.indexOf("=") == -1)
                                        strCashnum = strCashnum + "=";
                                    sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                } else
//                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 앱카드 거래입니다.");                                    

                                    strCashnum = strCashnum + "=";

                                sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            } else if (strCashnum.length() >= 100 && strCashnum.substring(0, 7).equals("hQVDUFY")) //비씨은련QR
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 거래입니다.");

                                NiceUniQr niceuniqr = new NiceUniQr(); //LJY20220905 : JAR로 변경

                                //LJY20220905 : byte > char 변경
                                char[] Output_AID_FIRST = new char[1024];
                                char[] Output_PAN = new char[1024];
                                char[] Output_EMV_NICE = new char[1024];
                                char[] Output_TLV = new char[1024];
                                char[] Output_UPLAN = new char[1024];

                                Arrays.fill(Output_AID_FIRST, (char) 0x00);
                                Arrays.fill(Output_PAN, (char) 0x00);
                                Arrays.fill(Output_EMV_NICE, (char) 0x00);
                                Arrays.fill(Output_TLV, (char) 0x00);
                                Arrays.fill(Output_UPLAN, (char) 0x00);

//                                    int ret = niceuniqr.Uni_QR(strCashnum.getBytes(), Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);
                                int ret = niceuniqr.Uni_QR2(strCashnum, Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);

                                String tvaid = "", tvpan = "", tvemv = "", tvtlv = "", tvuplancode = "";

                                if (ret == 1) {
                                    for (int i = 0; i < 1024; i++) {
                                        if (Output_AID_FIRST[i] == 0x00) {
                                            tvaid = new String(Output_AID_FIRST).substring(0, i);
                                            break;
                                        }
                                    }
                                    for (int i = 0; i < 1024; i++) {
                                        if (Output_PAN[i] == 0x00) {
                                            tvpan = new String(Output_PAN).substring(0, i);
                                            break;
                                        }
                                    }
                                    for (int i = 0; i < 1024; i++) {
                                        if (Output_EMV_NICE[i] == 0x00) {
                                            tvemv = new String(Output_EMV_NICE).substring(0, i);
                                            break;
                                        }
                                    }
                                    for (int i = 0; i < 1024; i++) {
                                        if (Output_TLV[i] == 0x00) {
                                            tvtlv = new String(Output_TLV).substring(0, i);
                                            break;
                                        }
                                    }
                                    for (int i = 0; i < 1024; i++) {
                                        if (Output_UPLAN[i] == 0x00) {
                                            tvuplancode = new String(Output_UPLAN).substring(0, i);
                                            break;
                                        }
                                    }

                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 변환 성공!");

                                    if (tvaid.equals("A")) //은련QR
                                    {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 은련QR 거래!");

                                        mTxt = "CUP";
                                        sendBuff = (TotalLen + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                    } else //비씨QR
                                    {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨QR 거래!");

                                        mTxt = "HPS";
                                        sendBuff = (TotalLen + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                    }
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -13 : 비씨은련QR 변환 실패!");
                                    SetResultFunc(RESULT_CANCELED, -13, "POS전문오류 - 비씨은련QR 변환 실패!");
                                    return;
                                }

                                System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                                System.arraycopy(stringTobytes(SignData), 2, temp, sendBuff.length, stringTobytes(SignData).length - 2);
                                System.arraycopy(tvemv.getBytes(), 0, temp, sendBuff.length + stringTobytes(SignData).length - 2, tvemv.length());

                                if (bRelease)
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                                else
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                                mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                    System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                                    recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                                } else
                                    recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
                                try {
                                    if (new String(recvBuff, "EUC-KR").equals("-1")) {
                                    } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                                    } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                                    } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                                    } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                                    } else {
//                                            if (bRelease)
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 68) + "**********" + (new String(recvBuff, "EUC-KR")).substring(78, recvBuff.length - 78));
//                                            else
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));

                                        System.arraycopy("PRO".getBytes(), 0, recvBuff, 4, 3);
                                        if (tvaid.equals("A")) //은련QR
                                            System.arraycopy("UPQ".getBytes(), 0, recvBuff, 35, 3);
                                        else if (tvaid.equals("N")) //LJY20220905 : 네이버페이
                                            System.arraycopy("NHQ".getBytes(), 0, recvBuff, 35, 3);
                                        else
                                            System.arraycopy("BCQ".getBytes(), 0, recvBuff, 35, 3);
                                    }
                                    InsertRecv(recvBuff);
                                } catch (UnsupportedEncodingException e) {
                                    e.printStackTrace();
                                }
                                //InsertRecv(recvBuff);
                                return;
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 기타 거래입니다.");
                                if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                                sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            }
                        }

                        System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                        System.arraycopy(stringTobytes(SignData), 2, temp, sendBuff.length, stringTobytes(SignData).length - 2);
                        if (bRelease)
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                        else
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                        mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                        if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                            System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                            recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                        } else
                            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
//                    PopupClose();

                        try {
                            sTxtnum = new String(recvBuff, 7, 20, "EUC-KR");    //OSM20241011 : 전문 Recv 이후, 전문관리번호 변수에 저장
                            SharedManager.LogDebug(bLogUse, "debugjy", sTxtnum);
                        }

                        catch(UnsupportedEncodingException e)
                        {
                            e.printStackTrace();
                        }

                        InsertRecv(recvBuff);
                    } else if (func_code == 0x6E) {
                        String SignLen = String.format("%04d", Integer.parseInt(SignData.substring(0, 4)) + 34);
                        String TotalLen = String.format("%04d", 475 + Integer.parseInt(SignData.substring(0, 4)));

                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 서명 결제");

                        String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        PopupOpen(MainActivity.this, "FALLBACK VAN 승인 중입니다.");

                        PosClient posClient = new PosClient();
                        temp = new byte[4096];
                        if (strDealgb.equals("0300")) { //20200129 : 포인트거래
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 포인트승인");
                            sendBuff = (TotalLen + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                        } else if (strDealgb.equals("0520")) //20200129 : 포인트거래
                        {
                            if (strDealtp.equals("10")) strDealtp = "30";

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 포인트취소");
                            sendBuff = (TotalLen + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                        } else if (strDealgb.equals("0200")) {
                            if (strDealtp.equals("UP")) //은련
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련승인");
                                sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            } else {
                                if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                    if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - TAX or DCA");
                                        System.arraycopy(TotalLen.getBytes(), 0, sendBuff, 0, 4);
                                        System.arraycopy("F".getBytes(), 0, sendBuff, 55, 1);
                                        System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
                                        System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                        System.arraycopy(("Y" + SignLen + "1" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - DCC");
                                        signBuff = stringTobytes(SignData);  //20200313 : DCC 개발
                                        sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                    }
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 신용승인");
                                    sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                }
                            }
                        } else {
                            if (strDealtp.equals("UP")) //은련
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련취소");
                                sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 신용취소");
                                sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            }
                        }
                        System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                        System.arraycopy(stringTobytes(SignData), 2, temp, sendBuff.length, stringTobytes(SignData).length - 2);
                        if (bRelease)
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                        else
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                        mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                        if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                            System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                            recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                        } else
                            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
                        PopupClose();
                        InsertRecv(recvBuff);
                    } else {
                        String SignLen = String.format("%04d", Integer.parseInt(SignData.substring(0, 4)) + 34);
                        String TotalLen = String.format("%04d", 475 + 257 + Integer.parseInt(SignData.substring(0, 4)));
                        String TotalLenSwipe = String.format("%04d", 475 + Integer.parseInt(SignData.substring(0, 4)));

                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 서명 결제");

                        String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        PopupOpen(MainActivity.this, "IC VAN 승인 중입니다.");

                        PosClient posClient = new PosClient();
                        temp = new byte[4096];
                        if (strDealgb.equals("0300")) { //20200129 : 포인트거래
                            if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 포인트승인(동반위)");
                                sendBuff = (TotalLen + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 포인트승인");
                                sendBuff = (TotalLen + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 포인트승인");
                                sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            }
                        } else if (strDealgb.equals("0520")) //20200129 : 포인트거래
                        {
                            if (strDealtp.equals("10")) strDealtp = "30";

                            if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 포인트취소(동반위)");
                                sendBuff = (TotalLen + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 포인트취소");
                                sendBuff = (TotalLen + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 포인트취소");
                                sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            }
                        } else if (strDealgb.equals("0200")) {
                            if (strDealtp.equals("UP")) //은련
                            {
                                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련승인(동반위)");
                                    sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련승인");
                                    sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련승인");
                                    sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                }
                            } else {
                                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                    if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                        if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - TAX or DCA(동반위)");
                                            System.arraycopy(TotalLen.getBytes(), 0, sendBuff, 0, 4);
                                            System.arraycopy("K".getBytes(), 0, sendBuff, 55, 1);
                                            System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
                                            System.arraycopy(("Y" + SignLen + "1" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - DCC(동반위)");
                                            signBuff = stringTobytes(SignData); //20200313 : DCC 개발
                                            sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                        }
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 신용승인(동반위)");
                                        sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                    }
                                } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                        if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - TAX or DCA");
                                            System.arraycopy(TotalLen.getBytes(), 0, sendBuff, 0, 4);
                                            System.arraycopy("I".getBytes(), 0, sendBuff, 55, 1);
                                            System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
//                                        System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                            System.arraycopy(("Y" + SignLen + "1" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - DCC");
                                            signBuff = stringTobytes(SignData); //20200313 : DCC 개발
                                            sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                        }
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 신용승인");
                                        sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                    }
                                } else {
                                    if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                        if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - TAX or DCA");
                                            System.arraycopy(TotalLenSwipe.getBytes(), 0, sendBuff, 0, 4);
                                            System.arraycopy("A".getBytes(), 0, sendBuff, 55, 1);
                                            System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
//                                        System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                            System.arraycopy(("Y" + SignLen + "1" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - DCC");
                                            signBuff = stringTobytes(SignData); //20200313 : DCC 개발
                                            sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                        }
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 신용승인");
                                        sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                    }
                                }
                            }
                        } else {
                            if (strDealtp.equals("UP") == true) //은련
                            {
                                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련취소(동반위)");
                                    sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련취소");
                                    sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련취소");
                                    sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                }
                            } else {
                                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 신용취소(동반위)");
                                    sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 신용취소");
                                    sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 신용취소");
                                    sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                                }
                            }
                        }
                        System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                        System.arraycopy(stringTobytes(SignData), 2, temp, sendBuff.length, stringTobytes(SignData).length - 2);
                        if (Paygb[0] == 'I' || (Paygb[0] == 'R' && CardBrand[0] == 'K') || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) //LJY20230818 //LJY20200713 : 동반위 JUST TOUCH
                            System.arraycopy(new String(icdata).getBytes(), 0, temp, sendBuff.length + stringTobytes(SignData).length - 2, new String(icdata).length());
                        if (bRelease)
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                        else
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                        mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                        if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                            System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                            recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                        } else
                            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
                        PopupClose();
                        InsertRecv(recvBuff);
                    }
                }
            } else if (func_code == 0xD2) { //LJY20230713 : 사용자 선택 버튼 (시리얼 연동) 데이터 처리
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 사용자 선택 화면 에러코드 : " + errcode);

                if (errcode.equals("00")) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 사용자 선택 화면 수신 정상");

                    System.arraycopy(RECVBuf, 5, encdata, 0, length_recv);
                    temp = new byte[length_recv];
                    for (int i = 0; i < length_recv; i++) {
                        temp[i] = (byte) encdata[i];
                    }

                    try {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 사용자 선택 화면 : " + new String(temp, 0, length_recv - 1, "EUC-KR"));
                        SetResultFunc(RESULT_OK, 1, "" + new String(temp, 0, length_recv - 1, "EUC-KR"));
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                } else //카드 삽입 여부 에러코드
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -7 : 사용자 선택 화면 에러코드 : " + errcode);
                    SetResultFunc(RESULT_CANCELED, -7, "사용자 선택 화면 에러코드 : " + errcode);
                    return;
                }
            } else if (func_code == 0x71) { //OSM20230718 : RF 잔액조회 기능 구현
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 잔액조회 에러코드 : " + errcode);

                if (errcode.equals("00")) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 잔액조회 응답 수신 정상");

                    System.arraycopy(RECVBuf, 5, encdata, 0, length_recv);
                    temp = new byte[length_recv];
                    for (int i = 0; i < length_recv; i++) {
                        temp[i] = (byte) encdata[i];
                    }

                    try {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 잔액조회 화면 : " + new String(temp, 0, length_recv - 1, "EUC-KR"));
                        SetResultFunc(RESULT_OK, 1, "" + new String(temp, 0, length_recv - 1, "EUC-KR"));
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                } else //카드 삽입 여부 에러코드
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -7 : RF 잔액조회 화면 에러코드 : " + errcode);
                    SetResultFunc(RESULT_CANCELED, -7, "RF 잔액조회 화면 에러코드 : " + errcode);
                    return;
                }
            } else if (func_code == 0xCB) { //LJY20230111 : 카드 삽입 여부
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드 삽입 여부 에러코드 : " + errcode);

                if (errcode.equals("00")) { //카드 삽입 여부 정상
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드 삽입 여부 수신 정상");

                    System.arraycopy(RECVBuf, 5, encdata, 0, length_recv); //바코드번호
                    temp = new byte[length_recv];
                    for (int i = 0; i < length_recv; i++) {
                        temp[i] = (byte) encdata[i];
                    }

//                    PopupClose();
                    try {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드 삽입 여부 : " + new String(temp, 0, length_recv - 1, "EUC-KR"));
                        SetResultFunc(RESULT_OK, 1, "" + new String(temp, 0, length_recv - 1, "EUC-KR"));
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                } else //카드 삽입 여부 에러코드
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -7 : 카드 삽입 여부 에러코드 : " + errcode);
                    SetResultFunc(RESULT_CANCELED, -7, "카드 삽입 여부 에러코드 : " + errcode);
                    return;
                }
            } else if (func_code == 0xD3) { //LJY20200713 : 바코드리딩
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드리딩 에러코드 : " + errcode);

                if (errcode.equals("00")) { //멤버쉽카드 정상
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드리딩 수신 정상");

                    char[] cBarcode = new char[256]; //LJY20230112 : QR 데이터 사이즈 이슈로 배열 변경
                    Arrays.fill(cBarcode, (char) 0x00);
                    System.arraycopy(RECVBuf, 5, cBarcode, 0, length_recv); //바코드번호
                    temp = new byte[length_recv];
                    for (int i = 0; i < length_recv; i++) {
                        temp[i] = (byte) cBarcode[i];
                    }

                    PopupClose();
                    try {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드번호 : " + new String(temp, 0, length_recv - 1, "EUC-KR"));
                        SetResultFunc(RESULT_OK, 1, "" + new String(temp, 0, length_recv - 1, "EUC-KR"));
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                } else //멤버쉽카드 에러코드
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -7 : 바코드리딩 에러코드 : " + errcode);
//                    Toast.makeText(MainActivity.this, "-7 : 바코드리딩 에러코드 : " + errcode, Toast.LENGTH_SHORT).show(); //LJY20220707 : 에러코드 Toast 삭제
                    SetResultFunc(RESULT_CANCELED, -7, "바코드리딩 에러코드 : " + errcode);
                    return;
                }
            } else if (func_code == 0xBD) { //20200217 : 멤버쉽카드요청
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 멤버쉽카드 에러코드 : " + errcode);

                if (errcode.equals("00")) { //멤버쉽카드 정상
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 멤버쉽카드 수신 정상");

                    System.arraycopy(RECVBuf, 5, encdata, 0, 40); //암호화카드정보
                    temp = new byte[40];
                    for (int i = 0; i < 40; i++) {
                        temp[i] = (byte) encdata[i];
                    }

                    PopupClose();
                    try {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 멤버쉽카드번호 : " + new String(temp, 0, 40, "EUC-KR"));
                        SetResultFunc(RESULT_OK, 1, "" + new String(temp, 0, 40, "EUC-KR"));
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                } else //멤버쉽카드 에러코드
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -7 : 멤버쉽카드 에러코드 : " + errcode);
//                    Toast.makeText(MainActivity.this, "-7 : 멤버쉽카드 에러코드 : " + errcode, Toast.LENGTH_SHORT).show(); //LJY20220707 : 에러코드 Toast 삭제
                    SetResultFunc(RESULT_CANCELED, -7, "멤버쉽카드 에러코드 : " + errcode);
                    return;
                }
            } else if (func_code == 0x80) { //20200217
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);

                if (getIntent().getStringExtra("NVCATSENDDATA").equals("CHKCASHIC")) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC카드여부 에러코드 : " + errcode);
                    if (errcode.equals("00")) { //현금IC카드여부 정상
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC카드여부 수신 정상");

                        System.arraycopy(RECVBuf, 7, encdata, 0, 2); //암호화카드정보
                        temp = new byte[2];
                        for (int i = 0; i < 2; i++) {
                            temp[i] = (byte) encdata[i];
                        }

                        PopupClose();
                        try {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC카드 계좌수 : " + Integer.parseInt(new String(temp, 0, 2, "EUC-KR")));
                            SetResultFunc(RESULT_OK, 1, "" + Integer.parseInt(new String(temp, 0, 2, "EUC-KR")));
                        } catch (UnsupportedEncodingException e) {
                            e.printStackTrace();
                        }
                    } else //현금IC카드여부 에러코드
                    {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -7 : 현금IC카드여부 에러코드 : " + errcode);
//                        Toast.makeText(MainActivity.this, "-7 : 현금IC카드여부 에러코드 : " + errcode, Toast.LENGTH_SHORT).show(); //LJY20220707 : 에러코드 Toast 삭제
                        SetResultFunc(RESULT_CANCELED, -7, "현금IC카드여부 에러코드 : " + errcode);
                        return;
                    }
                } else { //20200316 : 현금IC
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC 에러코드 : " + errcode);
                    if (errcode.equals("00")) { //현금IC카드여부 정상
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC 수신 정상");

                        //거래구분(2)
                        char[] cashic_dealgb = new char[2];
                        System.arraycopy(RECVBuf, 5, cashic_dealgb, 0, 2);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] cashic_dealgb : " + new String(cashic_dealgb));

                        if (new String(cashic_dealgb).equals("F1")) //기본정보읽기
                        {

                            char[] cashic_acctcnt = new char[2]; //총계좌개수(2)
                            System.arraycopy(RECVBuf, 7, cashic_acctcnt, 0, 2);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] cashic_acctcnt : " + new String(cashic_acctcnt));
                            int acctcnt = Integer.parseInt(new String(cashic_acctcnt));

                            if (acctcnt > 1) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -22 : 현금IC 복수계좌 미지원");
                                Toast.makeText(MainActivity.this, "-22 : 현금IC 복수계좌 미지원", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -22, "현금IC 복수계좌 미지원");
                                return;
                            }

                            int index = 9;
                            Acctinfo[] acctinfo = new Acctinfo[10]; //계좌번호정보 (index(1), 계좌번호길이(2), 계좌번호(20)
                            for (int i = 0; i < acctcnt; i++) {
                                acctinfo[i] = new Acctinfo();

                                char[] acctinfo_index = new char[1];
                                System.arraycopy(RECVBuf, index, acctinfo_index, 0, 1);
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] index : " + new String(acctinfo_index));
                                index = index + 1;
                                acctinfo[i].index = new String(acctinfo_index);

                                char[] acctinfo_len = new char[2];
                                System.arraycopy(RECVBuf, index, acctinfo_len, 0, 2);
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] len : " + new String(acctinfo_len));
                                index = index + 2;
                                acctinfo[i].len = new String(acctinfo_len);

                                char[] acctinfo_accntno = new char[20];
                                System.arraycopy(RECVBuf, index, acctinfo_accntno, 0, 20);
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] accntno : " + new String(acctinfo_accntno));
                                index = index + 20;
                                acctinfo[i].accntno = new String(acctinfo_accntno);
                            }

                            stracctidx = acctinfo[acctcnt - 1].index;
                            strpindata = "                ";
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] stracctidx : " + stracctidx);

                            if (mHalbu.equals("00")) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC 일반거래");

                                //LJY20200327 : 현금IC 일반거래
                                Intent i = new Intent(MainActivity.this, KeyPadNumber.class);
                                startActivityForResult(i, 4);
                                return;
                            } else if (mHalbu.equals("01")) //현금IC 간소화거래
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC 간소화거래");

                                if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                                {
                                    isrun = true;

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();

                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC - 계좌 암호화정보 조회 요청입니다.");
                                    func_code = 0x80;

                                    scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                                    // Serial Port Check
                                    int readState = scr.checkSerialPortOpened();
                                    if (readState != RTN_COMM_OK) {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                        Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                        SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                        return;
                                    }

                                    scr.clearTxBuffer();

                                    writeBuffer = new char[25];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x20; //Length(2)
                                    String sendstr = "F3" + stracctidx + "1" + strpindata; //현금IC 거래구분(2) + Account Index(1) + 거래종류(1) + Encrypt Pin Block(16)
                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                                    writeBuffer[24] = xor_sum(writeBuffer, 24);

                                    temp = new byte[25];
                                    for (int i = 0; i < 25; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    scr.sendMsg(temp, temp.length);
                                    PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");

                                    scr.clearRxBuffer();
                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();
                                } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                {
                                    mUart = new libUart();
                                    isrun = true;

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();

                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC - 계좌 암호화정보 조회 요청입니다.");
                                    func_code = 0x80;

                                    writeBuffer = new char[25];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x20; //Length(2)
                                    String sendstr = "F3" + stracctidx + "1" + strpindata; //현금IC 거래구분(2) + Account Index(1) + 거래종류(1) + Encrypt Pin Block(16)
                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                                    writeBuffer[24] = xor_sum(writeBuffer, 24);

                                    temp = new byte[25];
                                    for (int i = 0; i < 25; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");

                                    //LJY20201217 : 포트번호/통신속도 가변
                                    mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                                    if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                        mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                        mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                                    }
                                    mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                                    mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();
                                } else {
                                    if (usbService != null) { // if UsbService was correctly binded, Send data
                                        isrun = true;

                                        handlerThread = new handler_thread(handler);
                                        handlerThread.start();

                                        Arrays.fill(RECVBuf, (char) 0x00);
                                        Arrays.fill(encdata, (char) 0x00);
                                        Arrays.fill(icdata, (char) 0x00);

                                        initSerial();

                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC - 계좌 암호화정보 조회 요청입니다.");
                                        func_code = 0x80;

                                        writeBuffer = new char[25];
                                        writeBuffer[0] = 0x02; //Header ID
                                        writeBuffer[1] = func_code; //Command ID
                                        writeBuffer[2] = 0x00;
                                        writeBuffer[3] = 0x20; //Length(2)
                                        String sendstr = "F3" + stracctidx + "1" + strpindata; //현금IC 거래구분(2) + Account Index(1) + 거래종류(1) + Encrypt Pin Block(16)
                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                                        writeBuffer[24] = xor_sum(writeBuffer, 24);

                                        temp = new byte[25];
                                        for (int i = 0; i < 25; i++) {
                                            temp[i] = (byte) writeBuffer[i];
                                        }
                                        PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");
                                        usbService.write(temp);
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                        Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                        SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정
//                                        //LJY20220427 : 재시작 로직 추가
//                                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                        Context currentActivity = getApplication();
//                                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                        currentActivity.startActivity(restartIntent);
//                                        System.exit(0);

                                        return;                                    }
                                }
                            }
                        } else if (new String(cashic_dealgb).equals("F2")) //사용자PIN검증
                        {

                        } else //계좌암호화정보조회
                        {
                            char[] csn = new char[16]; //카드일련번호(16)
                            System.arraycopy(RECVBuf, 7, csn, 0, 16);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드일련번호 : " + new String(csn));

                            char[] bankcode = new char[3]; //금융기관코드(3)
                            System.arraycopy(RECVBuf, 23, bankcode, 0, 3);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 금융기관코드 : " + new String(bankcode));

                            char[] encinfo = new char[130]; //암호화정보(130)
                            System.arraycopy(RECVBuf, 26, encinfo, 0, 130);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 암호화정보 : " + new String(encinfo));

                            char[] track3 = new char[30]; //TRACK3(30)
                            System.arraycopy(RECVBuf, 156, track3, 0, 30);
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] TRACK3 : " + new String(track3));

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC VAN 승인");
                            PopupOpen(MainActivity.this, "현금IC VAN 승인 중입니다.");

                            PosClient posClient = new PosClient();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC 거래");
                            if (mTxtnum.length() != 20 || strDealgb.length() != 4 || strDealtp.length() != 2 || mHalbu.length() != 2 || (strDealgb.equals("0420") && (mApprno.length() != 8 || mApprdate.length() != 6))) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -22 : 현금IC 전문길이 에러");
                                Toast.makeText(MainActivity.this, "-22 : 현금IC 전문길이 에러", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -22, "현금IC 전문길이 에러");
                                return;
                            }
                            if (!mApprtid.substring(0, 2).equals("  ") && mApprtid.length() == 10)
                                mCatid = mApprtid;

                            if (strDealgb.equals("0420") || (strDealgb.equals("0200") && strDealtp.equals("I2"))) {
                                sendBuff = ("0407" + "HPS" + mTxtnum + strDealgb + strDealtp + "H1" + "          " + mCatid + " 37" + new String(track3) + "       " + mHalbu + mBongsa + mTax + mMoney + mApprno + mApprdate + space.substring(0, 51) + new String(bankcode) + new String(csn) + new String(encinfo) + "  " + mFiller + (char) 0x0d).getBytes();
                            } else {
                                sendBuff = ("0407" + "HPS" + mTxtnum + strDealgb + strDealtp + "H1" + "          " + mCatid + " 37" + new String(track3) + "       " + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + space.substring(0, 51) + new String(bankcode) + new String(csn) + new String(encinfo) + "  " + mFiller + (char) 0x0d).getBytes();
                            }

                            if (bRelease)
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                            else
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));

                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                            } else
                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                            PopupClose();
                            InsertRecv(recvBuff);
                        }
                    } else //현금IC카드여부 에러코드
                    {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -7 : 현금IC 에러코드 : " + errcode);
//                        Toast.makeText(MainActivity.this, "-7 : 현금IC 에러코드 : " + errcode, Toast.LENGTH_SHORT).show(); //LJY20220707 : 에러코드 Toast 삭제
                        SetResultFunc(RESULT_CANCELED, -7, "현금IC 에러코드 : " + errcode);
                        return;
                    }
                }
            } else if (func_code == 0x6E) { //FALLBACK 응답데이터 처리
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 에러코드 : " + errcode);

                if (errcode.equals("00")) { //FALLBACK 카드리딩 정상
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 수신 정상");

                    System.arraycopy(RECVBuf, 9, encdata, 0, 104);
                    System.arraycopy(RECVBuf, 123, encdata, 104, 23); //암호화 정보
                    System.arraycopy(RECVBuf, 5, icdata, 0, 2); //FALLBACK CODE

                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    if (strDealtp.equals("UP") && !strDealgb.equals("0420")) //LJY20230713 : 은련취소 시 PIN 요청 안함 //은련PIN
                    {
                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1) //멀티패드
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - 은련");
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 암호화 PIN 요청입니다.");

                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                isrun = true;

                                handlerThread = new handler_thread(handler);
                                handlerThread.start();

                                Arrays.fill(RECVBuf, (char) 0x00);
//                                Arrays.fill(encdata, (char) 0x00);
//                                Arrays.fill(icdata, (char) 0x00);

                                initSerial();
                                isMultipad = true;

                                writeBuffer = new char[37];
                                writeBuffer[0] = 0x02; //Header ID
                                writeBuffer[1] = 0x43; //Command ID
                                writeBuffer[2] = 0x00;
                                writeBuffer[3] = 0x32; //Length(2)
                                writeBuffer[4] = 0x20;
                                writeBuffer[5] = 0x20;
                                writeBuffer[6] = 0x20;
                                writeBuffer[7] = 0x20;
                                writeBuffer[8] = 0x20;
                                writeBuffer[9] = 0x20;
                                writeBuffer[10] = 0x20;
                                writeBuffer[11] = 0x20;
                                writeBuffer[12] = 0x20;
                                writeBuffer[13] = 0x20;
                                writeBuffer[14] = 0x20;
                                writeBuffer[15] = 0x20;
                                writeBuffer[16] = 0x20;
                                writeBuffer[17] = 0x20;
                                writeBuffer[18] = 0x20;
                                writeBuffer[19] = 0x20;
                                writeBuffer[20] = 0x30;
                                writeBuffer[21] = 0x30;
                                writeBuffer[22] = 0x30;
                                writeBuffer[23] = 0x30;
                                writeBuffer[24] = 0x30;
                                writeBuffer[25] = 0x30;
                                writeBuffer[26] = 0x30;
                                writeBuffer[27] = 0x30;
                                writeBuffer[28] = 0x30;
                                writeBuffer[29] = 0x30;
                                writeBuffer[30] = 0x30;
                                writeBuffer[31] = 0x30;
                                writeBuffer[32] = 0x30;
                                writeBuffer[33] = 0x30;
                                writeBuffer[34] = 0x30;
                                writeBuffer[35] = 0x30;
                                writeBuffer[36] = 0x73;

                                temp = new byte[37];
                                for (int i = 0; i < 37; i++) {
                                    temp[i] = (byte) writeBuffer[i];
                                }
                                PopupOpenEOT(MainActivity.this, "암호화 PIN 입력해주세요.");
                                usbService.write(temp);
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                //LJY20220427 : 재시작 로직 추가
//                                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                Context currentActivity = getApplication();
//                                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                currentActivity.startActivity(restartIntent);
//                                System.exit(0);

                                return;
                            }
                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) { //LJY20201005 : OKPOS 은련 PIN 연동
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            //Arrays.fill(encdata, (char) 0x00);
                            //Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            isMultipad = true;

                            writeBuffer = new char[37];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = 0x43; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x32; //Length(2)
                            writeBuffer[4] = 0x20;
                            writeBuffer[5] = 0x20;
                            writeBuffer[6] = 0x20;
                            writeBuffer[7] = 0x20;
                            writeBuffer[8] = 0x20;
                            writeBuffer[9] = 0x20;
                            writeBuffer[10] = 0x20;
                            writeBuffer[11] = 0x20;
                            writeBuffer[12] = 0x20;
                            writeBuffer[13] = 0x20;
                            writeBuffer[14] = 0x20;
                            writeBuffer[15] = 0x20;
                            writeBuffer[16] = 0x20;
                            writeBuffer[17] = 0x20;
                            writeBuffer[18] = 0x20;
                            writeBuffer[19] = 0x20;
                            writeBuffer[20] = 0x30;
                            writeBuffer[21] = 0x30;
                            writeBuffer[22] = 0x30;
                            writeBuffer[23] = 0x30;
                            writeBuffer[24] = 0x30;
                            writeBuffer[25] = 0x30;
                            writeBuffer[26] = 0x30;
                            writeBuffer[27] = 0x30;
                            writeBuffer[28] = 0x30;
                            writeBuffer[29] = 0x30;
                            writeBuffer[30] = 0x30;
                            writeBuffer[31] = 0x30;
                            writeBuffer[32] = 0x30;
                            writeBuffer[33] = 0x30;
                            writeBuffer[34] = 0x30;
                            writeBuffer[35] = 0x30;
                            writeBuffer[36] = 0x73;

                            temp = new byte[37];
                            for (int i = 0; i < 37; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "암호화 PIN 입력해주세요.");

                            //LJY20201217 : 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -19:FALLBACK - 은련 (PIN 사용 안됨)");
                            SetResultFunc(RESULT_CANCELED, -19, "FALLBACK - 은련 (PIN 사용 안됨)");
                            return; //TTA요청 : 은련터치 막아야 됨
                        }
                        return;
                    } else //LJY20230713 : 은련 PIN 스페이스 초기화
                        EncPin = "                ";

                    if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("DC") || strDealtp.equals("UP"))) { //LJY20230713 : 은련취소 시 PIN 요청 안함 /20200312 : DCC 개발
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - 서명");
                        if (strDealtp.equals("DC") && signBuff != null && (mTxt.equals("TAX") || mTxt.equals("DCA"))) { //20200313 : DCC 개발
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - TAX or DCA");
                            PopupOpen(MainActivity.this, "FALLBACK VAN 승인 중입니다.");

                            PosClient posClient = new PosClient();
                            temp = new byte[4096];
                            System.arraycopy("1505".getBytes(), 0, sendBuff, 0, 4);
                            System.arraycopy("F".getBytes(), 0, sendBuff, 55, 1);
                            System.arraycopy(new String(encdata).getBytes(), 0, sendBuff, 56, 127);
                            System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
                            System.arraycopy(("Y10801" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);

                            System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                            System.arraycopy(signBuff, 2, temp, sendBuff.length, signBuff.length - 2);

                            if (bRelease)
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                            else
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                            } else
                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);

                            PopupClose();
                            InsertRecv(recvBuff);
                        } else {
                            //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                            if (strSigndata.length() > 0)
                                PayWithSign(strSigndata);
                            else
                                //LJY20220427 : 멀티패드 서명 연동
                                if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                    if (usbService != null) { // if UsbService was correctly binded, Send data
                                        isrun = true;

                                        handlerThread = new handler_thread(handler);
                                        handlerThread.start();

                                        Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                        initSerial();
                                        //isMultipad = true;
                                        //btnDisable();
                                        isSign = true;

                                        writeBuffer = new char[53];
                                        writeBuffer[0] = 0x02; //Header ID
                                        writeBuffer[1] = 0x42; //Command ID
                                        writeBuffer[2] = 0x00;
                                        writeBuffer[3] = 0x48; //Length(2)
                                        String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                        writeBuffer[52] = xor_sum(writeBuffer, 52);

                                        temp = new byte[53];
                                        for (int i = 0; i < 53; i++) {
                                            temp[i] = (byte) writeBuffer[i];
                                        }
                                        PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                        usbService.write(temp);
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                        Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                        SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                    //LJY20220427 : 재시작 로직 추가
//                                    mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                    Context currentActivity = getApplication();
//                                    Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                    Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                    currentActivity.startActivity(restartIntent);
//                                    System.exit(0);

                                        return;
                                    }
                                } else
                                    //LJY20201005 : OKPOS 서명 연동
                                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                    {
                                        mUart = new libUart();
                                        isrun = true;

                                        Arrays.fill(RECVBuf, (char) 0x00);

                                        initSerial();
                                        isSign = true;

                                        writeBuffer = new char[53];
                                        writeBuffer[0] = 0x02; //Header ID
                                        writeBuffer[1] = 0x42; //Command ID
                                        writeBuffer[2] = 0x00;
                                        writeBuffer[3] = 0x48; //Length(2)
                                        String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                        writeBuffer[52] = xor_sum(writeBuffer, 52);

                                        temp = new byte[53];
                                        for (int i = 0; i < 53; i++) {
                                            temp[i] = (byte) writeBuffer[i];
                                        }
                                        PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                        //LJY20201217 : 포트번호/통신속도 가변
                                        mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                        if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                            mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                            mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                        }
                                        mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                        mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                        handlerThread = new handler_thread(handler);
                                        handlerThread.start();
                                    } else {
                                        Intent intent = new Intent(MainActivity.this, SignPad.class);
                                        startActivityForResult(intent, 1);
                                    }
                        }
                    } else { //노서명
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - 노서명");
                        PopupOpen(MainActivity.this, "FALLBACK VAN 승인 중입니다.");

                        PosClient posClient = new PosClient();
                        if (strDealgb.equals("0320")) { //20200131 : 멤버쉽거래
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - 멤버쉽승인");
                            sendBuff = ("0343" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + mTax + mBongsa + new SimpleDateFormat("YYYYMMddHHmmss").format(new Date()) + "F" + new String(encdata, 0, 127) + mMoney.substring(3, 12) + mHalbu + "            " + "      " + mUninum + mFiller + " ").getBytes();
                        } else if (strDealgb.equals("0540")) //20200131 : 멤버쉽거래
                        {
                            if (strDealtp.equals("10")) strDealtp = "30";

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - 멤버쉽취소");
                            sendBuff = ("0343" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + mTax + mBongsa + new SimpleDateFormat("YYYYMMddHHmmss").format(new Date()) + "F" + new String(encdata, 0, 127) + mMoney.substring(3, 12) + mHalbu + mApprno.substring(0, 12) + mApprdate.substring(0, 6) + mUninum + mFiller + " ").getBytes();
                        } else if (strDealgb.equals("0300")) { //20200129 : 포인트거래
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - 포인트승인");
                            sendBuff = ("0437" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                        } else if (strDealgb.equals("0520")) //20200129 : 포인트거래
                        {
                            if (strDealtp.equals("10")) strDealtp = "30";

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - 포인트취소");
                            sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                        } else if (strDealgb.equals("0200")) {
                            if (strDealtp.equals("21") == true) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - 현금승인");
                                sendBuff = ("0437" + mTxt + mTxtnum + "020021" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                            } else if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - TAX or DCA");
                                    System.arraycopy("0437".getBytes(), 0, sendBuff, 0, 4);
                                    System.arraycopy("F".getBytes(), 0, sendBuff, 55, 1);
                                    System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
                                    System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - DCC");
                                    sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                                }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - 신용승인");
                                sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                            }
                        } else {
                            if (strDealtp.equals("21") == true) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - 현금취소");
                                sendBuff = ("0437" + mTxt + mTxtnum + "042021" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(1, 9) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - 신용취소");
                                sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                            }
                        }
                        if (bRelease)
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                        else
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                        mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                        if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                            System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                            recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                        } else
                            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                        PopupClose();
                        InsertRecv(recvBuff);
                    }
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT]" + "-8:FALLBACK 에러코드 : " + errcode);
                    SetResultFunc(RESULT_CANCELED, -8, "FALLBACK 에러코드 : " + errcode);
                    return;
                }
            } else if (func_code == 0x6C) { //IC카드리딩
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 에러코드 : " + errcode);

                if (getIntent().getStringExtra("NVCATSENDDATA").equals("CHKCARDBIN")) //20200217 : 카드BIN
                {
                    if (errcode.equals("00")) { //IC카드리딩 정상
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 수신 정상");

                        System.arraycopy(RECVBuf, 174, encdata, 0, 6); //암호화카드정보
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드BIN : " + new String(encdata));

                        PopupClose();
                        SetResultFunc(RESULT_OK, 1, new String(encdata));
                    } else //IC카드리딩 에러코드
                    {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -7 : IC 에러코드 : " + errcode);
//                        Toast.makeText(MainActivity.this, "-7 : IC 에러코드 : " + errcode, Toast.LENGTH_SHORT).show(); //LJY20220707 : 에러코드 Toast 삭제
                        SetResultFunc(RESULT_CANCELED, -7, "IC 에러코드 : " + errcode);
                        return;
                    }
                } else {
                    if (errcode.equals("00")) { //IC카드리딩 정상
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 수신 정상");

                        System.arraycopy(RECVBuf, 12, encdata, 0, 104);
                        System.arraycopy(RECVBuf, 126, encdata, 104, 23); //암호화카드정보
                        System.arraycopy(RECVBuf, 180, icdata, 0, 257); //EMV데이터
                        System.arraycopy(RECVBuf, 6, Paygb, 0, 1); //결제구분 : "I":IC, "M":MSR
                        System.arraycopy(RECVBuf, 8, CardBrand, 0, 1); //LJY20200713 : 동반위 JUST TOUCH
                        System.arraycopy(RECVBuf, 9, CardCvm, 0, 1); //LJY20230713 : 은련PIN 체크

                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 5) {//LJY20230911 : 리턴 시 카드 제거
                            //LJY20240723 : 버퍼클리어 추가 (결과값 체크 안함)
                            for(int iCnt = 0; iCnt < 5; iCnt++) { //최대 5회 재시도
                                try {
                                    Thread.sleep(100);
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }

                                if (TitComm((byte) 'A') == 1) {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 클리어 응답 수신 성공");
                                    break;
                                }
                            }

                            if (!mSharedManager.getPreferences().getBoolean("Titejectuse", false)) { //LJY20231019 : TITENG 카드 수동배출 미사용 시 카드 제거
                                //TitComm((byte) 'E');
                                //LJY20240723 : 카드제거 수정 (결과값 체크 안함)
                                for(int iCnt = 0; iCnt < 5; iCnt++) { //최대 5회 재시도
                                    try {
                                        Thread.sleep(100);
                                    } catch (InterruptedException e) {
                                        e.printStackTrace();
                                    }

                                    if (TitComm((byte) 'E') == 1) {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드 제거 응답 수신 성공");
                                        break;
                                    }
                                }
                            }
                        }

                        String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        //ret[0] = TitComm((byte) 'A'); //OSM20240704 : TIT 리더기 버퍼 클리어
                        //SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 버퍼 클리어 완료");

                        //    if (ret[0] == -15) {
                        //        SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                        //        try {
                        //            Thread.sleep(500);
                        //        } catch (InterruptedException e) {
                        //            e.printStackTrace();
                        //        }

                        //        return;
                        //    }


                        if (strDealtp.equals("UP") && (CardBrand[0] == 'C' && CardCvm[0] == '1') && !strDealgb.equals("0420")) //LJY20230713 : 은련PIN 체크 및 은련취소 시 PIN 요청 안함 //은련PIN
                        {
                            if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1) //멀티패드
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - 은련");
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 암호화 PIN 요청입니다.");

                                if (usbService != null) { // if UsbService was correctly binded, Send data
                                    isrun = true;

                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();

                                    Arrays.fill(RECVBuf, (char) 0x00);
//                                    Arrays.fill(encdata, (char) 0x00);
//                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();
                                    isMultipad = true;

                                    writeBuffer = new char[37];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = 0x43; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x32; //Length(2)
                                    writeBuffer[4] = 0x20;
                                    writeBuffer[5] = 0x20;
                                    writeBuffer[6] = 0x20;
                                    writeBuffer[7] = 0x20;
                                    writeBuffer[8] = 0x20;
                                    writeBuffer[9] = 0x20;
                                    writeBuffer[10] = 0x20;
                                    writeBuffer[11] = 0x20;
                                    writeBuffer[12] = 0x20;
                                    writeBuffer[13] = 0x20;
                                    writeBuffer[14] = 0x20;
                                    writeBuffer[15] = 0x20;
                                    writeBuffer[16] = 0x20;
                                    writeBuffer[17] = 0x20;
                                    writeBuffer[18] = 0x20;
                                    writeBuffer[19] = 0x20;
                                    writeBuffer[20] = 0x30;
                                    writeBuffer[21] = 0x30;
                                    writeBuffer[22] = 0x30;
                                    writeBuffer[23] = 0x30;
                                    writeBuffer[24] = 0x30;
                                    writeBuffer[25] = 0x30;
                                    writeBuffer[26] = 0x30;
                                    writeBuffer[27] = 0x30;
                                    writeBuffer[28] = 0x30;
                                    writeBuffer[29] = 0x30;
                                    writeBuffer[30] = 0x30;
                                    writeBuffer[31] = 0x30;
                                    writeBuffer[32] = 0x30;
                                    writeBuffer[33] = 0x30;
                                    writeBuffer[34] = 0x30;
                                    writeBuffer[35] = 0x30;
                                    writeBuffer[36] = 0x73;

                                    temp = new byte[37];
                                    for (int i = 0; i < 37; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpenEOT(MainActivity.this, "암호화 PIN 입력해주세요.");
                                    usbService.write(temp);
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                    SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                    //LJY20220427 : 재시작 로직 추가
//                                    mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                    Context currentActivity = getApplication();
//                                    Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                    Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                    currentActivity.startActivity(restartIntent);
//                                    System.exit(0);

                                    return;
                                }
                            } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) { //LJY20201005 : OKPOS 은련 PIN 연동
                                mUart = new libUart();
                                isrun = true;

                                Arrays.fill(RECVBuf, (char) 0x00);
                                //Arrays.fill(encdata, (char) 0x00);
                                //Arrays.fill(icdata, (char) 0x00);

                                initSerial();
                                isMultipad = true;

                                writeBuffer = new char[37];
                                writeBuffer[0] = 0x02; //Header ID
                                writeBuffer[1] = 0x43; //Command ID
                                writeBuffer[2] = 0x00;
                                writeBuffer[3] = 0x32; //Length(2)
                                writeBuffer[4] = 0x20;
                                writeBuffer[5] = 0x20;
                                writeBuffer[6] = 0x20;
                                writeBuffer[7] = 0x20;
                                writeBuffer[8] = 0x20;
                                writeBuffer[9] = 0x20;
                                writeBuffer[10] = 0x20;
                                writeBuffer[11] = 0x20;
                                writeBuffer[12] = 0x20;
                                writeBuffer[13] = 0x20;
                                writeBuffer[14] = 0x20;
                                writeBuffer[15] = 0x20;
                                writeBuffer[16] = 0x20;
                                writeBuffer[17] = 0x20;
                                writeBuffer[18] = 0x20;
                                writeBuffer[19] = 0x20;
                                writeBuffer[20] = 0x30;
                                writeBuffer[21] = 0x30;
                                writeBuffer[22] = 0x30;
                                writeBuffer[23] = 0x30;
                                writeBuffer[24] = 0x30;
                                writeBuffer[25] = 0x30;
                                writeBuffer[26] = 0x30;
                                writeBuffer[27] = 0x30;
                                writeBuffer[28] = 0x30;
                                writeBuffer[29] = 0x30;
                                writeBuffer[30] = 0x30;
                                writeBuffer[31] = 0x30;
                                writeBuffer[32] = 0x30;
                                writeBuffer[33] = 0x30;
                                writeBuffer[34] = 0x30;
                                writeBuffer[35] = 0x30;
                                writeBuffer[36] = 0x73;

                                temp = new byte[37];
                                for (int i = 0; i < 37; i++) {
                                    temp[i] = (byte) writeBuffer[i];
                                }
                                PopupOpenEOT(MainActivity.this, "암호화 PIN 입력해주세요.");

                                //LJY20201217 : 포트번호/통신속도 가변
                                mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                    mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                    mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                }
                                mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                handlerThread = new handler_thread(handler);
                                handlerThread.start();
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -19:IC - 은련 (PIN 사용 안됨)");
                                SetResultFunc(RESULT_CANCELED, -19, "C - 은련 (PIN 사용 안됨)");
                                return; //TTA요청 : 은련터치 막아야 됨
                            }
                            return;
                        } else //LJY20230713 : 은련 PIN 스페이스 초기화
                            EncPin = "                ";

                        if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000)) && (strDealtp.equals("10") || strDealtp.equals("DC") || strDealtp.equals("UP"))) { //LJY20230713 : 은련취소 시 PIN 요청 안함
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - 서명");
                            if (strDealtp.equals("DC") && signBuff != null && (mTxt.equals("TAX") || mTxt.equals("DCA"))) { //20200313 : DCC 개발
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAY구분 : " + Paygb[0]);
                                PopupOpen(MainActivity.this, "IC VAN 승인 중입니다.");

                                PosClient posClient = new PosClient();
                                temp = new byte[4096];
                                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - TAX or DCA(동반위)");
                                    System.arraycopy("1762".getBytes(), 0, sendBuff, 0, 4);
                                    System.arraycopy("K".getBytes(), 0, sendBuff, 55, 1);
                                    System.arraycopy(new String(encdata).getBytes(), 0, sendBuff, 56, 127);
                                    System.arraycopy(("Y10801" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - TAX or DCA");
                                    System.arraycopy("1762".getBytes(), 0, sendBuff, 0, 4);
                                    System.arraycopy("I".getBytes(), 0, sendBuff, 55, 1);
                                    System.arraycopy(new String(encdata).getBytes(), 0, sendBuff, 56, 127);
//                                System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
                                    System.arraycopy(("Y10801" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - TAX or DCA");
                                    System.arraycopy("1505".getBytes(), 0, sendBuff, 0, 4);
                                    System.arraycopy("A".getBytes(), 0, sendBuff, 55, 1);
                                    System.arraycopy(new String(encdata).getBytes(), 0, sendBuff, 56, 127);
//                                System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
                                    System.arraycopy(("Y10801" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                }

                                System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                                System.arraycopy(signBuff, 2, temp, sendBuff.length, signBuff.length - 2);

                                if (Paygb[0] == 'I' || (Paygb[0] == 'R' && CardBrand[0] == 'K') || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) //LJY20230818 //LJY20200713 : 동반위 JUST TOUCH
                                    System.arraycopy(new String(icdata).getBytes(), 0, temp, sendBuff.length + signBuff.length - 2, new String(icdata).length());

                                if (bRelease)
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                                else
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                                mSharedManager.getPreferences().edit().putString("Txtnum", mCatid + strDate).commit();
                                if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                    System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                                    recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                                } else
                                    recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);

                                PopupClose();
                                InsertRecv(recvBuff);
                            } else {
                                //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                if (strSigndata.length() > 0)
                                    PayWithSign(strSigndata);
                                else
                                    //LJY20220427 : 멀티패드 서명 연동
                                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                        if (usbService != null) { // if UsbService was correctly binded, Send data
                                            isrun = true;

                                            handlerThread = new handler_thread(handler);
                                            handlerThread.start();

                                            Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                            initSerial();
                                            //isMultipad = true;
                                            //btnDisable();
                                            isSign = true;

                                            writeBuffer = new char[53];
                                            writeBuffer[0] = 0x02; //Header ID
                                            writeBuffer[1] = 0x42; //Command ID
                                            writeBuffer[2] = 0x00;
                                            writeBuffer[3] = 0x48; //Length(2)
                                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                                            temp = new byte[53];
                                            for (int i = 0; i < 53; i++) {
                                                temp[i] = (byte) writeBuffer[i];
                                            }
                                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                            usbService.write(temp);
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                            Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                        //LJY20220427 : 재시작 로직 추가
//                                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                        Context currentActivity = getApplication();
//                                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                        currentActivity.startActivity(restartIntent);
//                                        System.exit(0);

                                            return;
                                        }
                                    } else
                                        //LJY20201005 : OKPOS 서명 연동
                                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                        {
                                            mUart = new libUart();
                                            isrun = true;

                                            Arrays.fill(RECVBuf, (char) 0x00);

                                            initSerial();
                                            isSign = true;

                                            writeBuffer = new char[53];
                                            writeBuffer[0] = 0x02; //Header ID
                                            writeBuffer[1] = 0x42; //Command ID
                                            writeBuffer[2] = 0x00;
                                            writeBuffer[3] = 0x48; //Length(2)
                                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                                            temp = new byte[53];
                                            for (int i = 0; i < 53; i++) {
                                                temp[i] = (byte) writeBuffer[i];
                                            }
                                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                            //LJY20201217 : 포트번호/통신속도 가변
                                            mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                            }
                                            mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                            mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                            handlerThread = new handler_thread(handler);
                                            handlerThread.start();
                                        } else {
                                            Intent intent = new Intent(MainActivity.this, SignPad.class);
                                            startActivityForResult(intent, 1);
                                        }
                            }
                        } else { //노서명
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - 노서명");
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAY구분 : " + Paygb[0]);
                            PopupOpen(MainActivity.this, "IC VAN 승인 중입니다.");

                            PosClient posClient = new PosClient();
                            if (strDealgb.equals("0320")) { //20200131 : 멤버쉽거래
                                if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - 멤버쉽승인");
                                    sendBuff = ("0343" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + mTax + mBongsa + new SimpleDateFormat("YYYYMMddHHmmss").format(new Date()) + "A" + new String(encdata, 0, 127) + mMoney.substring(3, 12) + mHalbu + "            " + "      " + mUninum + mFiller + " ").getBytes();
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - 멤버쉽승인");
                                    sendBuff = ("0343" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + mTax + mBongsa + new SimpleDateFormat("YYYYMMddHHmmss").format(new Date()) + "A" + new String(encdata, 0, 127) + mMoney.substring(3, 12) + mHalbu + "            " + "      " + mUninum + mFiller + " ").getBytes();
                                }
                            } else if (strDealgb.equals("0540")) //20200131 : 멤버쉽거래
                            {
                                if (strDealtp.equals("10")) strDealtp = "30";

                                if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - 멤버쉽취소");
                                    sendBuff = ("0343" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + mTax + mBongsa + new SimpleDateFormat("YYYYMMddHHmmss").format(new Date()) + "A" + new String(encdata, 0, 127) + mMoney.substring(3, 12) + mHalbu + mApprno.substring(0, 12) + mApprdate.substring(0, 6) + mUninum + mFiller + " ").getBytes();
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - 멤버쉽취소");
                                    sendBuff = ("0343" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + mTax + mBongsa + new SimpleDateFormat("YYYYMMddHHmmss").format(new Date()) + "A" + new String(encdata, 0, 127) + mMoney.substring(3, 12) + mHalbu + mApprno.substring(0, 12) + mApprdate.substring(0, 6) + mUninum + mFiller + " ").getBytes();
                                }
                            } else if (strDealgb.equals("0300")) { //20200129 : 포인트거래
                                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - 포인트승인(동반위)");
                                    sendBuff = ("0694" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                }
                                else
                                if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - 포인트승인");
                                    sendBuff = ("0694" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - 포인트승인");
                                    sendBuff = ("0437" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                }
                            } else if (strDealgb.equals("0520")) //20200129 : 포인트거래
                            {
                                if (strDealtp.equals("10")) strDealtp = "30";

                                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - 포인트취소(동반위)");
                                    sendBuff = ("0694" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                }
                                else
                                if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - 포인트취소");
                                    sendBuff = ("0694" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - 포인트취소");
                                    sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                }
                            } else if (strDealgb.equals("0200")) {
                                if (strDealtp.equals("21")) {
                                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - 현금승인(동반위)");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "020021" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    }
                                    else
                                    if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - 현금승인");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "020021" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - 현금승인");
                                        sendBuff = ("0437" + mTxt + mTxtnum + "020021" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                    }
                                } else {
                                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                        if (strDealtp.equals("DC")) {
                                            if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - TAX or DCA(동반위)");
                                                System.arraycopy("0694".getBytes(), 0, sendBuff, 0, 4);
                                                System.arraycopy("K".getBytes(), 0, sendBuff, 55, 1);
                                                System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                            } else {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - DCC(동반위)");
                                                sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                            }
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - 신용승인(동반위)");
                                            sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                        }
                                    }
                                    else
                                    if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                        if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                            if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - TAX or DCA");
                                                System.arraycopy("0694".getBytes(), 0, sendBuff, 0, 4);
                                                System.arraycopy("I".getBytes(), 0, sendBuff, 55, 1);
                                                System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
//                                                System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                            } else {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - DCC");
                                                sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                            }
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - 신용승인");
                                            sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                        }
                                    } else {
                                        if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                            if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - TAX or DCA");
                                                System.arraycopy("0437".getBytes(), 0, sendBuff, 0, 4);
                                                System.arraycopy("A".getBytes(), 0, sendBuff, 55, 1);
                                                System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
//                                                System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                            } else {
                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - DCC");
                                                sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                            }
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - 신용승인");
                                            sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                        }
                                    }
                                }
                            } else {
                                if (strDealtp.equals("21") == true) {
                                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - 현금취소(동반위)");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "042021" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(1, 9) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    }
                                    else
                                    if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - 현금취소");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "042021" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(1, 9) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - 현금취소");
                                        sendBuff = ("0437" + mTxt + mTxtnum + "042021" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(1, 9) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                    }
                                } else {
                                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - 신용취소(동반위)");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    }
                                    else
                                    if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - 신용취소");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - 신용취소");
                                        sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                    }
                                }
                            }
                            if (bRelease)
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                            else
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                            } else
                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                            PopupClose();
                            InsertRecv(recvBuff);
                        }
                    } else if (errcode.equals("CF")) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC FALLBACK 코드 수신");

                        if (mSharedManager.getPreferences().getBoolean("Retry", false)) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -9:FALLBACK 재시도 사용 안함");
                            SetResultFunc(RESULT_CANCELED, -9, "FALLBACK 재시도 사용 안함");
                            return;
                        }

                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 카드리딩 요청입니다.");
                        if(mSharedManager.getPreferences().getInt("Readertype", 0) == 5 && lb_poweron == true) //LJY20230911 : TITENG 리더기 POWER 성공 시 FALLBACK
                        {
                            final int[] itimeover = new int[1];
                            final int[] ret = new int[1];
                            final String[] sTitRecvCode = {""}; //응답코드

                            ret[0] = TitComm((byte) 'e');

                            if (ret[0] == -15) {
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                                return;
                            }

                            new TitCommAsyncTask().performAsyncTask(new TitCommCallback() {
                                @Override
                                public void onSuccess(CallbackResult result) {
                                    sTitRecvCode[0] = result.getResult1().substring(6, 8);
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드제거 응답데이터 : " + result.getResult1());
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드제거 응답코드 : " + sTitRecvCode[0]);

                                    if (!sTitRecvCode[0].equals("50")) { //실패 시
                                        SetResultFunc(RESULT_CANCELED, -907, "카드제거 실패! : " + sTitRecvCode[0]);
                                        return;
                                    } else { //성공 시
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드제거 성공! : " + sTitRecvCode[0]);

                                        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
                                            @Override
                                            public void run() {
                                                // 사용하고자 하는 코드
                                                PopupOpenEOT(MainActivity.this, "FALLBACK 카드리딩 해주세요.");
                                            }
                                        }, 0);

                                        lb_dead = true;

                                        tstarttit = System.currentTimeMillis();
                                        tendtit = 0;

                                        while(lb_dead)
                                        {
                                            try {
                                                Thread.sleep(1000);
                                            } catch (InterruptedException e) {
                                                e.printStackTrace();
                                            }

                                            if(Integer.parseInt(mTimeout) == 0)     //OSM20240722 : 타임아웃 추가
                                                itimeover[0] = calculate_interval_tit(7200);
                                            else
                                                itimeover[0] = calculate_interval_tit(Integer.parseInt(mTimeout));

                                            ret[0] = TitComm((byte) 'S');

                                            if (ret[0] == -15) {
                                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                                                return;
                                            }

                                            new TitCommAsyncTask().performAsyncTask(new TitCommCallback() {
                                                @Override
                                                public void onSuccess(CallbackResult result) {
                                                    sTitRecvCode[0] = result.getResult1().substring(6, 8);
                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 상태체크 응답데이터 : " + result.getResult1());
                                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 상태체크 응답코드 : " + sTitRecvCode[0]);

                                                    if (!sTitRecvCode[0].equals("50")) { //실패 시
                                                        SetResultFunc(RESULT_CANCELED, -903, "상태체크 실패! : " + sTitRecvCode[0]);
                                                        return;
                                                    } else {
                                                        char[] bResult = result.getResult2();
                                                        int[] bBit = new int[32];
                                                        Arrays.fill(bBit, 0x00);
                                                        hexToBinary(bBit, (int) bResult[4]);

                                                        if (func_code == 'S' && (bBit[7] == 1 || bBit[6] == 1)) { //상태체크 && 응답코드 'P' && 카드삽입시
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드 삽입 대기 중");
                                                            lb_insert = true;
                                                        }

                                                        if(func_code == 'S' && bBit[7] == 0 && bBit[6] == 0)
                                                        {
                                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드 제거 됨");

                                                            if(bBit[4] == 1) {
                                                                lb_cardin = false;
                                                                lb_dead = false;
                                                                lb_poweron = false;

                                                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 리딩 됨");

                                                                return;
                                                            }
                                                        }

                                                        if(itimeover[0] == 1)
                                                            lb_dead = false;

                                                        if(m_Exit)
                                                            lb_dead = false;
                                                    }
                                                }

                                                @Override
                                                public void onFailure(Throwable throwable) {
                                                    SetResultFunc(RESULT_CANCELED, -904, "상태체크 실패! : " + throwable.getMessage());
                                                    return ;
                                                }
                                            });
                                        }

                                        if(m_Exit)
                                        {
                                            SetResultFunc(RESULT_CANCELED, -7, "TITENG 에러코드 : CD");
                                            return;
                                        }

                                        if(itimeover[0] == 1)
                                        {
                                            SetResultFunc(RESULT_CANCELED, -7, "TITENG 에러코드 : F2");
                                            return;
                                        }

                                        try {
                                            Thread.sleep(500);
                                        } catch (InterruptedException e) {
                                            e.printStackTrace();
                                        }

                                        if (usbService != null) { // if UsbService was correctly binded, Send data
                                            isrun = true;

                                            handlerThread = new handler_thread(handler);
                                            handlerThread.start();

                                            Arrays.fill(RECVBuf, (char) 0x00);
                                            Arrays.fill(encdata, (char) 0x00);
                                            Arrays.fill(icdata, (char) 0x00);

                                            initSerial();

                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 카드리딩 요청입니다.");
                                            func_code = 0x6E;

                                            writeBuffer = new char[7];
                                            writeBuffer[0] = 0x02; //Header ID
                                            writeBuffer[1] = func_code; //Command ID
                                            writeBuffer[2] = 0x00;
                                            writeBuffer[3] = 0x02; //Length(2)
                                            String sendstr = mTimeout; //Card 대기시간(2)
                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                                            writeBuffer[6] = xor_sum(writeBuffer, 6);

                                            temp = new byte[7];
                                            for (int i = 0; i < 7; i++) {
                                                temp[i] = (byte) writeBuffer[i];
                                            }
//                                            PopupOpenEOT(MainActivity.this, "FALLBACK 카드리딩 해주세요.");
                                            usbService.write(temp);
                                        } else {
                                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!");
                                            return;
                                        }
                                        return;
                                    }
                                }

                                @Override
                                public void onFailure(Throwable throwable) {
                                    SetResultFunc(RESULT_CANCELED, -908, "카드제거 실패! : " + throwable.getMessage());
                                    return;
                                }
                            });
                        }
                        else
                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                        {
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            func_code = 0x6E;

                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // Serial Port Check
                            int readState = scr.checkSerialPortOpened();
                            if (readState != RTN_COMM_OK) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            scr.clearTxBuffer();

                            writeBuffer = new char[7];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x02; //Length(2)
                            String sendstr = mTimeout; //Card 대기시간(2)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                            writeBuffer[6] = xor_sum(writeBuffer, 6);

                            temp = new byte[7];
                            for (int i = 0; i < 7; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            scr.sendMsg(temp, temp.length);
                            PopupOpenEOT(MainActivity.this, "FALLBACK 카드리딩 해주세요.");

                            scr.clearRxBuffer();
                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            func_code = 0x6E;

                            writeBuffer = new char[7];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x02; //Length(2)
                            String sendstr = mTimeout; //Card 대기시간(2)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                            writeBuffer[6] = xor_sum(writeBuffer, 6);

                            temp = new byte[7];
                            for (int i = 0; i < 7; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "FALLBACK 카드리딩 해주세요.");

                            //LJY20201217 : 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                isrun = true;

                                handlerThread = new handler_thread(handler);
                                handlerThread.start();

                                Arrays.fill(RECVBuf, (char) 0x00);
                                Arrays.fill(encdata, (char) 0x00);
                                Arrays.fill(icdata, (char) 0x00);

                                initSerial();
                                func_code = 0x6E;

                                writeBuffer = new char[7];
                                writeBuffer[0] = 0x02; //Header ID
                                writeBuffer[1] = func_code; //Command ID
                                writeBuffer[2] = 0x00;
                                writeBuffer[3] = 0x02; //Length(2)
                                String sendstr = mTimeout; //Card 대기시간(2)
                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 2);
                                writeBuffer[6] = xor_sum(writeBuffer, 6);

                                temp = new byte[7];
                                for (int i = 0; i < 7; i++) {
                                    temp[i] = (byte) writeBuffer[i];
                                }
                                if(mSharedManager.getPreferences().getInt("Readertype", 0) != 5) //LJY20230911 : TITENG 리더기 사용 시 팝업 없음
                                    PopupOpenEOT(MainActivity.this, "FALLBACK 카드리딩 해주세요.");
                                usbService.write(temp);
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                //LJY20220427 : 재시작 로직 추가
//                                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                Context currentActivity = getApplication();
//                                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                currentActivity.startActivity(restartIntent);
//                                System.exit(0);

                                return;
                            }
                        }
                    } else { //IC카드리딩 에러코드
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -7:IC 에러코드 : " + errcode);
//                        Toast.makeText(MainActivity.this, "-7:IC 에러코드 : " + errcode, Toast.LENGTH_SHORT).show(); //LJY20220707 : 에러코드 Toast 삭제
                        SetResultFunc(RESULT_CANCELED, -7, "IC 에러코드 : " + errcode);
                        return;
                    }
                }
            } else if (func_code == 0xA1) {
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 0xA1 에러코드 : " + errcode);

                if (!errcode.equals("00")) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -92:상호인증 실패! 에러코드 : " + errcode);
                    InsertChkvalid("N", "-92:상호인증 실패! 에러코드 : " + errcode);
                    Toast.makeText(MainActivity.this, "-92:상호인증 실패! 에러코드 : " + errcode, Toast.LENGTH_SHORT).show();
                    SetResultFunc(RESULT_CANCELED, -92, "상호인증 실패 (에러코드:" + errcode + ")");
                    return;
                }

                if (RECVBuf[5] == 'O' || (RECVBuf[5] == 0x00 && RECVBuf[6] == 0x4F)) {
//                    mSharedManager.getPreferences().edit().putInt("MainVisibleInt", 2).commit(); //LJY20220913 : INT 형으로 변경

                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 상호인증 및 무결성 점검 성공!");
                    InsertChkvalid("Y", "상호인증 및 무결성 점검 성공!");
                    Toast.makeText(MainActivity.this, "상호인증 및 무결성 점검 성공!", Toast.LENGTH_SHORT).show();
                    SetResultFunc(RESULT_OK, 1, "정상");
                    //moveTaskToBack(true); //액티비티 최소화
                    return;
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -94:무결성 점검 실패!");
                    InsertChkvalid("N", "-94:무결성 점검 실패!");
                    Toast.makeText(MainActivity.this, "-94:무결성 점검 실패!", Toast.LENGTH_SHORT).show();
                    SetResultFunc(RESULT_CANCELED, -94, "무결성점검 실패");
                    return;
                }
            } else if (func_code == 0xA0) {
                String errcode = String.format("%02X", RECVBuf[4] & 0xff);
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 0xA0 에러코드 : " + errcode);

                if (!errcode.equals("00")) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -92:상호인증 실패! 에러코드 : " + errcode);
                    InsertChkvalid("N", "-92:상호인증 실패! 에러코드 : " + errcode);
                    Toast.makeText(MainActivity.this, "-92:상호인증 실패! 에러코드 : " + errcode, Toast.LENGTH_SHORT).show();
                    SetResultFunc(RESULT_CANCELED, -92, "상호인증 실패 (에러코드:" + errcode + ")");
                    return;
                }

                if (RECVBuf[5] == 'F' && RECVBuf[6] == '2') { //상호인증 2단계 완료 후
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 0xA0 F2 완료");

                    int k;
                    for (k = 0; k < 8 + 32; k++) { //리더기랜덤값2 저장, 리더기암호화랜덤값 저장
                        if (k < 8)
                            RND_R2[k] = RECVBuf[k + 7];
                        else
                            cENC_READER[k - 8] = RECVBuf[k + 7];
                    }

                    for (k = 0; k < 4; k++)
                        Bseed12[k] = (char) RND_R2[k];
                    for (k = 4; k < 8; k++)
                        Bseed12[k] = (char) RND_P2[k];
                    for (k = 8; k < 12; k++)
                        Bseed12[k] = (char) RND_R2[k - 4];
                    for (k = 12; k < 16; k++)
                        Bseed12[k] = (char) RND_P2[k - 12];

                    seedx.SeedEncRoundKey(Roundkey, MSK); //MSK로 ROUNDKEY 생성
                    seedx.encrypt(Bseed12, ASK, 16, Roundkey); //ASK 생성

                    Arrays.fill(Roundkey, 0x00);

                    int ii = 0, jj = 0;
                    char hexi = 0;
                    char[] str = new char[2];

                    for (ii = 0, jj = 0; ii < 32; ) {
                        str[0] = (char) cENC_READER[ii];
                        str[1] = (char) cENC_READER[ii + 1];

                        switch (str[0]) {
                            case '0':
                                hexi = 0;
                                break;
                            case '1':
                                hexi = 16;
                                break;
                            case '2':
                                hexi = 32;
                                break;
                            case '3':
                                hexi = 48;
                                break;
                            case '4':
                                hexi = 64;
                                break;
                            case '5':
                                hexi = 80;
                                break;
                            case '6':
                                hexi = 96;
                                break;
                            case '7':
                                hexi = 112;
                                break;
                            case '8':
                                hexi = 128;
                                break;
                            case '9':
                                hexi = 144;
                                break;
                            case 'A':
                            case 'a':
                                hexi = 160;
                                break;
                            case 'B':
                            case 'b':
                                hexi = 176;
                                break;
                            case 'C':
                            case 'c':
                                hexi = 192;
                                break;
                            case 'D':
                            case 'd':
                                hexi = 208;
                                break;
                            case 'E':
                            case 'e':
                                hexi = 224;
                                break;
                            case 'F':
                            case 'f':
                                hexi = 240;
                                break;
                        }

                        switch (str[1]) {
                            case '0':
                                hexi += 0;
                                break;
                            case '1':
                                hexi += 1;
                                break;
                            case '2':
                                hexi += 2;
                                break;
                            case '3':
                                hexi += 3;
                                break;
                            case '4':
                                hexi += 4;
                                break;
                            case '5':
                                hexi += 5;
                                break;
                            case '6':
                                hexi += 6;
                                break;
                            case '7':
                                hexi += 7;
                                break;
                            case '8':
                                hexi += 8;
                                break;
                            case '9':
                                hexi += 9;
                                break;
                            case 'A':
                            case 'a':
                                hexi += 10;
                                break;
                            case 'B':
                            case 'b':
                                hexi += 11;
                                break;
                            case 'C':
                            case 'c':
                                hexi += 12;
                                break;
                            case 'D':
                            case 'd':
                                hexi += 13;
                                break;
                            case 'E':
                            case 'e':
                                hexi += 14;
                                break;
                            case 'F':
                            case 'f':
                                hexi += 15;
                                break;
                        }
                        ENC_TEMP[jj++] = hexi;
                        ii += 2;

                        Arrays.fill(str, (char) 0x00);
                    }

                    seedx.SeedEncRoundKey(Roundkey, ASK); //ASK로 RoundKey 생성
                    seedx.decrypt(ENC_TEMP, cDEC_READER, 16, Roundkey);

                    Arrays.fill(Roundkey, 0x00);

                    try {
                        String t1 = new String(cDEC_READER, 0, 16);
                        String t2 = new String(RND_R2, 0, 8) + new String(RND_P2, 0, 8);

                        if (t1.equals(t2)) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 랜덤값 같습니다.");

                            System.arraycopy(RND_P2, 0, RND_FORM2, 0, 4);
                            System.arraycopy(RND_R2, 4, RND_FORM2, 4, 4);
                            System.arraycopy(RND_P2, 4, RND_FORM2, 8, 4);
                            System.arraycopy(RND_R2, 0, RND_FORM2, 12, 4);

                            seedx.SeedEncRoundKey(Roundkey, ASK);
                            seedx.encrypt(RND_FORM2, cENC_POS_temp, 16, Roundkey);

                            Arrays.fill(Roundkey, 0x20);
                            Arrays.fill(Roundkey, 0xFF);
                            Arrays.fill(Roundkey, 0x00);

                            cENC_POS = byteArrayToHexString(cENC_POS_temp);
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -93:상호인증 실패! 리더기 랜덤값 다릅니다.");
                            InsertChkvalid("N", "-93:상호인증 실패! 리더기 랜덤값 다릅니다.");
                            Toast.makeText(MainActivity.this, "-93:상호인증 실패! 리더기 랜덤값 다릅니다.", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -93, "상호인증 랜덤값 비교 실패");
                            return;
                        }
                    } catch (Exception e) {

                    }

                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 상호인증 3단계 진행중입니다.");
                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                    {
                        isrun = true;

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
                        func_code = 0xA0;

                        scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                        // Serial Port Check
                        int readState = scr.checkSerialPortOpened();
                        if (readState != RTN_COMM_OK) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                            Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                            return;
                        }

                        scr.clearTxBuffer();

                        writeBuffer = new char[39];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x00;
                        writeBuffer[3] = 0x34; //Length(2)
                        String sendstr = "F3" + cENC_POS;
                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 34);
                        writeBuffer[38] = xor_sum(writeBuffer, 38);

                        temp = new byte[39];
                        for (ii = 0; ii < 39; ii++) {
                            temp[ii] = (byte) writeBuffer[ii];
                        }
                        scr.sendMsg(temp, temp.length);
                        PopupOpen(MainActivity.this, "상호인증 3단계 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정

                        scr.clearRxBuffer();
                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                    {
                        mUart = new libUart();
                        isrun = true;

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
                        func_code = 0xA0;

                        writeBuffer = new char[39];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x00;
                        writeBuffer[3] = 0x34; //Length(2)
                        String sendstr = "F3" + cENC_POS;
                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 34);
                        writeBuffer[38] = xor_sum(writeBuffer, 38);

                        temp = new byte[39];
                        for (ii = 0; ii < 39; ii++) {
                            temp[ii] = (byte) writeBuffer[ii];
                        }
                        PopupOpen(MainActivity.this, "상호인증 3단계 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정

                        //LJY20201217 : 포트번호/통신속도 가변
                        mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                        if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                            mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                            mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                        }
                        mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                        mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else {
                        if (usbService != null) {
                            isrun = true;
                            handlerThread = new handler_thread(handler);
                            handlerThread.start();

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            func_code = 0xA0;

                            writeBuffer = new char[39];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x34; //Length(2)
                            String sendstr = "F3" + cENC_POS;
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 34);
                            writeBuffer[38] = xor_sum(writeBuffer, 38);

                            temp = new byte[39];
                            for (ii = 0; ii < 39; ii++) {
                                temp[ii] = (byte) writeBuffer[ii];
                            }
                            PopupOpen(MainActivity.this, "상호인증 3단계 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정
                            usbService.write(temp);
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                            InsertChkvalid("N", "-15:상호인증 실패! USB 서비스 불가!");
                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가");
                            return;
                        }
                    }
                } else if (RECVBuf[5] == 'F' && RECVBuf[6] == '1') {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 0xA0 F1 완료");

                    int k;
                    for (k = 0; k < 8; k++)
                        RND_R1[k] = RECVBuf[k + 7];
                    for (k = 0; k < 4; k++)
                        Bseed12[k] = (char) RND_R1[k];
                    for (k = 4; k < 8; k++)
                        Bseed12[k] = (char) RND_P1[k];
                    for (k = 8; k < 12; k++)
                        Bseed12[k] = (char) RND_P1[k - 8];
                    for (k = 12; k < 16; k++)
                        Bseed12[k] = (char) RND_R1[k - 8];

                    seedx.SeedEncRoundKey(Roundkey, CSN); //CSN으로 라운드키 생성
                    seedx.encrypt(Bseed12, MSK, 16, Roundkey); //MSK 생성

                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 상호인증 2단계 진행중입니다.");
                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                    {
                        isrun = true;

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
                        func_code = 0xA0;

                        scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                        // Serial Port Check
                        int readState = scr.checkSerialPortOpened();
                        if (readState != RTN_COMM_OK) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                            Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                            return;
                        }

                        scr.clearTxBuffer();

                        writeBuffer = new char[47];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x00;
                        writeBuffer[3] = 0x10; //Length(2)
                        Get_RandomKey(RND_P2, 8);
                        String sendstr = "F2" + new String(RND_P2, 0, RND_P2.length);
                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 10);
                        writeBuffer[14] = xor_sum(writeBuffer, 14);

                        temp = new byte[15];
                        for (int ii = 0; ii < 15; ii++) {
                            temp[ii] = (byte) writeBuffer[ii];
                        }
                        scr.sendMsg(temp, temp.length);
                        PopupOpen(MainActivity.this, "상호인증 2단계 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정

                        scr.clearRxBuffer();
                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                    {
                        mUart = new libUart();
                        isrun = true;

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
                        func_code = 0xA0;

                        writeBuffer = new char[47];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x00;
                        writeBuffer[3] = 0x10; //Length(2)
                        Get_RandomKey(RND_P2, 8);
                        String sendstr = "F2" + new String(RND_P2, 0, RND_P2.length);
                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 10);
                        writeBuffer[14] = xor_sum(writeBuffer, 14);

                        temp = new byte[15];
                        for (int ii = 0; ii < 15; ii++) {
                            temp[ii] = (byte) writeBuffer[ii];
                        }
                        PopupOpen(MainActivity.this, "상호인증 2단계 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정

                        //LJY20201217 : 포트번호/통신속도 가변
                        mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                        if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                            mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                            mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                        }
                        mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                        mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else {
                        if (usbService != null) {
                            isrun = true;

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            func_code = 0xA0;

                            writeBuffer = new char[47];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x10; //Length(2)
                            Get_RandomKey(RND_P2, 8);
                            String sendstr = "F2" + new String(RND_P2, 0, RND_P2.length);
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 10);
                            writeBuffer[14] = xor_sum(writeBuffer, 14);

                            temp = new byte[15];
                            for (int ii = 0; ii < 15; ii++) {
                                temp[ii] = (byte) writeBuffer[ii];
                            }
                            PopupOpen(MainActivity.this, "상호인증 2단계 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정
                            usbService.write(temp);
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                            InsertChkvalid("N", "-15:상호인증 실패! USB 서비스 불가!");
                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가");
                            return;
                        }
                    }
                } else if (RECVBuf[5] == 'F' && RECVBuf[6] == '3') {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 0xA0 F3 완료");

                    if (RECVBuf[7] == 0x30) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드리더 상호인증 성공! 에러코드 : " + String.format("%02X", RECVBuf[7] & 0xff));
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 카드리더 상호인증 실패! 에러코드 : " + String.format("%02X", RECVBuf[7] & 0xff));
                        InsertChkvalid("N", "카드리더 상호인증 실패! 에러코드 : " + String.format("%02X", RECVBuf[7] & 0xff));
                        SetResultFunc(RESULT_CANCELED, -92, "상호인증 실패 (에러코드:" + String.format("%02X", RECVBuf[7] & 0xff) + ")");
                        return;
                    }

                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 무결성검증 진행중입니다.");
                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                    {
                        isrun = true;

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
                        func_code = 0xA1;

                        scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                        // Serial Port Check
                        int readState = scr.checkSerialPortOpened();
                        if (readState != RTN_COMM_OK) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                            Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                            return;
                        }

                        scr.clearTxBuffer();

                        writeBuffer = new char[5];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x00;
                        writeBuffer[3] = 0x00; //Length(2)
                        writeBuffer[4] = xor_sum(writeBuffer, 4);

                        temp = new byte[5];
                        for (int i = 0; i < 5; i++) {
                            temp[i] = (byte) writeBuffer[i];
                        }
                        scr.sendMsg(temp, temp.length);
                        PopupOpen(MainActivity.this, "무결성검증 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정

                        scr.clearRxBuffer();
                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                    {
                        mUart = new libUart();
                        isrun = true;

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
                        func_code = 0xA1;

                        writeBuffer = new char[5];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x00;
                        writeBuffer[3] = 0x00; //Length(2)
                        writeBuffer[4] = xor_sum(writeBuffer, 4);

                        temp = new byte[5];
                        for (int i = 0; i < 5; i++) {
                            temp[i] = (byte) writeBuffer[i];
                        }
                        PopupOpen(MainActivity.this, "무결성검증 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정

                        //LJY20201217 : 포트번호/통신속도 가변
                        mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                        if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                            mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                            mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                        }
                        mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                        mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                        handlerThread = new handler_thread(handler);
                        handlerThread.start();
                    } else {
                        if (usbService != null) {
                            isrun = true;

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            func_code = 0xA1;

                            writeBuffer = new char[5];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x00; //Length(2)
                            writeBuffer[4] = xor_sum(writeBuffer, 4);

                            temp = new byte[5];
                            for (int i = 0; i < 5; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpen(MainActivity.this, "무결성검증 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정
                            usbService.write(temp);
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                            InsertChkvalid("N", "-15:상호인증 실패! USB 서비스 불가!");
                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가");
                            return;
                        }
                    }
                }
            } else if (func_code == 0x31) {
                int k;
                for (k = 0; k < 10; k++)
                    ReaderSN[k] = RECVBuf[k + 4];
                for (k = 0; k < 16; k++)
                    CSN[k] = RECVBuf[k + 14];
                for (k = 0; k < 16; k++)
                    HWNUM[k] = RECVBuf[k + 30];

                if (isGetReader) { //LJY20221004 : 리더기 정보 가져오기
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 정보 가져오기 성공!");
                    Toast.makeText(MainActivity.this, "리더기 정보 가져오기 성공!", Toast.LENGTH_SHORT).show();
                    SetResultFunc(RESULT_OK, 1, new String(RECVBuf));
                    return;
                } else
                    isGetReader = false;

                //20200318 : 리더기일련번호
                mSharedManager.getPreferences().edit().putString("READERSN", new String(ReaderSN)).commit();

                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 상호인증 1단계 진행중입니다.");
                if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                {
                    isrun = true;

                    Arrays.fill(RECVBuf, (char) 0x00);
                    Arrays.fill(encdata, (char) 0x00);
                    Arrays.fill(icdata, (char) 0x00);

                    initSerial();
                    func_code = 0xA0;

                    scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                    // Serial Port Check
                    int readState = scr.checkSerialPortOpened();
                    if (readState != RTN_COMM_OK) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                        Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                        SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                        return;
                    }

                    scr.clearTxBuffer();

                    writeBuffer = new char[15];
                    writeBuffer[0] = 0x02; //Header ID
                    writeBuffer[1] = func_code; //Command ID
                    writeBuffer[2] = 0x00;
                    writeBuffer[3] = 0x10; //Length(2)
                    Get_RandomKey(RND_P1, 8);
                    String sendstr = "F1" + new String(RND_P1, 0, RND_P1.length);
                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 10);
                    writeBuffer[14] = xor_sum(writeBuffer, 14);

                    temp = new byte[15];
                    for (int ii = 0; ii < 15; ii++) {
                        temp[ii] = (byte) writeBuffer[ii];
                    }
                    scr.sendMsg(temp, temp.length);
                    PopupOpen(MainActivity.this, "상호인증 1단계 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정

                    scr.clearRxBuffer();
                    handlerThread = new handler_thread(handler);
                    handlerThread.start();
                } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                {
                    mUart = new libUart();
                    isrun = true;

                    Arrays.fill(RECVBuf, (char) 0x00);
                    Arrays.fill(encdata, (char) 0x00);
                    Arrays.fill(icdata, (char) 0x00);

                    initSerial();
                    func_code = 0xA0;

                    writeBuffer = new char[15];
                    writeBuffer[0] = 0x02; //Header ID
                    writeBuffer[1] = func_code; //Command ID
                    writeBuffer[2] = 0x00;
                    writeBuffer[3] = 0x10; //Length(2)
                    Get_RandomKey(RND_P1, 8);
                    String sendstr = "F1" + new String(RND_P1, 0, RND_P1.length);
                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 10);
                    writeBuffer[14] = xor_sum(writeBuffer, 14);

                    temp = new byte[15];
                    for (int ii = 0; ii < 15; ii++) {
                        temp[ii] = (byte) writeBuffer[ii];
                    }
                    PopupOpen(MainActivity.this, "상호인증 1단계 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정

                    //LJY20201217 : 포트번호/통신속도 가변
                    mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                    if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                        mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                        mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                    }
                    mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                    mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                    handlerThread = new handler_thread(handler);
                    handlerThread.start();
                } else {
                    if (usbService != null) {
                        isrun = true;

                        handlerThread = new handler_thread(handler);
                        handlerThread.start();

                        Arrays.fill(RECVBuf, (char) 0x00);
                        Arrays.fill(encdata, (char) 0x00);
                        Arrays.fill(icdata, (char) 0x00);

                        initSerial();
                        func_code = 0xA0;

                        writeBuffer = new char[15];
                        writeBuffer[0] = 0x02; //Header ID
                        writeBuffer[1] = func_code; //Command ID
                        writeBuffer[2] = 0x00;
                        writeBuffer[3] = 0x10; //Length(2)
                        Get_RandomKey(RND_P1, 8);
                        String sendstr = "F1" + new String(RND_P1, 0, RND_P1.length);
                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 10);
                        writeBuffer[14] = xor_sum(writeBuffer, 14);

                        temp = new byte[15];
                        for (int ii = 0; ii < 15; ii++) {
                            temp[ii] = (byte) writeBuffer[ii];
                        }
                        PopupOpen(MainActivity.this, "상호인증 1단계 진행중입니다. (리더기 연결 중)"); //LJY20220908 : 문구 수정
                        usbService.write(temp);
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                        InsertChkvalid("N", "-15:상호인증 실패! USB 서비스 불가!");
                        SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가");
                        return;
                    }
                }
            }
        }
    };

    public void InsertChkvalid(String ResultCode, String Reason) {
        if (ResultCode.equals("N")) {
            mSharedManager.getPreferences().edit().putString("HWNUM", "################").commit(); //LJY20220905 : 디폴드값 설정
            mSharedManager.getPreferences().edit().putString("READERSN", "          ").commit();
        } else {
            if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2 || mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //OKPOS
            {
                isStatus = true;
            }
            mSharedManager.getPreferences().edit().putString("HWNUM", new String(HWNUM)).commit();
            mSharedManager.getPreferences().edit().putString("READERSN", new String(ReaderSN)).commit();
        }

        Date date = new Date(System.currentTimeMillis());
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        dbHelper.insert(simpleDateFormat.format(date), ResultCode, Reason);
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data); //막지우지말것..Fragment에 영향

        SharedManager.LogDebug(bLogUse, "debugjy", "requestCode : " + requestCode);
        SharedManager.LogDebug(bLogUse, "debugjy", "resultCode : " + resultCode);
        SharedManager.LogDebug(bLogUse, "debugjy", "strDealgb : " + strDealgb);
        SharedManager.LogDebug(bLogUse, "debugjy", "strWcc : " + strWcc);

        if ((strDealgb != null && (strDealgb.equals("0320") || strDealgb.equals("0540"))) && (strWcc != null && strWcc.equals("L")) && !strTxt.equals("PRO")) //LJY20200902 : PAYPRO 서명연동
        {
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 멤버쉽 바코드 결과");
            IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);

            if (result != null) {
                if (result.getContents() == null) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드 리딩 취소");
                    PopupClose();
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -6:바코드 리딩 취소 하셨습니다.");
                    SetResultFunc(RESULT_CANCELED, -6, "바코드 리딩 취소 하셨습니다.");
                    return;
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드 리딩 성공");
                    Toast.makeText(MainActivity.this, "Barcode : " + result.getContents(), Toast.LENGTH_LONG).show();
                    String space = "                                                                                                                                                      ";

                    if (result.getContents().indexOf("=") == -1)
                        strCashnum = result.getContents() + "=";

                    PosClient posClient = new PosClient();
                    if (strDealgb.equals("0320")) {
                        sendBuff = ("0343" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + mTax + mBongsa + new SimpleDateFormat("YYYYMMddHHmmss").format(new Date()) + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mMoney.substring(3, 12) + mHalbu + "            " + "      " + mUninum + mFiller + " ").getBytes();
                    } else {
                        if (strDealtp.equals("10")) strDealtp = "30";

                        sendBuff = ("0343" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + mTax + mBongsa + new SimpleDateFormat("YYYYMMddHHmmss").format(new Date()) + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mMoney.substring(3, 12) + mHalbu + mApprno.substring(0, 12) + mApprdate.substring(0, 6) + mUninum + mFiller + " ").getBytes();
                    }

                    if (bRelease)
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                    else
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                    mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                    if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                        System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                        recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                    } else
                        recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                    PopupClose();
                    InsertRecv(recvBuff);
                }
            } else {
                super.onActivityResult(requestCode, resultCode, data);

                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드 데이터 없음");
                PopupClose();
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -6:바코드 데이터 없습니다.");
                SetResultFunc(RESULT_CANCELED, -6, "바코드 데이터 없습니다.");
            }
        } else if ((strDealgb != null && (strDealgb.equals("0300") || strDealgb.equals("0520"))) && (strWcc != null && strWcc.equals("L")) && !strTxt.equals("PRO")) //LJY20200902 : PAYPRO 서명연동
        {
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 포인트 바코드 결과");
            IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);

            if (result != null) {
                if (result.getContents() == null) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드 리딩 취소");
                    PopupClose();
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -6:바코드 리딩 취소 하셨습니다.");
                    SetResultFunc(RESULT_CANCELED, -6, "바코드 리딩 취소 하셨습니다.");
                    return;
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드 리딩 성공");
                    Toast.makeText(MainActivity.this, "Barcode : " + result.getContents(), Toast.LENGTH_LONG).show();
                    String space = "                                                                                                                                                      ";

                    if (result.getContents().indexOf("=") == -1)
                        strCashnum = result.getContents() + "=";

                    PosClient posClient = new PosClient();
                    if (strDealgb.equals("0300")) {
                        if (mTxt.equals("ZRP"))
                            sendBuff = ("0437" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "L" + strCashnum + space.substring(0, 127 - strCashnum.length()) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                        else
                            sendBuff = ("0437" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                    } else {
                        if (strDealtp.equals("10")) strDealtp = "30";

                        if (mTxt.equals("ZRP"))
                            sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L" + strCashnum + space.substring(0, 127 - strCashnum.length()) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                        else
                            sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                    }

                    if (bRelease)
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                    else
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                    mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                    if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                        System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                        recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                    } else
                        recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                    PopupClose();
                    InsertRecv(recvBuff);
                }
            } else {
                super.onActivityResult(requestCode, resultCode, data);

                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 바코드 데이터 없음");
                PopupClose();
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -6:바코드 데이터 없습니다.");
                SetResultFunc(RESULT_CANCELED, -6, "바코드 데이터 없습니다.");
            }
        } else if (requestCode == 1) { //서명패드 결과
            if (resultCode == RESULT_OK) { //SignPad의 RESULT_OK
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서명패드 OK 클릭");
                PopupClose();

                //LJY20200902 : PAYPRO 서명연동
                if ((strDealgb.equals("0300") || strDealgb.equals("0520") || strDealgb.equals("0521") || strDealgb.equals("0561")) && strWcc.equals("L") && strTxt.equals("PRO")) {     //OSM20241011 : PAYPRO 및 네이버페이 서명 망상취소
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 서명 결제");

                    String space = "                                                                                                                                                      ";

                    PosClient posClient = new PosClient();
                    temp = new byte[4096];
                    if (strDealgb.equals("0300")) {
                        if (strCashnum.length() == 24 && strCashnum.substring(0, 6).equals("281006")) //카카오페이
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 카카오페이 거래입니다.");
                        } else if (strCashnum.length() == 22 && strCashnum.substring(0, 2).equals("17")) //SSGPAY
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO SSGPAY 거래입니다.");
                        } else if (strCashnum.length() == 22 && strCashnum.substring(0, 4).equals("8710")) //LPAY
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO LPAY 거래입니다.");
                        } else if (strCashnum.length() == 21) //앱카드
                        {
                            if (strCashnum.substring(0, 6).equals("941083")) //LJY20230130 : 서울페이 서명 무시
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 서울페이 거래입니다.");
                            else
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 앱카드 거래입니다.");
                        } else if (strCashnum.length() >= 100 && strCashnum.substring(0, 7).equals("hQVDUFY")) //비씨은련QR
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 거래입니다.");

                            NiceUniQr niceuniqr = new NiceUniQr(); //LJY20220905 : JAR로 변경

                            //LJY20220905 : byte > char 변경
                            char[] Output_AID_FIRST = new char[1024];
                            char[] Output_PAN = new char[1024];
                            char[] Output_EMV_NICE = new char[1024];
                            char[] Output_TLV = new char[1024];
                            char[] Output_UPLAN = new char[1024];

                            Arrays.fill(Output_AID_FIRST, (char) 0x00);
                            Arrays.fill(Output_PAN, (char) 0x00);
                            Arrays.fill(Output_EMV_NICE, (char) 0x00);
                            Arrays.fill(Output_TLV, (char) 0x00);
                            Arrays.fill(Output_UPLAN, (char) 0x00);

//                                    int ret = niceuniqr.Uni_QR(strCashnum.getBytes(), Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);
                            int ret = niceuniqr.Uni_QR2(strCashnum, Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);

                            String tvaid = "", tvpan = "", tvemv = "", tvtlv = "", tvuplancode = "";

                            if (ret == 1) {
                                for (int i = 0; i < 1024; i++) {
                                    if (Output_AID_FIRST[i] == 0x00) {
                                        tvaid = new String(Output_AID_FIRST).substring(0, i);
                                        break;
                                    }
                                }
                                for (int i = 0; i < 1024; i++) {
                                    if (Output_PAN[i] == 0x00) {
                                        tvpan = new String(Output_PAN).substring(0, i);
                                        break;
                                    }
                                }
                                for (int i = 0; i < 1024; i++) {
                                    if (Output_EMV_NICE[i] == 0x00) {
                                        tvemv = new String(Output_EMV_NICE).substring(0, i);
                                        break;
                                    }
                                }
                                for (int i = 0; i < 1024; i++) {
                                    if (Output_TLV[i] == 0x00) {
                                        tvtlv = new String(Output_TLV).substring(0, i);
                                        break;
                                    }
                                }
                                for (int i = 0; i < 1024; i++) {
                                    if (Output_UPLAN[i] == 0x00) {
                                        tvuplancode = new String(Output_UPLAN).substring(0, i);
                                        break;
                                    }
                                }

                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 변환 성공!");

                                if (tvaid.equals("A")) //은련QR
                                {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 은련QR 거래!");

                                    mTxt = "CUP";
                                    sendBuff = ("1762" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                                } else //비씨QR
                                {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨QR 거래!");

                                    mTxt = "HPS";
                                    sendBuff = ("1762" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                                }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -13 : 비씨은련QR 변환 실패!");
                                SetResultFunc(RESULT_CANCELED, -13, "POS전문오류 - 비씨은련QR 변환 실패!");
                                return;
                            }

                            System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                            System.arraycopy(data.getByteArrayExtra("SIGN"), 2, temp, sendBuff.length, data.getByteArrayExtra("SIGN").length - 2);
                            System.arraycopy(tvemv.getBytes(), 0, temp, sendBuff.length + data.getByteArrayExtra("SIGN").length - 2, tvemv.length());

                            if (bRelease)
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                            else
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                            } else
                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
                            try {
                                if (new String(recvBuff, "EUC-KR").equals("-1")) {
                                } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                                } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                                } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                                } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                                } else {
//                                            if (bRelease)
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 68) + "**********" + (new String(recvBuff, "EUC-KR")).substring(78, recvBuff.length - 78));
//                                            else
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));

                                    System.arraycopy("PRO".getBytes(), 0, recvBuff, 4, 3);
                                    if (tvaid.equals("A")) //은련QR
                                        System.arraycopy("UPQ".getBytes(), 0, recvBuff, 35, 3);
                                    else if (tvaid.equals("N")) //LJY20220905 : 네이버페이
                                        System.arraycopy("NHQ".getBytes(), 0, recvBuff, 35, 3);
                                    else
                                        System.arraycopy("BCQ".getBytes(), 0, recvBuff, 35, 3);
                                }
                                InsertRecv(recvBuff);
                            } catch (UnsupportedEncodingException e) {
                                e.printStackTrace();
                            }
                            //InsertRecv(recvBuff);
                            return;
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 기타 거래입니다.");
                        }

                        if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                        sendBuff = ("1505" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                    } else {
                        if (strDealtp.equals("10")) strDealtp = "30";

                        if (strCashnum.length() == 24 && strCashnum.substring(0, 6).equals("281006")) //카카오페이
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 카카오페이 거래입니다.");
                            //서명도 필요
                            if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                            sendBuff = ("1505" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        } else if (strCashnum.length() == 22 && strCashnum.substring(0, 2).equals("17")) //SSGPAY
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO SSGPAY 거래입니다.");
                            //서명도 필요
                            if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                            sendBuff = ("1505" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        } else if (strCashnum.length() == 24 && strCashnum.substring(0, 4).equals("8710")) //LPAY
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO LPAY 거래입니다.");
                            //서명도 필요
                            if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                            sendBuff = ("1505" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        } else if (strCashnum.length() == 21) //앱카드
                        {
                            if (strCashnum.substring(0, 6).equals("941083")) { //LJY20230130 : 서울페이 서명 무시
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 서울페이 거래입니다.");
                                if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                                sendBuff = ("1505" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                            } else
//                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 앱카드 거래입니다.");
                                if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                            sendBuff = ("1505" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        } else if (strCashnum.length() >= 100 && strCashnum.substring(0, 7).equals("hQVDUFY")) //비씨은련QR
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 거래입니다.");

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 거래입니다.");

                            NiceUniQr niceuniqr = new NiceUniQr(); //LJY20220905 : JAR로 변경

                            //LJY20220905 : byte > char 변경
                            char[] Output_AID_FIRST = new char[1024];
                            char[] Output_PAN = new char[1024];
                            char[] Output_EMV_NICE = new char[1024];
                            char[] Output_TLV = new char[1024];
                            char[] Output_UPLAN = new char[1024];

                            Arrays.fill(Output_AID_FIRST, (char) 0x00);
                            Arrays.fill(Output_PAN, (char) 0x00);
                            Arrays.fill(Output_EMV_NICE, (char) 0x00);
                            Arrays.fill(Output_TLV, (char) 0x00);
                            Arrays.fill(Output_UPLAN, (char) 0x00);

//                                    int ret = niceuniqr.Uni_QR(strCashnum.getBytes(), Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);
                            int ret = niceuniqr.Uni_QR2(strCashnum, Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);

                            String tvaid = "", tvpan = "", tvemv = "", tvtlv = "", tvuplancode = "";

                            if (ret == 1) {
                                for (int i = 0; i < 1024; i++) {
                                    if (Output_AID_FIRST[i] == 0x00) {
                                        tvaid = new String(Output_AID_FIRST).substring(0, i);
                                        break;
                                    }
                                }
                                for (int i = 0; i < 1024; i++) {
                                    if (Output_PAN[i] == 0x00) {
                                        tvpan = new String(Output_PAN).substring(0, i);
                                        break;
                                    }
                                }
                                for (int i = 0; i < 1024; i++) {
                                    if (Output_EMV_NICE[i] == 0x00) {
                                        tvemv = new String(Output_EMV_NICE).substring(0, i);
                                        break;
                                    }
                                }
                                for (int i = 0; i < 1024; i++) {
                                    if (Output_TLV[i] == 0x00) {
                                        tvtlv = new String(Output_TLV).substring(0, i);
                                        break;
                                    }
                                }
                                for (int i = 0; i < 1024; i++) {
                                    if (Output_UPLAN[i] == 0x00) {
                                        tvuplancode = new String(Output_UPLAN).substring(0, i);
                                        break;
                                    }
                                }

                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 변환 성공!");

                                if (tvaid.equals("A")) //은련QR
                                {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 은련QR 거래!");

                                    mTxt = "CUP";
                                    sendBuff = ("1762" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                                } else //비씨QR
                                {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨QR 거래!");

                                    mTxt = "HPS";
                                    sendBuff = ("1762" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                                }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -13 : 비씨은련QR 변환 실패!");
                                SetResultFunc(RESULT_CANCELED, -13, "POS전문오류 - 비씨은련QR 변환 실패!");
                                return;
                            }

                            System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                            System.arraycopy(data.getByteArrayExtra("SIGN"), 2, temp, sendBuff.length, data.getByteArrayExtra("SIGN").length - 2);
                            System.arraycopy(tvemv.getBytes(), 0, temp, sendBuff.length + data.getByteArrayExtra("SIGN").length - 2, tvemv.length());

                            if (bRelease)
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                            else
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                            if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                                recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                            } else
                                recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
                            try {
                                if (new String(recvBuff, "EUC-KR").equals("-1")) {
                                } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                                } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                                } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                                } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                                } else {
//                                            if (bRelease)
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 68) + "**********" + (new String(recvBuff, "EUC-KR")).substring(78, recvBuff.length - 78));
//                                            else
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));

                                    System.arraycopy("PRO".getBytes(), 0, recvBuff, 4, 3);
                                    if (tvaid.equals("A")) //은련QR
                                        System.arraycopy("UPQ".getBytes(), 0, recvBuff, 35, 3);
                                    else if (tvaid.equals("N")) //LJY20220905 : 네이버페이
                                        System.arraycopy("NHQ".getBytes(), 0, recvBuff, 35, 3);
                                    else
                                        System.arraycopy("BCQ".getBytes(), 0, recvBuff, 35, 3);
                                }
                                InsertRecv(recvBuff);
                            } catch (UnsupportedEncodingException e) {
                                e.printStackTrace();
                            }
                            //InsertRecv(recvBuff);
                            return;
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 기타 거래입니다.");
                            if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                            sendBuff = ("1505" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        }
                    }

                    System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                    System.arraycopy(data.getByteArrayExtra("SIGN"), 2, temp, sendBuff.length, data.getByteArrayExtra("SIGN").length - 2);
                    if (bRelease)
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                    else
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                    mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                    if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                        System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                        recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                    } else
                        recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
//                    PopupClose();
                    InsertRecv(recvBuff);
                } else if (func_code == 0x6E) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 서명 결제");

                    String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    PopupOpen(MainActivity.this, "FALLBACK VAN 승인 중입니다.");

                    PosClient posClient = new PosClient();
                    temp = new byte[4096];
                    if (strDealgb.equals("0300")) { //20200129 : 포인트거래
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 포인트승인");
                        sendBuff = ("1505" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                    } else if (strDealgb.equals("0520")) //20200129 : 포인트거래
                    {
                        if (strDealtp.equals("10")) strDealtp = "30";

                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 포인트취소");
                        sendBuff = ("1505" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                    } else if (strDealgb.equals("0200")) {
                        if (strDealtp.equals("UP")) //은련
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련승인");
                            sendBuff = ("1505" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        } else {
                            if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - TAX or DCA");
                                    System.arraycopy("1505".getBytes(), 0, sendBuff, 0, 4);
                                    System.arraycopy("F".getBytes(), 0, sendBuff, 55, 1);
                                    System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
                                    System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                    System.arraycopy(("Y10801" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - DCC");
                                    signBuff = data.getByteArrayExtra("SIGN");  //20200313 : DCC 개발
                                    sendBuff = ("1505" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                                }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 신용승인");
                                sendBuff = ("1505" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                            }
                        }
                    } else {
                        if (strDealtp.equals("UP")) //은련
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련취소");
                            sendBuff = ("1505" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 신용취소");
                            sendBuff = ("1505" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        }
                    }
                    System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                    System.arraycopy(data.getByteArrayExtra("SIGN"), 2, temp, sendBuff.length, data.getByteArrayExtra("SIGN").length - 2);
                    if (bRelease)
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                    else
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                    mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                    if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                        System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                        recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                    } else
                        recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
                    PopupClose();
                    InsertRecv(recvBuff);
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 서명 결제");

                    String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    PopupOpen(MainActivity.this, "IC VAN 승인 중입니다.");

                    PosClient posClient = new PosClient();
                    temp = new byte[4096];
                    if (strDealgb.equals("0300")) { //20200129 : 포인트거래
                        if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 포인트승인(동반위)");
                            sendBuff = ("1762" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        }
                        else
                        if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 포인트승인");
                            sendBuff = ("1762" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 포인트승인");
                            sendBuff = ("1505" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        }
                    } else if (strDealgb.equals("0520")) //20200129 : 포인트거래
                    {
                        if (strDealtp.equals("10")) strDealtp = "30";

                        if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 포인트취소(동반위)");
                            sendBuff = ("1762" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        }
                        else
                        if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 포인트취소");
                            sendBuff = ("1762" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 포인트취소");
                            sendBuff = ("1505" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                        }
                    } else if (strDealgb.equals("0200")) {
                        if (strDealtp.equals("UP")) //은련
                        {
                            if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련승인(동반위)");
                                sendBuff = ("1762" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                            }
                            else
                            if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련승인");
                                sendBuff = ("1762" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련승인");
                                sendBuff = ("1505" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                            }
                        } else {
                            if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                    if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - TAX or DCA(동반위)");
                                        System.arraycopy("1762".getBytes(), 0, sendBuff, 0, 4);
                                        System.arraycopy("K".getBytes(), 0, sendBuff, 55, 1);
                                        System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
                                        System.arraycopy(("Y10801" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - DCC(동반위)");
                                        signBuff = data.getByteArrayExtra("SIGN"); //20200313 : DCC 개발
                                        sendBuff = ("1762" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                                    }
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 신용승인(동반위)");
                                    sendBuff = ("1762" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                                }
                            }
                            else
                            if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                    if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - TAX or DCA");
                                        System.arraycopy("1762".getBytes(), 0, sendBuff, 0, 4);
                                        System.arraycopy("I".getBytes(), 0, sendBuff, 55, 1);
                                        System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
//                                        System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                        System.arraycopy(("Y10801" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - DCC");
                                        signBuff = data.getByteArrayExtra("SIGN"); //20200313 : DCC 개발
                                        sendBuff = ("1762" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                                    }
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 신용승인");
                                    sendBuff = ("1762" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                                }
                            } else {
                                if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                    if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - TAX or DCA");
                                        System.arraycopy("1505".getBytes(), 0, sendBuff, 0, 4);
                                        System.arraycopy("A".getBytes(), 0, sendBuff, 55, 1);
                                        System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
//                                        System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                        System.arraycopy(("Y10801" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - DCC");
                                        signBuff = data.getByteArrayExtra("SIGN"); //20200313 : DCC 개발
                                        sendBuff = ("1505" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                                    }
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 신용승인");
                                    sendBuff = ("1505" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                                }
                            }
                        }
                    } else {
                        if (strDealtp.equals("UP") == true) //은련
                        {
                            if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련취소(동반위)");
                                sendBuff = ("1762" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                            }
                            else
                            if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련취소");
                                sendBuff = ("1762" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련취소");
                                sendBuff = ("1505" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                            }
                        } else {
                            if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 신용취소(동반위)");
                                sendBuff = ("1762" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                            }
                            else
                            if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 신용취소");
                                sendBuff = ("1762" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 신용취소");
                                sendBuff = ("1505" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y10801" + mCatid + "                       ").getBytes();
                            }
                        }
                    }
                    System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                    System.arraycopy(data.getByteArrayExtra("SIGN"), 2, temp, sendBuff.length, data.getByteArrayExtra("SIGN").length - 2);
                    if (Paygb[0] == 'I' || (Paygb[0] == 'R' && CardBrand[0] == 'K') || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) //LJY20230818 //LJY20200713 : 동반위 JUST TOUCH
                        System.arraycopy(new String(icdata).getBytes(), 0, temp, sendBuff.length + data.getByteArrayExtra("SIGN").length - 2, new String(icdata).length());
                    if (bRelease)
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                    else
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                    mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                    if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                        System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                        recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                    } else
                        recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
                    PopupClose();
                    InsertRecv(recvBuff);
                }
            } else { //SignPad의 RESULT_CANCEL
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서명패드 취소 클릭");
                PopupClose();

                if (mSharedManager.getPreferences().getBoolean("Nosign", false)) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서명패드 오류시 결제됩니다.");

                    if (func_code == 0x6E) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서명패드 오류시 FALLBACK 결제");

                        String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        PopupOpen(MainActivity.this, "FALLBACK VAN 승인 중입니다.");

                        PosClient posClient = new PosClient();
                        if (strDealgb.equals("0300")) { //20200129 : 포인트거래
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 포인트승인");
                            sendBuff = ("0437" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                        } else if (strDealgb.equals("0520")) //20200129 : 포인트거래
                        {
                            if (strDealtp.equals("10")) strDealtp = "30";

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 포인트취소");
                            sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                        } else if (strDealgb.equals("0200")) {
                            if (strDealtp.equals("UP")) //은련
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련승인");
                                sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                            } else {
                                if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                    if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - TAX or DCA");
                                        System.arraycopy("0437".getBytes(), 0, sendBuff, 0, 4);
                                        System.arraycopy("F".getBytes(), 0, sendBuff, 55, 1);
                                        System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
                                        System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
//                                        System.arraycopy(("Y10801" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - DCC");
                                        sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                                    }
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 신용승인");
                                    sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                                }
                            }
                        } else {
                            if (strDealtp.equals("UP")) //은련
                            {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련취소");
                                sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 신용취소");
                                sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                            }
                        }
                        if (bRelease)
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                        else
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));

                        mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                        if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                            System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                            recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                        } else
                            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                        PopupClose();
                        InsertRecv(recvBuff);
                    } else if (func_code == 0x6C) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 서명패드 오류시 IC 결제");

                        String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        PopupOpen(MainActivity.this, "IC VAN 승인 중입니다.");

                        PosClient posClient = new PosClient();
                        if (strDealgb.equals("0300")) { //20200129 : 포인트거래
                            if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 포인트승인(동반위)");
                                sendBuff = ("0694" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                            }
                            else
                            if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 포인트승인");
                                sendBuff = ("0694" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 포인트승인");
                                sendBuff = ("0437" + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                            }
                        } else if (strDealgb.equals("0520")) //20200129 : 포인트거래
                        {
                            if (strDealtp.equals("10")) strDealtp = "30";

                            if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 포인트취소(동반위)");
                                sendBuff = ("0694" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                            }
                            else
                            if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 포인트취소");
                                sendBuff = ("0694" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 포인트취소");
                                sendBuff = ("0437" + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                            }
                        } else if (strDealgb.equals("0200")) {
                            if (strDealtp.equals("UP")) //은련
                            {
                                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련승인(동반위)");
                                    sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                }
                                else
                                if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련승인");
                                    sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련승인");
                                    sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                }
                            } else {
                                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                    if (strDealtp.equals("DC")) {
                                        if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - TAX or DCA(동반위)");
                                            System.arraycopy("0694".getBytes(), 0, sendBuff, 0, 4);
                                            System.arraycopy("K".getBytes(), 0, sendBuff, 55, 1);
                                            System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
                                            System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - DCC(동반위)");
                                            sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                        }
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 신용승인(동반위)");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    }
                                }
                                else
                                if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                        if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - TAX or DCA");
                                            System.arraycopy("0694".getBytes(), 0, sendBuff, 0, 4);
                                            System.arraycopy("I".getBytes(), 0, sendBuff, 55, 1);
                                            System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
//                                            System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
                                            System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
//                                            System.arraycopy(("Y10801" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - DCC");
                                            sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                        }
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 신용승인");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    }
                                } else {
                                    if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                                        if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - TAX or DCA");
                                            System.arraycopy("0437".getBytes(), 0, sendBuff, 0, 4);
                                            System.arraycopy("A".getBytes(), 0, sendBuff, 55, 1);
                                            System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
//                                            System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                            System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
//                                            System.arraycopy(("Y10801" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - DCC");
                                            sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                        }
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 신용승인");
                                        sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                    }
                                }
                            }
                        } else {
                            if (strDealtp.equals("UP") == true) //은련
                            {
                                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련취소(동반위)");
                                    sendBuff = ("0694" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                }
                                else
                                if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련취소");
                                    sendBuff = ("0694" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련취소");
                                    sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                }
                            } else {
                                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 신용취소(동반위)");
                                    sendBuff = ("0694" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                }
                                else
                                if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 신용취소");
                                    sendBuff = ("0694" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                } else {
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 신용취소");
                                    sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                }
                            }
                        }
                        if (bRelease)
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                        else
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                        mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                        if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                            System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                            recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                        } else
                            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                        PopupClose();
                        InsertRecv(recvBuff);
                    }
                } else { //서명 취소 버튼 클릭
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -6:서명 취소 하셨습니다.");
                    SetResultFunc(RESULT_CANCELED, -6, "서명 취소 하셨습니다.");
                    return;
                }
            }
        } else if (requestCode == 2) //은련 PIN
        {
            if (resultCode == RESULT_OK) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 은련PIN OK 버튼 클릭");
                PopupClose();

                bEncPin = new byte[16];
                SignEnc nicesign = new SignEnc();
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PIN : " + data.getStringExtra("RESULT"));

                if (data.getStringExtra("RESULT").length() > 0) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PIN LENGTH OK!!");
                    int ret = nicesign.MakePinBlock("0000000000000000".getBytes(), data.getStringExtra("RESULT").getBytes(), bEncPin);

                    if (ret > 0) {
                        EncPin = new String(bEncPin);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] ENC PIN : " + EncPin);

                        if (func_code == 0x6C) {
                            if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000))) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련 서명");

                                //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                if (strSigndata.length() > 0)
                                    PayWithSign(strSigndata);
                                else
                                    //LJY20220427 : 멀티패드 서명 연동
                                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                        if (usbService != null) { // if UsbService was correctly binded, Send data
                                            isrun = true;

                                            handlerThread = new handler_thread(handler);
                                            handlerThread.start();

                                            Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                            initSerial();
                                            //isMultipad = true;
                                            //btnDisable();
                                            isSign = true;

                                            writeBuffer = new char[53];
                                            writeBuffer[0] = 0x02; //Header ID
                                            writeBuffer[1] = 0x42; //Command ID
                                            writeBuffer[2] = 0x00;
                                            writeBuffer[3] = 0x48; //Length(2)
                                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                                            temp = new byte[53];
                                            for (int i = 0; i < 53; i++) {
                                                temp[i] = (byte) writeBuffer[i];
                                            }
                                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                            usbService.write(temp);
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                            Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                        //LJY20220427 : 재시작 로직 추가
//                                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                        Context currentActivity = getApplication();
//                                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                        currentActivity.startActivity(restartIntent);
//                                        System.exit(0);

                                            return;
                                        }
                                    } else
                                        //LJY20201005 : OKPOS 서명 연동
                                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                        {
                                            mUart = new libUart();
                                            isrun = true;

                                            Arrays.fill(RECVBuf, (char) 0x00);

                                            initSerial();
                                            isSign = true;

                                            writeBuffer = new char[53];
                                            writeBuffer[0] = 0x02; //Header ID
                                            writeBuffer[1] = 0x42; //Command ID
                                            writeBuffer[2] = 0x00;
                                            writeBuffer[3] = 0x48; //Length(2)
                                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                                            temp = new byte[53];
                                            for (int i = 0; i < 53; i++) {
                                                temp[i] = (byte) writeBuffer[i];
                                            }
                                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                            //LJY20201217 : 포트번호/통신속도 가변
                                            mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                            }
                                            mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                            mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                            handlerThread = new handler_thread(handler);
                                            handlerThread.start();
                                        } else {
                                            Intent intent = new Intent(MainActivity.this, SignPad.class);
                                            startActivityForResult(intent, 1);
                                        }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련 노서명");
                                PopupOpen(MainActivity.this, "IC VAN 승인 중입니다.");
                                String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());

                                PosClient posClient = new PosClient();
                                if (strDealgb.equals("0200")) {
                                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련승인(동반위)");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    }
                                    else
                                    if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련승인");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련승인");
                                        sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                    }
                                } else {
                                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련취소(동반위)");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    }
                                    else
                                    if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련취소");
                                        sendBuff = ("0694" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련취소");
                                        sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                                    }
                                }
                                if (bRelease)
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                else
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                    System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                    recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                } else
                                    recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                PopupClose();
                                InsertRecv(recvBuff);
                                return;
                            }
                        } else if (func_code == 0x6E) {
                            if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000))) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련 서명");

                                //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                                if (strSigndata.length() > 0)
                                    PayWithSign(strSigndata);
                                else
                                    //LJY20220427 : 멀티패드 서명 연동
                                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                                        if (usbService != null) { // if UsbService was correctly binded, Send data
                                            isrun = true;

                                            handlerThread = new handler_thread(handler);
                                            handlerThread.start();

                                            Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                                            initSerial();
                                            //isMultipad = true;
                                            //btnDisable();
                                            isSign = true;

                                            writeBuffer = new char[53];
                                            writeBuffer[0] = 0x02; //Header ID
                                            writeBuffer[1] = 0x42; //Command ID
                                            writeBuffer[2] = 0x00;
                                            writeBuffer[3] = 0x48; //Length(2)
                                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                                            temp = new byte[53];
                                            for (int i = 0; i < 53; i++) {
                                                temp[i] = (byte) writeBuffer[i];
                                            }
                                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                                            usbService.write(temp);
                                        } else {
                                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                            Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                        //LJY20220427 : 재시작 로직 추가
//                                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                        Context currentActivity = getApplication();
//                                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                        currentActivity.startActivity(restartIntent);
//                                        System.exit(0);

                                            return;
                                        }
                                    } else
                                        //LJY20201005 : OKPOS 서명 연동
                                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                        {
                                            mUart = new libUart();
                                            isrun = true;

                                            Arrays.fill(RECVBuf, (char) 0x00);

                                            initSerial();
                                            isSign = true;

                                            writeBuffer = new char[53];
                                            writeBuffer[0] = 0x02; //Header ID
                                            writeBuffer[1] = 0x42; //Command ID
                                            writeBuffer[2] = 0x00;
                                            writeBuffer[3] = 0x48; //Length(2)
                                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                                            temp = new byte[53];
                                            for (int i = 0; i < 53; i++) {
                                                temp[i] = (byte) writeBuffer[i];
                                            }
                                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                                            //LJY20201217 : 포트번호/통신속도 가변
                                            mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                                mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                                            }
                                            mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                                            mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                                            handlerThread = new handler_thread(handler);
                                            handlerThread.start();
                                        } else {
                                            Intent intent = new Intent(MainActivity.this, SignPad.class);
                                            startActivityForResult(intent, 1);
                                        }
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련 노서명");
                                PopupOpen(MainActivity.this, "FALLBACK VAN 승인 중입니다.");
                                String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());

                                PosClient posClient = new PosClient();
                                if (strDealgb.equals("0200")) {
                                    sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                                } else {
                                    sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                                }
                                if (bRelease)
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                                else
                                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                                mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                                if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                                    System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                                    recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                                } else
                                    recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                                PopupClose();
                                InsertRecv(recvBuff);
                                return;
                            }
                        }
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -19:PIN 암호화 실패");
                        SetResultFunc(RESULT_CANCELED, -19, "PIN 암호화 실패");
                        return;
                    }
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -19:입력된 PIN 데이터가 없습니다.");
                    SetResultFunc(RESULT_CANCELED, -19, "입력된 PIN 데이터가 없습니다.");
                    return;
                }
            } else {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -19:PIN 입력 취소하셨습니다.");
                PopupClose();
                SetResultFunc(RESULT_CANCELED, -19, "PIN 입력 취소 하셨습니다.");
                return;
            }
        } else if (requestCode == 3) {
            if (resultCode == RESULT_OK) //식별번호입력완료
            {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금PIN OK 버튼 클릭");
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PIN : " + data.getStringExtra("RESULT"));

                if (data.getStringExtra("RESULT").length() > 0) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PIN LENGTH OK!!");
                    PopupOpen(MainActivity.this, "현금영수증 키인 VAN 승인 중입니다.");

                    String cashnum = "37" + data.getStringExtra("RESULT") + "=";
                    String space = "                                                                                                                                                      ";
                    String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());

                    PosClient posClient = new PosClient();
                    if (strDealgb.equals("0200"))
                        sendBuff = ("0437" + mTxt + mTxtnum + "020021" + mDevicegb + "          " + mCatid + "@" + cashnum + space.substring(0, 127 - cashnum.length()) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                    else
                        sendBuff = ("0437" + mTxt + mTxtnum + "042021" + mDevicegb + "          " + mCatid + "@" + cashnum + space.substring(0, 127 - cashnum.length()) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(1, 9) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                    if (bRelease)
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                    else
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                    mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                    if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                        System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                        recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                    } else
                        recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                    PopupClose();
                    InsertRecv(recvBuff);
                    return;
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -21:입력된 식별번호가 없습니다.");
                    SetResultFunc(RESULT_CANCELED, -21, "입력된 식별번호가 없습니다.");
                    return;
                }
            } else //취소
            {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -21:식별번호 입력 취소 하셨습니다.");
                SetResultFunc(RESULT_CANCELED, -21, "식별번호 입력 취소 하셨습니다.");
                return;
            }
        } else if (requestCode == 4) //LJY20200327 : 현금IC 일반거래
        {
            if (resultCode == RESULT_OK) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC PIN OK 버튼 클릭");
                PopupClose();

                bEncPin = new byte[16];
                SignEnc nicesign = new SignEnc();
//                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PIN : " + data.getStringExtra("RESULT"));

                if (data.getStringExtra("RESULT").length() > 0) {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC PIN LENGTH OK!!");
                    int ret = nicesign.MakePinBlock(("                " + cashic_dttm).getBytes(), data.getStringExtra("RESULT").getBytes(), bEncPin);

                    if (ret > 0) {
                        strpindata = new String(bEncPin);
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] ENC 현금IC PIN : " + strpindata);

                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                        {
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC - 계좌 암호화정보 조회 요청입니다.");
                            func_code = 0x80;

                            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                            // Serial Port Check
                            int readState = scr.checkSerialPortOpened();
                            if (readState != RTN_COMM_OK) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                return;
                            }

                            scr.clearTxBuffer();

                            writeBuffer = new char[25];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x20; //Length(2)
                            String sendstr = "F3" + stracctidx + "0" + strpindata; //현금IC 거래구분(2) + Account Index(1) + 거래종류(1) + Encrypt Pin Block(16)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                            writeBuffer[24] = xor_sum(writeBuffer, 24);

                            temp = new byte[25];
                            for (int i = 0; i < 25; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            scr.sendMsg(temp, temp.length);
                            PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");

                            scr.clearRxBuffer();
                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);
                            Arrays.fill(encdata, (char) 0x00);
                            Arrays.fill(icdata, (char) 0x00);

                            initSerial();

                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC - 계좌 암호화정보 조회 요청입니다.");
                            func_code = 0x80;

                            writeBuffer = new char[25];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = func_code; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x20; //Length(2)
                            String sendstr = "F3" + stracctidx + "0" + strpindata; //현금IC 거래구분(2) + Account Index(1) + 거래종류(1) + Encrypt Pin Block(16)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                            writeBuffer[24] = xor_sum(writeBuffer, 24);

                            temp = new byte[25];
                            for (int i = 0; i < 25; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");

                            //LJY20201217 : 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            if (usbService != null) { // if UsbService was correctly binded, Send data
                                isrun = true;

                                handlerThread = new handler_thread(handler);
                                handlerThread.start();

                                Arrays.fill(RECVBuf, (char) 0x00);
                                Arrays.fill(encdata, (char) 0x00);
                                Arrays.fill(icdata, (char) 0x00);

                                initSerial();

                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 현금IC - 계좌 암호화정보 조회 요청입니다.");
                                func_code = 0x80;

                                writeBuffer = new char[25];
                                writeBuffer[0] = 0x02; //Header ID
                                writeBuffer[1] = func_code; //Command ID
                                writeBuffer[2] = 0x00;
                                writeBuffer[3] = 0x20; //Length(2)
                                String sendstr = "F3" + stracctidx + "0" + strpindata; //현금IC 거래구분(2) + Account Index(1) + 거래종류(1) + Encrypt Pin Block(16)
                                System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 20);
                                writeBuffer[24] = xor_sum(writeBuffer, 24);

                                temp = new byte[25];
                                for (int i = 0; i < 25; i++) {
                                    temp[i] = (byte) writeBuffer[i];
                                }
                                PopupOpenEOT(MainActivity.this, "IC카드 삽입해주세요.");
                                usbService.write(temp);
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                //LJY20220427 : 재시작 로직 추가
//                                mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                Context currentActivity = getApplication();
//                                Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                currentActivity.startActivity(restartIntent);
//                                System.exit(0);

                                return;
                            }
                        }

                        return;
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -19 : 현금IC PIN 암호화 실패");
                        SetResultFunc(RESULT_CANCELED, -19, "현금IC PIN 암호화 실패");
                        return;
                    }
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -19:입력된 현금IC PIN 데이터가 없습니다.");
                    SetResultFunc(RESULT_CANCELED, -19, "입력된 현금IC PIN 데이터가 없습니다.");
                    return;
                }
            } else {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -19 : 현금IC 입력 취소하셨습니다.");
                PopupClose();
                SetResultFunc(RESULT_CANCELED, -19, "현금IC 입력 취소하셨습니다.");
                return;
            }
        } else if (requestCode == REQUEST_ENABLE_BT) { //1020
            if (resultCode == RESULT_OK)
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] REQUEST_ENABLE_BT RESULT_OK");
            else
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] REQUEST_ENABLE_BT RESULT_CANCEL");
            return;
        }
    }

    private class handler_thread extends Thread implements Runnable {
        Handler mHandler;
        int itimeover;
        byte cData;

        handler_thread(Handler h) {
            mHandler = h;
        }

        public void run() {
            Message msg;

            tstart = System.currentTimeMillis();

            //20190108LJY
            if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
            {
                int readState = 0;
                long startTimeTick = Utils.GetStartTimeTick();
                while (Utils.CheckTickTimeOut(startTimeTick, 3000)) { //ACK타임아웃 3초
                    readState = scr.readMsg(250);
                    if (readState != RTN_CONTINUE) break;
                }

                // 통신버퍼 Clear
                scr.clearBuffer();

                if (readState == RTN_COMM_OK) {
                    //응답전문수신
                    if (scr.respMsg.rxCommandID == CH_NAK) { //NAK 수신
                        status = 2;
                        msg = mHandler.obtainMessage();
                        mHandler.sendMessage(msg);
                    } else if (scr.respMsg.rxCommandID == CH_ACK) { // ACK수신 - 응답전문 수신 대기.
                        scr.clearRxBuffer();
                        startTimeTick = Utils.GetStartTimeTick();
                        while (Utils.CheckTickTimeOut(startTimeTick, 60000)) {
                            readState = scr.readMsg(250);
                            if (readState != RTN_CONTINUE) break;
                        }

                        // 통신버퍼 Clear
                        scr.clearBuffer();

                        if (readState == RTN_COMM_OK) {
                            //응답전문수신
                            if (scr.respMsg.rxCommandID == (byte) func_code) {
                                for (int k = 0; k < scr.respMsg.rxDataValueLength; k++) {
                                    RECVBuf[k] = (char) scr.respMsg.rxDataValuebyte[k];
                                    scr.respMsg.rxDataValuebyte[k] = 0x00;
                                }

                                length_recv = Integer.parseInt(String.format("%02X", RECVBuf[2] & 0xff) + String.format("%02X", RECVBuf[3] & 0xff)); //JDK20230110 : 포스뱅크 바코드리딩 버그 개선

                                status = 1;
                                msg = mHandler.obtainMessage();
                                mHandler.sendMessage(msg);
                            } else { //RTN_INVALID_DATA
                                status = 2;
                                msg = mHandler.obtainMessage();
                                mHandler.sendMessage(msg);
                            }
                        } else if (readState == RTN_CONTINUE) { //RTN_TIMEOUT
                            status = 2;
                            msg = mHandler.obtainMessage();
                            mHandler.sendMessage(msg);
                        }
                        //return readState;
                    } else if (scr.respMsg.rxCommandID == (byte) func_code) { //응답전문수신
                        for (int k = 0; k < scr.respMsg.rxDataValueLength; k++) {
                            RECVBuf[k] = (char) scr.respMsg.rxDataValuebyte[k];
                            scr.respMsg.rxDataValuebyte[k] = 0x00;
                        }

                        status = 1;
                        msg = mHandler.obtainMessage();
                        mHandler.sendMessage(msg);
                    } else { //RTN_INVALID_DATA
                        status = 2;
                        msg = mHandler.obtainMessage();
                        mHandler.sendMessage(msg);
                    }
                } else if (readState == RTN_CONTINUE) { //RTN_TIMEOUT
                    status = 2;
                    msg = mHandler.obtainMessage();
                    mHandler.sendMessage(msg);
                }
                //return readState;
            } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
            {
                while (isrun) {
                    itimeover = calculate_interval(60);

                    if (itimeover == 1) {
                        status = 2;
                        msg = mHandler.obtainMessage();
                        mHandler.sendMessage(msg);
                    }

                    if ((isSign || isMultipad) && RECVBuf[0] == 0x04) {
                        slen = 1;
                        istep = 0;
                        status = 1;

                        if (status == 1 && slen > 0 && RECVBuf[0] == 0x04) {
//                            RECVBuf[0] = 0x00; //LJY20220520 : 초기화 처리 후 진행
                            msg = mHandler.obtainMessage();
                            mHandler.sendMessage(msg);
                        }
                    } else
                        //OSM20241017 : TITENG 리더기 연동 시, func_code (0x04) 로직 제외
                        //카드리더UART 응답데이터 있을시
                        //LJY20201005 : OKPOS 서명 연동
                        //LJY20201217 : 포트번호/통신속도 가변
                        if (mUart.IsRxData(mSharedManager.getPreferences().getInt("sPortnum", 0)) || mUart.IsRxData(mSharedManager.getPreferences().getInt("Portnum", 0)) == true) {
                            //카드리더UART 문자 꺼내기
                            //LJY20201005 : OKPOS 서명 연동
                            //LJY20201217 : 포트번호/통신속도 가변
                            if (mUart.IsRxData(mSharedManager.getPreferences().getInt("sPortnum", 0)))
                                cData = mUart.GetCh(mSharedManager.getPreferences().getInt("sPortnum", 0));
                            else
                                cData = mUart.GetCh(mSharedManager.getPreferences().getInt("Portnum", 0));

                            if (istep == 0 && cData == 0x06) //ACK수신
                            {
                                slen = 0;
                                istep = 0;
                            } else if (istep == 0 && cData == 0x04) //EOT수신
                            {
                                slen = 0;
                                istep = 0;
                            } else if (istep == 0 && cData == 0x02) //STX수신
                            {
                                slen = 0;
                                if (bTitchk) //LJY20230911 : TITENG 리더기 추가
                                    istep = 21;
                                else
                                    istep = 15;
                                RECVBuf[slen++] = (char) cData;
                            } else if (istep == 0 && isSign && cData == 0x0F) //좌표시작
                            {
                                slen = 0;
                                istep = 10;
                            } else if (istep == 10 && slen < 2 && isSign) //좌표입력
                            {
                                RECVBuf[slen++] = (char) cData;
                                istep = 10;
                            } else if (istep == 10 && slen == 2 && isSign && cData == 0x0E) //좌표종료
                            {
                                slen = 0;
                                istep = 0;
                            } else if (istep == 15) //COMMAND수신     //OSM20241017 : 커맨드 수신 단계에서 커맨드, sign, 멀티패드 체크 제외
                            {
                                istep = 20;
                                RECVBuf[slen++] = (char) cData;
                            } else if (istep == 20) //길이수신
                            {
                                RECVBuf[slen++] = (char) cData;
                                if (slen == 4) {
                                    istep = 25;
                                    length_recv = Integer.parseInt(String.format("%02X", RECVBuf[2] & 0xff) + String.format("%02X", RECVBuf[3] & 0xff));
                                }
                            } else if (istep == 21) { //LJY20230911 : TITENG 리더기 추가 //길이수신
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] TITENG 길이 수신");
                                RECVBuf[slen++] = (char) cData;
                                if (slen == 3) {
                                    istep = 26;
                                    length_recv = RECVBuf[1] * 16 + RECVBuf[2];
                                }
                            } else if (istep == 25) { //데이터수신
                                RECVBuf[slen++] = (char) cData;
                                if (length_recv == slen - 4) {
                                    istep = 30;
                                }
                            } else if (istep == 26) { //LJY20230911 : TITENG 리더기 추가 //데이터수신
                                RECVBuf[slen++] = (char) cData;
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] TITENG 데이터 수신");
                                if (length_recv + 1 == slen - 3) //ETX(1)
                                    istep = 30;
                            } else if (istep == 30) { //데이터수신완료
                                istep = 0;
                                status = 1;
                            }
                        }

                            if (status == 1 && slen > 0) {
//                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] OKPOS");
//                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RECVBuf : " + new String(RECVBuf));
                                SharedManager.LogDebug(bLogUse, "debugjy", "데이터수신완료");
                                msg = mHandler.obtainMessage();
                                mHandler.sendMessage(msg);
                            }
                        }
                }
            else {
                while (isrun) {
                    try {
                        Thread.sleep(250);
                    } catch (InterruptedException e) {
                    }


                    if(mSharedManager.getPreferences().getInt("Readertype", 0) == 5 && (func_code == 'A' || func_code == 'R' || func_code == 'S' || func_code == 'e' || func_code == 'E')) //LJY20231006 : TITENG 리더기 연동 시 타임아웃 시간 변경
                        itimeover = calculate_interval(3);
                    else
                        itimeover = calculate_interval(90); //LJY20230911 : 타임아웃 시간 변경


                    if (itimeover == 1) {
                        status = 2;
                        msg = mHandler.obtainMessage();
                        mHandler.sendMessage(msg);
                    }


                    //LJY20220520 : 서명/멀티패드 요청취소에 대한 예외처리
                    if ((isSign || isMultipad) && RECVBuf[0] == 0x04) {
                        slen = 1;
                        istep = 0;
                        status = 1;

                        if (status == 1 && slen > 0 && RECVBuf[0] == 0x04) {
//                            RECVBuf[0] = 0x00; //LJY20220520 : 초기화 처리 후 진행
                            msg = mHandler.obtainMessage();
                            mHandler.sendMessage(msg);
                        }
                    } else if (status == 1 && slen > 0) {
                        msg = mHandler.obtainMessage();
                        mHandler.sendMessage(msg);
                    }
                }
            }
        }
    }

    public void InsertRecv(byte[] recvBuff) {
        String result = "";
        char fs = 0x1C;

        try {
            if (new String(recvBuff, "EUC-KR").equals("-1") == true) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -1:서버연결실패");
                SetResultFunc(RESULT_CANCELED, -1, "서버연결실패");
            } else if (new String(recvBuff, "EUC-KR").equals("-2") == true) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -2:서버 전문 송신 실패");
                SetResultFunc(RESULT_CANCELED, -2, "서버 전문 송신 실패");
            } else if (new String(recvBuff, "EUC-KR").equals("-3") == true) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -3:서버 전문 수신 실패");
                SetResultFunc(RESULT_CANCELED, -3, "서버 전문 수신 실패");
            } else if (new String(recvBuff, "EUC-KR").equals("-4") == true) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -4:서버 키교환 실패");
                SetResultFunc(RESULT_CANCELED, -4, "서버 키교환 실패");
            } else if (new String(recvBuff, "EUC-KR").equals("-5") == true) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -5:서버 전문 암복호화 실패");
                SetResultFunc(RESULT_CANCELED, -5, "서버 전문 암복호화 실패");
            } else {

                if (bRelease)
                    SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 68) + "**********" + (new String(recvBuff, "EUC-KR")).substring(78, recvBuff.length - 78));
                else
                    SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));
                RecvFormat recv = new RecvFormat();
                recv.str_Msglen = new String(recvBuff, 0, 4, "EUC-KR");
                recv.str_Msgtxt = new String(recvBuff, 4, 3, "EUC-KR");
                recv.str_Msgno = new String(recvBuff, 7, 20, "EUC-KR");

                if (strDealgb.equals("0320")) //20200131 : 멤버쉽거래
                    recv.str_Msggb = "0330";
                else if (strDealgb.equals("0540")) //20200131 : 멤버쉽거래
                    recv.str_Msggb = "0550";
                else if (strDealgb.equals("0300")) //20200129 : 포인트거래
                    recv.str_Msggb = "0310";
                else if (strDealgb.equals("0520")) //20200129 : 포인트거래
                    recv.str_Msggb = "0530";
                else
                    recv.str_Msggb = new String(recvBuff, 27, 4, "EUC-KR");
                if (strDealtp.equals("UP"))
                    recv.str_Dealgb = "UP";
                else if (strDealtp.equals("30"))
                    recv.str_Dealgb = "10";
                else if (mTxt.equals("DCC") || mTxt.equals("DCA") || mTxt.equals("TAX")) //20200312 : DCC 개발
                    recv.str_Dealgb = "DC";
                else
                    recv.str_Dealgb = new String(recvBuff, 31, 2, "EUC-KR");
                recv.str_Devicegb = new String(recvBuff, 33, 2, "EUC-KR");
                recv.str_Deviceno = new String(recvBuff, 35, 10, "EUC-KR");
                recv.str_Tid = new String(recvBuff, 45, 10, "EUC-KR");
                recv.str_Recvcode = new String(recvBuff, 55, 4, "EUC-KR");

                if (strDealtp.equals("I1") || strDealtp.equals("I2") || strDealtp.equals("I3") || strDealtp.equals("I4")) //20200317 : 현금IC
                {
                    recv.str_Wcc = new String(recvBuff, 59, 1, "EUC-KR");
                    recv.str_Carddata = new String(recvBuff, 60, 39, "EUC-KR");
                    recv.str_Halbu = new String(recvBuff, 99, 2, "EUC-KR");
                    recv.str_Bongsa = new String(recvBuff, 101, 9, "EUC-KR");
                    recv.str_Tax = new String(recvBuff, 110, 9, "EUC-KR");
                    recv.str_Money = new String(recvBuff, 119, 9, "EUC-KR");
                    recv.str_Bizno = new String(recvBuff, 128, 10, "EUC-KR");
                    recv.str_Perno = new String(recvBuff, 138, 13, "EUC-KR");
                    recv.str_Pinno = new String(recvBuff, 151, 16, "EUC-KR");
                    recv.str_Storeno = new String(recvBuff, 167, 15, "EUC-KR");
//                    recv.str_Apprdate = new String(recvBuff, 182, 12, "EUC-KR");
                    recv.str_Apprdate = new String(recvBuff, 184, 10, "EUC-KR");
                    recv.str_Apprno = new String(recvBuff, 194, 8, "EUC-KR");
                    recv.str_Dealno = new String(recvBuff, 202, 12, "EUC-KR");
                    recv.str_Bgcode = new String(recvBuff, 214, 3, "EUC-KR"); //발급기관 대표코드
                    recv.str_Bgnm = new String(recvBuff, 217, 30, "EUC-KR"); //발급기관 명
                    recv.str_CBStore = new String(recvBuff, 247, 7, "EUC-KR"); //발급기관 점별코드
                    recv.str_Micode = new String(recvBuff, 254, 3, "EUC-KR"); //매입기관 대표코드
                    recv.str_Minm = new String(recvBuff, 257, 30, "EUC-KR"); //매입기관 명
                    recv.str_CBApprno = new String(recvBuff, 287, 7, "EUC-KR"); //매입기관 점별코드
                    recv.str_Dccyn = new String(recvBuff, 294, 4, "EUC-KR"); //수수료율(4)
                    recv.str_P1 = new String(recvBuff, 298, 12, "EUC-KR"); //가맹점수수료(12)
                    recv.str_P2 = new String(recvBuff, 310, 12, "EUC-KR"); //발급기관수수료(12)
                    recv.str_P3 = new String(recvBuff, 322, 12, "EUC-KR"); //매입기관수수료(12)
                    recv.str_DealCardno = new String(recvBuff, 334, 20, "EUC-KR"); //출금계좌번호(20)
                    recv.str_Msg1 = new String(recvBuff, 354, 1, "EUC-KR"); //원장잔액부호(1)
                    recv.str_Msg2 = new String(recvBuff, 355, 12, "EUC-KR"); //원장잔액(12)
                    recv.str_Msg3 = new String(recvBuff, 367, 12, "EUC-KR"); //출금가능금액(12)
                    recv.str_Msg4 = new String(recvBuff, 379, 64, "EUC-KR"); //응답메시지(64)

                    result = recv.str_Msggb + fs + recv.str_Dealgb + fs + recv.str_Recvcode + fs + recv.str_Money + fs + recv.str_Tax + fs + recv.str_Bongsa + fs + recv.str_Storeno + fs + recv.str_Apprno + fs + recv.str_Apprdate + fs + recv.str_Bgcode + fs + recv.str_Bgnm + fs + recv.str_CBStore + fs + recv.str_Micode + fs + recv.str_Minm + fs + recv.str_CBApprno + fs + recv.str_Dccyn + fs + recv.str_P1 + fs + recv.str_P2 + fs + recv.str_P3 + fs + recv.str_DealCardno + fs + recv.str_Msg1 + fs + recv.str_Msg2 + fs + recv.str_Msg3 + fs + recv.str_Msg4 + fs + fs + fs + fs + recv.str_Deviceno + fs + fs + fs; //LJY20200825 : 기기번호 추가
                } else if (strDealtp.equals("DC")) //20200312 : DCC 개발
                {
                    //환율조회 DB저장 안함
                    String str_dccdealno = new String(recvBuff, 360, 18, "EUC-KR");
                    String str_dccofficecd = new String(recvBuff, 439, 1, "EUC-KR");
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] DCC 나이스 일련번호 : [" + str_dccdealno + "]");
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] DCC 업체 구분 코드 : [" + str_dccofficecd + "]");

                    if (mTxt.equals("DCC") && str_dccdealno.equals("                  ") && (str_dccofficecd.equals("0") || str_dccofficecd.equals(" "))) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] NOT DCC");
                        recvBuff[271] = '0';

                        recv.str_Wcc = new String(recvBuff, 59, 1, "EUC-KR");
                        recv.str_Carddata = new String(recvBuff, 62, 6, "EUC-KR") + "**********";
                        recv.str_Halbu = new String(recvBuff, 99, 2, "EUC-KR");
                        recv.str_Bongsa = new String(recvBuff, 101, 12, "EUC-KR");
                        recv.str_Tax = new String(recvBuff, 113, 12, "EUC-KR");
                        recv.str_Money = new String(recvBuff, 125, 12, "EUC-KR");
                        recv.str_Bizno = new String(recvBuff, 137, 10, "EUC-KR");
                        recv.str_Perno = new String(recvBuff, 147, 13, "EUC-KR");
                        recv.str_Pinno = new String(recvBuff, 160, 16, "EUC-KR");
                        recv.str_Bgcode = new String(recvBuff, 176, 2, "EUC-KR");
                        recv.str_Bgnm = new String(recvBuff, 178, 20, "EUC-KR");
                        recv.str_Micode = new String(recvBuff, 198, 2, "EUC-KR");
                        recv.str_Minm = new String(recvBuff, 200, 20, "EUC-KR");
                        recv.str_Storeno = new String(recvBuff, 220, 15, "EUC-KR");
                        recv.str_Apprdate = new String(recvBuff, 235, 12, "EUC-KR");
                        recv.str_Apprno = new String(recvBuff, 247, 12, "EUC-KR");
                        recv.str_Dealno = new String(recvBuff, 259, 12, "EUC-KR");
                        recv.str_Dccyn = new String(recvBuff, 271, 1, "EUC-KR");
                        recv.str_Msg1 = new String(recvBuff, 272, 40, "EUC-KR");
                        recv.str_Msg2 = new String(recvBuff, 312, 24, "EUC-KR");
                        recv.str_Msg3 = new String(recvBuff, 336, 24, "EUC-KR");
                        recv.str_Msg4 = new String(recvBuff, 360, 24, "EUC-KR");
                        recv.str_P1 = new String(recvBuff, 384, 9, "EUC-KR");
                        recv.str_P2 = new String(recvBuff, 393, 9, "EUC-KR");
                        recv.str_P3 = new String(recvBuff, 402, 9, "EUC-KR");
                        recv.str_CBStore = new String(recvBuff, 411, 15, "EUC-KR");
                        recv.str_CBApprno = new String(recvBuff, 426, 12, "EUC-KR");
                        recv.str_RealApprmoney = new String(recvBuff, 438, 21, "EUC-KR");
                        recv.str_DealCardno = new String(recvBuff, 459, 20, "EUC-KR");

                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        dbHelper.insertDeal(simpleDateFormat.format(new Date()), recv.str_Dealgb, recv.str_Msggb, recv.str_Carddata, recv.str_Money, recv.str_Tax, recv.str_Bongsa, recv.str_Halbu, recv.str_Apprno, recv.str_Apprdate, recv.str_Tid, recv.str_Bgnm, recv.str_Minm, recv.str_Storeno, recv.str_Msg1 + recv.str_Msg2 + recv.str_Msg3 + recv.str_Msg4, recv.str_Recvcode, recv.str_P3, recv.str_Wcc, recv.str_RealApprmoney.substring(9, 10), recv.str_Msgno, recv.str_DealCardno, recv.str_Msgtxt); //20200129 : 포인트거래

                        result = recv.str_Msggb + fs + recv.str_Dealgb + fs + recv.str_Recvcode + fs + recv.str_Money + fs + recv.str_Tax + fs + recv.str_Bongsa + fs + recv.str_Halbu + fs + recv.str_Apprno + fs + recv.str_Apprdate + fs + recv.str_Bgcode + fs + recv.str_Bgnm + fs + recv.str_Micode + fs + recv.str_Minm + fs + recv.str_Storeno + fs + recv.str_Tid + fs + recv.str_P3 + fs + recv.str_Msg1 + recv.str_Msg2 + recv.str_Msg3 + recv.str_Msg4 + fs + recv.str_Carddata + fs + recv.str_RealApprmoney.substring(9, 10) + fs + recv.str_Msgno + fs + recv.str_DealCardno + fs + recv.str_P1 + fs + recv.str_P2 + fs + recv.str_P3 + fs + recv.str_CBStore + fs + recv.str_CBApprno + fs + "2" + fs + recv.str_Deviceno + fs + fs + fs; //LJY20200825 : 기기번호 추가
                    } else if (mTxt.equals("DCC")) {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] DCC 환율조회");

                        String str_signkey = "";
                        if (new String(sendBuff, 257, 3, "EUC-KR").equals("410")) //현지통화코드
                        {
                            str_signkey = str_signkey + "KRW : " + new String(sendBuff, 264, 10, "EUC-KR") + "\n";
                        } else if (new String(sendBuff, 257, 3, "EUC-KR").equals("840")) {
                            str_signkey = str_signkey + "USD : " + new String(sendBuff, 265, 7, "EUC-KR") + "." + new String(sendBuff, 272, 2, "EUC-KR") + "\n";
                        }
                        str_signkey = str_signkey + new String(recvBuff, 381, 3, "EUC-KR") + " : ";

                        int tempdotint = Integer.parseInt(new String(recvBuff, 398, 1, "EUC-KR"));

                        if (tempdotint == 0) {
                            str_signkey = str_signkey + new String(recvBuff, 388, 10, "EUC-KR") + "\n";
                        } else {
                            str_signkey = str_signkey + new String(recvBuff, 389, 9 - tempdotint, "EUC-KR") + "." + new String(recvBuff, 398 - tempdotint, tempdotint, "EUC-KR") + "\n";
                        }

                        tempdotint = Integer.parseInt(new String(recvBuff, 413, 1, "EUC-KR"));

                        if (new String(sendBuff, 257, 3, "EUC-KR").equals("410")) //현지통화코드
                        {
                            str_signkey = str_signkey + "( 1KRW = ";
                        } else if (new String(sendBuff, 257, 3, "EUC-KR").equals("840")) {
                            str_signkey = str_signkey + "( 1USD = ";
                        }

                        if (tempdotint == 0) {
                            str_signkey = str_signkey + new String(recvBuff, 399, 14, "EUC-KR") + " ";
                        } else {
                            str_signkey = str_signkey + new String(recvBuff, 399, 14 - tempdotint, "EUC-KR") + "." + new String(recvBuff, 399 + 14 - tempdotint, tempdotint, "EUC-KR") + " ";
                        }
                        str_signkey = str_signkey + new String(recvBuff, 381, 3, "EUC-KR") + " )\n" + "            " + "                              ";

                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] str_signkey : " + str_signkey);

//                        PopupOpen(getContext(), str_signkey);

                        recvBuff[271] = '1';

//                        String tempsend = new String(sendBuff, 0, sendBuff.length, "EUC-KR");
//                        String str_dcctemp = new String(sendBuff, 257, 18, "EUC-KR");

                        dialog = new Dialog(MainActivity.this);
                        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
                        dialog.setContentView(R.layout.activity_popup_dialog);
                        dialog.setCancelable(false);
                        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
                        ((TextView) dialog.findViewById(R.id.tvpopup)).setText(str_signkey);
                        ((Button) dialog.findViewById(R.id.btrooting)).setText(str_signkey.substring(0, 3));
                        ((Button) dialog.findViewById(R.id.btrooting)).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) { //원화승인
                                mTxt = "TAX";
                                System.arraycopy(mTxt.getBytes(), 0, sendBuff, 4, 3);
                                System.arraycopy(recvBuff, 360, sendBuff, 275, 18);
                                System.arraycopy(recvBuff, 360, DccmsgBuff, 0, 99);
                                if (dialog.isShowing())
                                    dialog.dismiss();

                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 카드리딩 요청입니다.");

                                if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                                {
                                    isrun = true;

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();
                                    func_code = 0x6C;

                                    scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                                    // Serial Port Check
                                    int readState = scr.checkSerialPortOpened();
                                    if (readState != RTN_COMM_OK) {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 연결 상태 체크해주시길 바랍니다.");
                                        Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                        SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                        return;
                                    }

                                    scr.clearTxBuffer();

                                    writeBuffer = new char[44];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x39; //Length(2)
                                    String sendstr = mTimeout; //Card 대기시간(2)
                                    SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMddHHmmss");
                                    String strDate = sdfDate.format(new Date());
                                    sendstr = sendstr + strDate; //거래일시(14)
                                    sendstr = sendstr + mMoney; //거래금액(12)
                                    sendstr = sendstr + mCatid; //TID(10)
                                    sendstr = sendstr + "0"; //거래종류(1)
                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                    writeBuffer[43] = xor_sum(writeBuffer, 43);

                                    temp = new byte[44];
                                    for (int i = 0; i < 44; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    scr.sendMsg(temp, temp.length);
                                    PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");

                                    scr.clearRxBuffer();
                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();
                                } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                {
                                    mUart = new libUart();
                                    isrun = true;

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();
                                    func_code = 0x6C;

                                    writeBuffer = new char[44];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x39; //Length(2)
                                    String sendstr = mTimeout; //Card 대기시간(2)
                                    SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMddHHmmss");
                                    String strDate = sdfDate.format(new Date());
                                    sendstr = sendstr + strDate; //거래일시(14)
                                    sendstr = sendstr + mMoney; //거래금액(12)
                                    sendstr = sendstr + mCatid; //TID(10)
                                    sendstr = sendstr + "0"; //거래종류(1)
                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                    writeBuffer[43] = xor_sum(writeBuffer, 43);

                                    temp = new byte[44];
                                    for (int i = 0; i < 44; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");

                                    //LJY20201217 : 포트번호/통신속도 가변
                                    mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                                    if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                        mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                        mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                                    }
                                    mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                                    mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();
                                } else {
                                    if (usbService != null) { // if UsbService was correctly binded, Send data
                                        isrun = true;

                                        handlerThread = new handler_thread(handler);
                                        handlerThread.start();

                                        Arrays.fill(RECVBuf, (char) 0x00);
                                        Arrays.fill(encdata, (char) 0x00);
                                        Arrays.fill(icdata, (char) 0x00);

                                        initSerial();
                                        func_code = 0x6C;

                                        writeBuffer = new char[44];
                                        writeBuffer[0] = 0x02; //Header ID
                                        writeBuffer[1] = func_code; //Command ID
                                        writeBuffer[2] = 0x00;
                                        writeBuffer[3] = 0x39; //Length(2)
                                        String sendstr = mTimeout; //Card 대기시간(2)
                                        SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMddHHmmss");
                                        String strDate = sdfDate.format(new Date());
                                        sendstr = sendstr + strDate; //거래일시(14)
                                        sendstr = sendstr + mMoney; //거래금액(12)
                                        sendstr = sendstr + mCatid; //TID(10)
                                        sendstr = sendstr + "0"; //거래종류(1)
                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                        writeBuffer[43] = xor_sum(writeBuffer, 43);

                                        temp = new byte[44];
                                        for (int i = 0; i < 44; i++) {
                                            temp[i] = (byte) writeBuffer[i];
                                        }
                                        PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");
                                        usbService.write(temp);
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                        Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                        SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                        //LJY20220427 : 재시작 로직 추가
//                                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                        Context currentActivity = getApplication();
//                                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                        currentActivity.startActivity(restartIntent);
//                                        System.exit(0);

                                        return;
                                    }
                                }
                            }
                        });
                        ((Button) dialog.findViewById(R.id.btdcc)).setVisibility(View.VISIBLE);
                        ((Button) dialog.findViewById(R.id.btdcc)).setText(new String(recvBuff, 381, 3, "EUC-KR"));
                        ((Button) dialog.findViewById(R.id.btdcc)).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                mTxt = "DCA";
                                System.arraycopy(mTxt.getBytes(), 0, sendBuff, 4, 3);
                                System.arraycopy(recvBuff, 360, sendBuff, 275, 54);
                                System.arraycopy(recvBuff, 360, DccmsgBuff, 0, 99);
                                if (dialog.isShowing())
                                    dialog.dismiss();

                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 카드리딩 요청입니다.");

                                if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
                                {
                                    isrun = true;

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();
                                    func_code = 0x6C;

                                    scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

                                    // Serial Port Check
                                    int readState = scr.checkSerialPortOpened();
                                    if (readState != RTN_COMM_OK) {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 리더기 연결 상태 체크해주시길 바랍니다.");
                                        Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                                        SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                                        return;
                                    }

                                    scr.clearTxBuffer();

                                    writeBuffer = new char[44];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x39; //Length(2)
                                    String sendstr = mTimeout; //Card 대기시간(2)
                                    SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMddHHmmss");
                                    String strDate = sdfDate.format(new Date());
                                    sendstr = sendstr + strDate; //거래일시(14)
                                    sendstr = sendstr + mMoney; //거래금액(12)
                                    sendstr = sendstr + mCatid; //TID(10)
                                    sendstr = sendstr + "0"; //거래종류(1)
                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                    writeBuffer[43] = xor_sum(writeBuffer, 43);

                                    temp = new byte[44];
                                    for (int i = 0; i < 44; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    scr.sendMsg(temp, temp.length);
                                    PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");

                                    scr.clearRxBuffer();
                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();
                                } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                                {
                                    mUart = new libUart();
                                    isrun = true;

                                    Arrays.fill(RECVBuf, (char) 0x00);
                                    Arrays.fill(encdata, (char) 0x00);
                                    Arrays.fill(icdata, (char) 0x00);

                                    initSerial();
                                    func_code = 0x6C;

                                    writeBuffer = new char[44];
                                    writeBuffer[0] = 0x02; //Header ID
                                    writeBuffer[1] = func_code; //Command ID
                                    writeBuffer[2] = 0x00;
                                    writeBuffer[3] = 0x39; //Length(2)
                                    String sendstr = mTimeout; //Card 대기시간(2)
                                    SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMddHHmmss");
                                    String strDate = sdfDate.format(new Date());
                                    sendstr = sendstr + strDate; //거래일시(14)
                                    sendstr = sendstr + mMoney; //거래금액(12)
                                    sendstr = sendstr + mCatid; //TID(10)
                                    sendstr = sendstr + "0"; //거래종류(1)
                                    System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                    writeBuffer[43] = xor_sum(writeBuffer, 43);

                                    temp = new byte[44];
                                    for (int i = 0; i < 44; i++) {
                                        temp[i] = (byte) writeBuffer[i];
                                    }
                                    PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");

                                    //LJY20201217 : 포트번호/통신속도 가변
                                    mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
                                    if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                                        mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                                        mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
                                    }
                                    mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
                                    mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);

                                    handlerThread = new handler_thread(handler);
                                    handlerThread.start();
                                } else {
                                    if (usbService != null) { // if UsbService was correctly binded, Send data
                                        isrun = true;

                                        handlerThread = new handler_thread(handler);
                                        handlerThread.start();

                                        Arrays.fill(RECVBuf, (char) 0x00);
                                        Arrays.fill(encdata, (char) 0x00);
                                        Arrays.fill(icdata, (char) 0x00);

                                        initSerial();
                                        func_code = 0x6C;

                                        writeBuffer = new char[44];
                                        writeBuffer[0] = 0x02; //Header ID
                                        writeBuffer[1] = func_code; //Command ID
                                        writeBuffer[2] = 0x00;
                                        writeBuffer[3] = 0x39; //Length(2)
                                        String sendstr = mTimeout; //Card 대기시간(2)
                                        SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMddHHmmss");
                                        String strDate = sdfDate.format(new Date());
                                        sendstr = sendstr + strDate; //거래일시(14)
                                        sendstr = sendstr + mMoney; //거래금액(12)
                                        sendstr = sendstr + mCatid; //TID(10)
                                        sendstr = sendstr + "0"; //거래종류(1)
                                        System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 39);
                                        writeBuffer[43] = xor_sum(writeBuffer, 43);

                                        temp = new byte[44];
                                        for (int i = 0; i < 44; i++) {
                                            temp[i] = (byte) writeBuffer[i];
                                        }
                                        PopupOpenEOT(MainActivity.this, "IC 카드리딩 해주세요.");
                                        usbService.write(temp);
                                    } else {
                                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                                        Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                                        SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                                        //LJY20220427 : 재시작 로직 추가
//                                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                                        Context currentActivity = getApplication();
//                                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                                        currentActivity.startActivity(restartIntent);
//                                        System.exit(0);

                                        return;
                                    }
                                }
                            }
                        });
                        dialog.show();
                        return;
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] DCC 환율조회 후 승인");

                        recvBuff[271] = '1';

                        recv.str_Wcc = new String(recvBuff, 59, 1, "EUC-KR");
                        recv.str_Carddata = new String(recvBuff, 62, 6, "EUC-KR") + "**********";
                        recv.str_Halbu = new String(recvBuff, 99, 2, "EUC-KR");
                        recv.str_Bongsa = new String(recvBuff, 101, 12, "EUC-KR");
                        recv.str_Tax = new String(recvBuff, 113, 12, "EUC-KR");
                        recv.str_Money = new String(recvBuff, 125, 12, "EUC-KR");
                        recv.str_Bizno = new String(recvBuff, 137, 10, "EUC-KR");
                        recv.str_Perno = new String(recvBuff, 147, 13, "EUC-KR");
                        recv.str_Pinno = new String(recvBuff, 160, 16, "EUC-KR");
                        recv.str_Bgcode = new String(recvBuff, 176, 2, "EUC-KR");
                        recv.str_Bgnm = new String(recvBuff, 178, 20, "EUC-KR");
                        recv.str_Micode = new String(recvBuff, 198, 2, "EUC-KR");
                        recv.str_Minm = new String(recvBuff, 200, 20, "EUC-KR");
                        recv.str_Storeno = new String(recvBuff, 220, 15, "EUC-KR");
                        recv.str_Apprdate = new String(recvBuff, 235, 12, "EUC-KR");
                        recv.str_Apprno = new String(recvBuff, 247, 12, "EUC-KR");
                        recv.str_Dealno = new String(recvBuff, 259, 12, "EUC-KR");
                        recv.str_Dccyn = new String(recvBuff, 271, 1, "EUC-KR");
                        recv.str_Msg1 = new String(recvBuff, 272, 40, "EUC-KR");
                        recv.str_Msg2 = new String(recvBuff, 312, 24, "EUC-KR");
                        recv.str_Msg3 = new String(recvBuff, 336, 24, "EUC-KR");
                        recv.str_Msg4 = new String(recvBuff, 360, 24, "EUC-KR");
                        recv.str_P1 = new String(recvBuff, 384, 9, "EUC-KR");
                        recv.str_P2 = new String(recvBuff, 393, 9, "EUC-KR");
                        recv.str_P3 = new String(recvBuff, 402, 9, "EUC-KR");
                        recv.str_CBStore = new String(recvBuff, 411, 15, "EUC-KR");
                        recv.str_CBApprno = new String(recvBuff, 426, 12, "EUC-KR");
                        recv.str_RealApprmoney = new String(recvBuff, 438, 21, "EUC-KR");
                        recv.str_DealCardno = new String(recvBuff, 459, 20, "EUC-KR");

                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        dbHelper.insertDeal(simpleDateFormat.format(new Date()), recv.str_Dealgb, recv.str_Msggb, recv.str_Carddata, recv.str_Money, recv.str_Tax, recv.str_Bongsa, recv.str_Halbu, recv.str_Apprno, recv.str_Apprdate, recv.str_Tid, recv.str_Bgnm, recv.str_Minm, recv.str_Storeno, recv.str_Msg1 + recv.str_Msg2 + recv.str_Msg3 + recv.str_Msg4, recv.str_Recvcode, recv.str_P3, recv.str_Wcc, recv.str_RealApprmoney.substring(9, 10), recv.str_Msgno, recv.str_DealCardno, recv.str_Msgtxt); //20200129 : 포인트거래

                        result = recv.str_Msggb + fs + recv.str_Dealgb + fs + recv.str_Recvcode + fs + recv.str_Money + fs + recv.str_Tax + fs + recv.str_Bongsa + fs + recv.str_Halbu + fs + recv.str_Apprno + fs + recv.str_Apprdate + fs + recv.str_Bgcode + fs + recv.str_Bgnm + fs + recv.str_Micode + fs + recv.str_Minm + fs + recv.str_Storeno + fs + recv.str_Tid + fs + recv.str_P3 + fs + recv.str_Msg1 + recv.str_Msg2 + recv.str_Msg3 + recv.str_Msg4 + fs + recv.str_Carddata + fs + recv.str_RealApprmoney.substring(9, 10) + fs + recv.str_Msgno + fs + recv.str_DealCardno + fs + recv.str_P1 + fs + recv.str_P2 + fs + recv.str_P3 + fs + recv.str_CBStore + fs + recv.str_CBApprno + fs + "1" + fs + new String(DccmsgBuff, 0, 99) + recv.str_Deviceno + fs + fs + fs; //LJY20200825 : 기기번호 추가
                    }
                } else if (recv.str_Dealgb.equals("20")) //20200214 : 수표조회
                {
                    recv.str_Apprno = new String(recvBuff, 59, 8, "EUC-KR");
                    recv.str_Msg1 = new String(recvBuff, 67, 40, "EUC-KR");

                    result = recv.str_Msggb + fs + recv.str_Dealgb + fs + recv.str_Recvcode + fs + recv.str_Apprno + fs + recv.str_Msg1 + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + recv.str_Deviceno + fs + fs + fs; //LJY20200825 : 기기번호 추가
                }
                else
                if(strDealgb.equals("0320") || strDealgb.equals("0540")) //20200131 : 멤버쉽거래
                {
                    if(recv.str_Dealgb.equals("67") || recv.str_Dealgb.equals("68")) //OSM20230818 : IFC 멤버십 응답 별도 전문
                    {
                        recv.str_IfcFiller = new String(recvBuff, 60, 1000, "EUC-KR");  //Filler(1000)

                        result = recv.str_Msggb + fs + recv.str_Dealgb + fs + recv.str_Recvcode + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + recv.str_Tid + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + recv.str_Msgno + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + fs + recv.str_IfcFiller + fs + fs + fs + fs + fs + fs;
                    }
                    else {
                        recv.str_Tax = new String(recvBuff, 59, 2, "EUC-KR"); //적립구분(2)
                        recv.str_Bongsa = new String(recvBuff, 61, 2, "EUC-KR"); //포인트구분(2)
                        recv.str_Apprdate = new String(recvBuff, 65, 12, "EUC-KR"); //쇼핑몰거래일시(12)
                        recv.str_Wcc = new String(recvBuff, 77, 1, "EUC-KR"); //WCC(1)
                        recv.str_Carddata = new String(recvBuff, 80, 6, "EUC-KR") + "**********"; //카드BIN(6)
                        recv.str_Money = new String(recvBuff, 118, 9, "EUC-KR"); //거래금액(9)
                        recv.str_Halbu = new String(recvBuff, 127, 16, "EUC-KR"); //비밀번호(16)
                        recv.str_Apprno = new String(recvBuff, 143, 15, "EUC-KR"); //승인번호(15)
                        recv.str_Bgcode = new String(recvBuff, 158, 2, "EUC-KR"); //발급사코드(2)
                        recv.str_Bgnm = new String(recvBuff, 160, 20, "EUC-KR"); //발급사명(20)
                        recv.str_Storeno = new String(recvBuff, 180, 15, "EUC-KR"); //가맹점번호(15)
                        recv.str_P1 = new String(recvBuff, 195, 9, "EUC-KR"); //발생포인트(9)
                        recv.str_P2 = new String(recvBuff, 204, 9, "EUC-KR"); //가용포인트(9)
                        recv.str_P3 = new String(recvBuff, 213, 9, "EUC-KR"); //누적포인트(9)
                        recv.str_Msg1 = new String(recvBuff, 222, 40, "EUC-KR"); //알림메시지1(40)
                        recv.str_Msg2 = new String(recvBuff, 262, 24, "EUC-KR"); //알림메시지2(24)
                        recv.str_Msg3 = new String(recvBuff, 286, 24, "EUC-KR"); //알림메시지3(24)
                        recv.str_Msg4 = "";
                        recv.str_CBStore = new String(recvBuff, 310, 9, "EUC-KR"); //신판실승인금액(9)
                        recv.str_CBApprno = new String(recvBuff, 319, 131, "EUC-KR"); //Filler(131)
                        recv.str_Bizno = "";
                        recv.str_Perno = "";
                        recv.str_Pinno = "";
                        recv.str_Micode = "";
                        recv.str_Minm = "";
                        recv.str_Dealno = "";
                        recv.str_Dccyn = "";
                        recv.str_RealApprmoney = "";
                        recv.str_DealCardno = "";

                        Date date = new Date();
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        dbHelper.insertDeal(simpleDateFormat.format(date), recv.str_Dealgb, recv.str_Msggb, recv.str_Carddata, recv.str_Money, recv.str_Tax, recv.str_Bongsa, recv.str_Halbu, recv.str_Apprno, recv.str_Apprdate, recv.str_Tid, recv.str_Bgnm, recv.str_Minm, recv.str_Storeno, recv.str_Msg1 + recv.str_Msg2 + recv.str_Msg3 + recv.str_Msg4, recv.str_Recvcode, recv.str_P3, recv.str_Wcc, recv.str_RealApprmoney, recv.str_Msgno, recv.str_DealCardno, recv.str_Msgtxt); //20200129 : 포인트거래

                        result = recv.str_Msggb + fs + recv.str_Dealgb + fs + recv.str_Recvcode + fs + recv.str_Money + fs + recv.str_Tax + fs + recv.str_Bongsa + fs + recv.str_Halbu + fs + recv.str_Apprno + fs + recv.str_Apprdate + fs + recv.str_Bgcode + fs + recv.str_Bgnm + fs + recv.str_Micode + fs + recv.str_Minm + fs + recv.str_Storeno + fs + recv.str_Tid + fs + recv.str_P3 + fs + recv.str_Msg1 + recv.str_Msg2 + recv.str_Msg3 + recv.str_Msg4 + fs + recv.str_Carddata + fs + recv.str_RealApprmoney + fs + recv.str_Msgno + fs + recv.str_DealCardno + fs + recv.str_P1 + fs + recv.str_P2 + fs + recv.str_P3 + fs + recv.str_CBStore + fs + recv.str_CBApprno + fs + fs + recv.str_Deviceno + fs + fs + fs; //LJY20200825 : 기기번호 추가
                    }
                }
                else {
                    recv.str_Wcc = new String(recvBuff, 59, 1, "EUC-KR");
                    if (strDealtp.equals("21"))
                        recv.str_Carddata = new String(recvBuff, 60, 6, "EUC-KR") + "**********";
                    else
                        recv.str_Carddata = new String(recvBuff, 62, 6, "EUC-KR") + "**********";
                    recv.str_Halbu = new String(recvBuff, 99, 2, "EUC-KR");
                    recv.str_Bongsa = new String(recvBuff, 101, 12, "EUC-KR");
                    recv.str_Tax = new String(recvBuff, 113, 12, "EUC-KR");
                    recv.str_Money = new String(recvBuff, 125, 12, "EUC-KR");
                    recv.str_Bizno = new String(recvBuff, 137, 10, "EUC-KR");
                    recv.str_Perno = new String(recvBuff, 147, 13, "EUC-KR");
                    recv.str_Pinno = new String(recvBuff, 160, 16, "EUC-KR");
                    recv.str_Bgcode = new String(recvBuff, 176, 2, "EUC-KR");
                    recv.str_Bgnm = new String(recvBuff, 178, 20, "EUC-KR");
                    recv.str_Micode = new String(recvBuff, 198, 2, "EUC-KR");
                    recv.str_Minm = new String(recvBuff, 200, 20, "EUC-KR");
                    recv.str_Storeno = new String(recvBuff, 220, 15, "EUC-KR");
                    recv.str_Apprdate = new String(recvBuff, 235, 12, "EUC-KR");
                    recv.str_Apprno = new String(recvBuff, 247, 12, "EUC-KR");
                    recv.str_Dealno = new String(recvBuff, 259, 12, "EUC-KR");
                    recv.str_Dccyn = new String(recvBuff, 271, 1, "EUC-KR");
                    recv.str_Msg1 = new String(recvBuff, 272, 40, "EUC-KR");
                    recv.str_Msg2 = new String(recvBuff, 312, 24, "EUC-KR");
                    recv.str_Msg3 = new String(recvBuff, 336, 24, "EUC-KR");
                    recv.str_Msg4 = new String(recvBuff, 360, 24, "EUC-KR");
                    recv.str_P1 = new String(recvBuff, 384, 9, "EUC-KR");
                    recv.str_P2 = new String(recvBuff, 393, 9, "EUC-KR");
                    recv.str_P3 = new String(recvBuff, 402, 9, "EUC-KR");
                    recv.str_CBStore = new String(recvBuff, 411, 15, "EUC-KR");
                    recv.str_CBApprno = new String(recvBuff, 426, 12, "EUC-KR");
                    recv.str_RealApprmoney = new String(recvBuff, 438, 21, "EUC-KR");
                    recv.str_DealCardno = new String(recvBuff, 459, 20, "EUC-KR");

                    if (recv.str_Msgtxt.equals("ALR") || recv.str_Msgtxt.equals("WCR") || recv.str_Deviceno.substring(0, 3).equals("ALP") || recv.str_Deviceno.substring(0, 3).equals("WCP")) //LJY20200825 : PAYPRO 통합전문
                    {
                        if (recv.str_Msgtxt.equals("ALR")) recv.str_Deviceno = "ALP" + "       ";
                        else if (recv.str_Msgtxt.equals("WCR"))
                            recv.str_Deviceno = "WCP" + "       ";
                        recv.str_Apprno = "";
                        recv.str_Apprno = recv.str_Msgno;
                    }

                    Date date = new Date();
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    dbHelper.insertDeal(simpleDateFormat.format(date), recv.str_Dealgb, recv.str_Msggb, recv.str_Carddata, recv.str_Money, recv.str_Tax, recv.str_Bongsa, recv.str_Halbu, recv.str_Apprno, recv.str_Apprdate, recv.str_Tid, recv.str_Bgnm, recv.str_Minm, recv.str_Storeno, recv.str_Msg1 + recv.str_Msg2 + recv.str_Msg3 + recv.str_Msg4, recv.str_Recvcode, recv.str_P3, recv.str_Wcc, recv.str_RealApprmoney.substring(9, 10), recv.str_Msgno, recv.str_DealCardno, recv.str_Msgtxt); //20200129 : 포인트거래

                    result = recv.str_Msggb + fs + recv.str_Dealgb + fs + recv.str_Recvcode + fs + recv.str_Money + fs + recv.str_Tax + fs + recv.str_Bongsa + fs + recv.str_Halbu + fs + recv.str_Apprno + fs + recv.str_Apprdate + fs + recv.str_Bgcode + fs + recv.str_Bgnm + fs + recv.str_Micode + fs + recv.str_Minm + fs + recv.str_Storeno + fs + recv.str_Tid + fs + recv.str_P3 + fs + recv.str_Msg1 + recv.str_Msg2 + recv.str_Msg3 + recv.str_Msg4 + fs + recv.str_Carddata + fs + recv.str_RealApprmoney.substring(9, 10) + fs + recv.str_Msgno + fs + recv.str_DealCardno + fs + recv.str_P1 + fs + recv.str_P2 + fs + recv.str_P3 + fs + recv.str_CBStore + fs + recv.str_CBApprno + fs + fs + recv.str_Deviceno + fs + fs + fs; //LJY20200825 : 기기번호 추가
                }

                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->POS] : " + result);
                SetResultFunc(RESULT_OK, 1, result);
                return;
            }
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    public void SetResultFunc(int result_code, int returncode, String result) {
        SharedManager.bStart = false;

        PopupClose(); //LJY20230911 : 리턴 시 팝업 종료 상태 체크 while 구분 값 초기화
        lb_dead = false;

        Intent i = new Intent();
        i.putExtra("NVCATRETURNCODE", returncode);
        i.putExtra("NVCATRECVDATA", result);
        setResult(result_code, i);

        Memset();
        finish();

        isGetReader = false; //LJY20221004 : 초기화
    }

    public static void btnEnable() {
        one.setEnabled(true);
        two.setEnabled(true);
        three.setEnabled(true);
        four.setEnabled(true);
        five.setEnabled(true);

        if (SharedManager.bStart == false)
            Memset();
    }

    public static void btnDisable() {
        one.setEnabled(false);
        two.setEnabled(false);
        three.setEnabled(false);
        four.setEnabled(false);
        five.setEnabled(false);
    }
    private void CUPfunc() {
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] 은련PIN OK 버튼 클릭");
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PIN : " + EncPin);
        PopupClose();

        if (func_code == 0x6C) {
            if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000))) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련 서명");

                //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                if (strSigndata.length() > 0)
                    PayWithSign(strSigndata);
                else
                    //LJY20220427 : 멀티패드 서명 연동
                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                        if (usbService != null) { // if UsbService was correctly binded, Send data
                            isrun = true;

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();

                            Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            //isMultipad = true;
                            //btnDisable();
                            isSign = true;

                            writeBuffer = new char[53];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = 0x42; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x48; //Length(2)
                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                            temp = new byte[53];
                            for (int i = 0; i < 53; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                            usbService.write(temp);
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                            Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                        //LJY20220427 : 재시작 로직 추가
//                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                        Context currentActivity = getApplication();
//                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                        currentActivity.startActivity(restartIntent);
//                        System.exit(0);

                            return;
                        }
                    } else
                        //LJY20201005 : OKPOS 서명 연동
                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);

                            initSerial();
                            isSign = true;

                            writeBuffer = new char[53];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = 0x42; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x48; //Length(2)
                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                            temp = new byte[53];
                            for (int i = 0; i < 53; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                            //LJY20201217 : 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            Intent intent = new Intent(MainActivity.this, SignPad.class);
                            startActivityForResult(intent, 1);
                        }
            } else {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련 노서명");
                PopupOpen(MainActivity.this, "IC VAN 승인 중입니다.");
                String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());

                PosClient posClient = new PosClient();
                if (strDealgb.equals("0200")) {
                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련승인(동반위)");
                        sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                    }
                    else
                    if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련승인");
                        sendBuff = ("0694" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련승인");
                        sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                    }
                } else {
                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련취소(동반위)");
                        sendBuff = ("0694" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                    }
                    else
                    if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련취소");
                        sendBuff = ("0694" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N" + new String(icdata, 0, 257)).getBytes();
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련취소");
                        sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "N").getBytes();
                    }
                }
                if (bRelease)
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                else
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                    System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                    recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                } else
                    recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                PopupClose();
                InsertRecv(recvBuff);
                return;
            }
        } else if (func_code == 0x6E) {
            if ((mSharedManager.getPreferences().getBoolean("Nocvm", false) == false || (mSharedManager.getPreferences().getBoolean("Nocvm", false) == true && Long.parseLong(mMoney) > 50000))) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련 서명");

                //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
                if (strSigndata.length() > 0)
                    PayWithSign(strSigndata);
                else
                    //LJY20220427 : 멀티패드 서명 연동
                    if (mSharedManager.getPreferences().getInt("Readertype", 0) == 1 && mSharedManager.getPreferences().getBoolean("Signuse", false)) {
                        if (usbService != null) { // if UsbService was correctly binded, Send data
                            isrun = true;

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();

                            Arrays.fill(RECVBuf, (char) 0x00);
//                                        Arrays.fill(encdata, (char) 0x00);
//                                        Arrays.fill(icdata, (char) 0x00);

                            initSerial();
                            //isMultipad = true;
                            //btnDisable();
                            isSign = true;

                            writeBuffer = new char[53];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = 0x42; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x48; //Length(2)
                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                            temp = new byte[53];
                            for (int i = 0; i < 53; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");
                            usbService.write(temp);
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] USB 서비스 불가능합니다.");
                            Toast.makeText(MainActivity.this, "USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                            SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정

//                        //LJY20220427 : 재시작 로직 추가
//                        mSharedManager.getPreferences().edit().putBoolean("MainVisible", false).commit();
//                        Context currentActivity = getApplication();
//                        Intent startIntent = new Intent(currentActivity, MainActivity.class);
//                        Intent restartIntent = Intent.makeRestartActivityTask(startIntent.getComponent());
//                        currentActivity.startActivity(restartIntent);
//                        System.exit(0);

                            return;
                        }
                    } else
                        //LJY20201005 : OKPOS 서명 연동
                        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
                        {
                            mUart = new libUart();
                            isrun = true;

                            Arrays.fill(RECVBuf, (char) 0x00);

                            initSerial();
                            isSign = true;

                            writeBuffer = new char[53];
                            writeBuffer[0] = 0x02; //Header ID
                            writeBuffer[1] = 0x42; //Command ID
                            writeBuffer[2] = 0x00;
                            writeBuffer[3] = 0x48; //Length(2)
                            String sendstr = "19F316BA33A57729" + "  Please Sign!  " + "                "; //서명문구(48)
                            System.arraycopy(sendstr.toCharArray(), 0, writeBuffer, 4, 48);
                            writeBuffer[52] = xor_sum(writeBuffer, 52);

                            temp = new byte[53];
                            for (int i = 0; i < 53; i++) {
                                temp[i] = (byte) writeBuffer[i];
                            }
                            PopupOpenEOT(MainActivity.this, "서명 해주세요.");

                            //LJY20201217 : 포트번호/통신속도 가변
                            mUart.Init(mSharedManager.getPreferences().getInt("sPortnum", 0));
                            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("sPortnum", 0)) == false) {
                                mUart.Open(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")), 8, 0, 1, true);
                                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("sPortnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("sBaudrateStr", "115200")));
                            }
                            mUart.QueueClear(mSharedManager.getPreferences().getInt("sPortnum", 0));
                            mUart.DataSend(mSharedManager.getPreferences().getInt("sPortnum", 0), temp, temp.length);

                            handlerThread = new handler_thread(handler);
                            handlerThread.start();
                        } else {
                            Intent intent = new Intent(MainActivity.this, SignPad.class);
                            startActivityForResult(intent, 1);
                        }
            } else {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련 노서명");
                PopupOpen(MainActivity.this, "FALLBACK VAN 승인 중입니다.");
                String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());

                PosClient posClient = new PosClient();
                if (strDealgb.equals("0200")) {
                    sendBuff = ("0437" + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                } else {
                    sendBuff = ("0437" + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "N").getBytes();
                }
                if (bRelease)
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(sendBuff)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(sendBuff)).substring(183, sendBuff.length - 183));
                else
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(sendBuff));
                mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                    System.arraycopy(String.format("%04d", sendBuff.length).getBytes(), 0, sendBuff, 0, 4);
                    recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), sendBuff);
                } else
                    recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), sendBuff);
                PopupClose();
                InsertRecv(recvBuff);
                return;
            }
        }
    }

    //LJY20220427 : NVCAT 전문에 서명데이터가 있으면 그대로 사용
    public void PayWithSign(String SignData) {
        SignData = SignData.substring(0, 4) + SignData.substring(4, Integer.parseInt(SignData.substring(0, 4)) * 2 + 4);
        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] SignData : " + SignData);

        //LJY20200902 : PAYPRO 서명연동
        if ((strDealgb.equals("0300") || strDealgb.equals("0520")) && strWcc.equals("L") && strTxt.equals("PRO")) {
            String SignLen = String.format("%04d", Integer.parseInt(SignData.substring(0, 4)) + 34);
            String TotalLen = String.format("%04d", 475 + 257 + Integer.parseInt(SignData.substring(0, 4)));
            String TotalLenSwipe = String.format("%04d", 475 + Integer.parseInt(SignData.substring(0, 4)));

            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 서명 결제");

            String space = "                                                                                                                                                      ";

            PosClient posClient = new PosClient();
            temp = new byte[4096];
            if (strDealgb.equals("0300")) {
                if (strCashnum.length() == 24 && strCashnum.substring(0, 6).equals("281006")) //카카오페이
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 카카오페이 거래입니다.");
                } else if (strCashnum.length() == 22 && strCashnum.substring(0, 2).equals("17")) //SSGPAY
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO SSGPAY 거래입니다.");
                } else if (strCashnum.length() == 22 && strCashnum.substring(0, 4).equals("8710")) //LPAY
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO LPAY 거래입니다.");
                } else if (strCashnum.length() == 21) //앱카드
                {
                    if (strCashnum.substring(0, 6).equals("941083")) //LJY20230130 : 서울페이 서명 무시
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 서울페이 거래입니다.");
                    else
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 앱카드 거래입니다.");
                } else if (strCashnum.length() >= 100 && strCashnum.substring(0, 7).equals("hQVDUFY")) //비씨은련QR
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 거래입니다.");

                    NiceUniQr niceuniqr = new NiceUniQr(); //LJY20220905 : JAR로 변경

                    //LJY20220905 : byte > char 변경
                    char[] Output_AID_FIRST = new char[1024];
                    char[] Output_PAN = new char[1024];
                    char[] Output_EMV_NICE = new char[1024];
                    char[] Output_TLV = new char[1024];
                    char[] Output_UPLAN = new char[1024];

                    Arrays.fill(Output_AID_FIRST, (char) 0x00);
                    Arrays.fill(Output_PAN, (char) 0x00);
                    Arrays.fill(Output_EMV_NICE, (char) 0x00);
                    Arrays.fill(Output_TLV, (char) 0x00);
                    Arrays.fill(Output_UPLAN, (char) 0x00);

//                                    int ret = niceuniqr.Uni_QR(strCashnum.getBytes(), Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);
                    int ret = niceuniqr.Uni_QR2(strCashnum, Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);

                    String tvaid = "", tvpan = "", tvemv = "", tvtlv = "", tvuplancode = "";

                    if (ret == 1) {
                        for (int i = 0; i < 1024; i++) {
                            if (Output_AID_FIRST[i] == 0x00) {
                                tvaid = new String(Output_AID_FIRST).substring(0, i);
                                break;
                            }
                        }
                        for (int i = 0; i < 1024; i++) {
                            if (Output_PAN[i] == 0x00) {
                                tvpan = new String(Output_PAN).substring(0, i);
                                break;
                            }
                        }
                        for (int i = 0; i < 1024; i++) {
                            if (Output_EMV_NICE[i] == 0x00) {
                                tvemv = new String(Output_EMV_NICE).substring(0, i);
                                break;
                            }
                        }
                        for (int i = 0; i < 1024; i++) {
                            if (Output_TLV[i] == 0x00) {
                                tvtlv = new String(Output_TLV).substring(0, i);
                                break;
                            }
                        }
                        for (int i = 0; i < 1024; i++) {
                            if (Output_UPLAN[i] == 0x00) {
                                tvuplancode = new String(Output_UPLAN).substring(0, i);
                                break;
                            }
                        }

                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 변환 성공!");

                        if (tvaid.equals("A")) //은련QR
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 은련QR 거래!");

                            mTxt = "CUP";
                            sendBuff = (TotalLen + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                        } else //비씨QR
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨QR 거래!");

                            mTxt = "HPS";
                            sendBuff = (TotalLen + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                        }
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -13 : 비씨은련QR 변환 실패!");
                        SetResultFunc(RESULT_CANCELED, -13, "POS전문오류 - 비씨은련QR 변환 실패!");
                        return;
                    }

                    System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                    System.arraycopy(stringTobytes(SignData), 2, temp, sendBuff.length, stringTobytes(SignData).length - 2);
                    System.arraycopy(tvemv.getBytes(), 0, temp, sendBuff.length + stringTobytes(SignData).length - 2, tvemv.length());

                    if (bRelease)
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                    else
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                    mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                    if (mSharedManager.getPreferences().getBoolean("Vpnuse", false)) { //LJY20230111 : 전용회선 사용 시
                        System.arraycopy(String.format("%04d", temp.length).getBytes(), 0, temp, 0, 4);
                        recvBuff = posClient.service_line(mServerip, Integer.parseInt(mServerport), temp);
                    } else
                        recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
                    try {
                        if (new String(recvBuff, "EUC-KR").equals("-1")) {
                        } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                        } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                        } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                        } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                        } else {
//                                            if (bRelease)
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 68) + "**********" + (new String(recvBuff, "EUC-KR")).substring(78, recvBuff.length - 78));
//                                            else
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));

                            System.arraycopy("PRO".getBytes(), 0, recvBuff, 4, 3);
                            if (tvaid.equals("A")) //은련QR
                                System.arraycopy("UPQ".getBytes(), 0, recvBuff, 35, 3);
                            else if (tvaid.equals("N")) //LJY20220905 : 네이버페이
                                System.arraycopy("NHQ".getBytes(), 0, recvBuff, 35, 3);
                            else
                                System.arraycopy("BCQ".getBytes(), 0, recvBuff, 35, 3);
                        }

                        try {
                            sTxtnum = new String(recvBuff, 7, 20, "EUC-KR");    //OSM20241011 : 전문 Recv 이후, 전문관리번호 변수에 저장
                            SharedManager.LogDebug(bLogUse, "debugjy", sTxtnum);
                        }

                        catch(UnsupportedEncodingException e)
                        {
                            e.printStackTrace();
                        }

                        InsertRecv(recvBuff);
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                    //InsertRecv(recvBuff);
                    return;
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 기타 거래입니다.");
                }

                if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
            } else {
                if (strDealtp.equals("10")) strDealtp = "30";

                if (strCashnum.length() == 24 && strCashnum.substring(0, 6).equals("281006")) //카카오페이
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 카카오페이 거래입니다.");
                    //서명도 필요
                    if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                    sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                } else if (strCashnum.length() == 22 && strCashnum.substring(0, 2).equals("17")) //SSGPAY
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO SSGPAY 거래입니다.");
                    //서명도 필요
                    if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                    sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                } else if (strCashnum.length() == 24 && strCashnum.substring(0, 4).equals("8710")) //LPAY
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO LPAY 거래입니다.");
                    //서명도 필요
                    if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                    sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                } else if (strCashnum.length() == 21) //앱카드
                {
                    if (strCashnum.substring(0, 6).equals("941083")) { //LJY20230130 : 서울페이 서명 무시
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 서울페이 거래입니다.");
                        if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                        sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                    } else
//                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 앱카드 거래입니다.");
                        if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                    sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                } else if (strCashnum.length() >= 100 && strCashnum.substring(0, 7).equals("hQVDUFY")) //비씨은련QR
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 거래입니다.");

                    NiceUniQr niceuniqr = new NiceUniQr(); //LJY20220905 : JAR로 변경

                    //LJY20220905 : byte > char 변경
                    char[] Output_AID_FIRST = new char[1024];
                    char[] Output_PAN = new char[1024];
                    char[] Output_EMV_NICE = new char[1024];
                    char[] Output_TLV = new char[1024];
                    char[] Output_UPLAN = new char[1024];

                    Arrays.fill(Output_AID_FIRST, (char) 0x00);
                    Arrays.fill(Output_PAN, (char) 0x00);
                    Arrays.fill(Output_EMV_NICE, (char) 0x00);
                    Arrays.fill(Output_TLV, (char) 0x00);
                    Arrays.fill(Output_UPLAN, (char) 0x00);

//                                    int ret = niceuniqr.Uni_QR(strCashnum.getBytes(), Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);
                    int ret = niceuniqr.Uni_QR2(strCashnum, Output_AID_FIRST, Output_PAN, Output_EMV_NICE, Output_TLV, Output_UPLAN);

                    String tvaid = "", tvpan = "", tvemv = "", tvtlv = "", tvuplancode = "";

                    if (ret == 1) {
                        for (int i = 0; i < 1024; i++) {
                            if (Output_AID_FIRST[i] == 0x00) {
                                tvaid = new String(Output_AID_FIRST).substring(0, i);
                                break;
                            }
                        }
                        for (int i = 0; i < 1024; i++) {
                            if (Output_PAN[i] == 0x00) {
                                tvpan = new String(Output_PAN).substring(0, i);
                                break;
                            }
                        }
                        for (int i = 0; i < 1024; i++) {
                            if (Output_EMV_NICE[i] == 0x00) {
                                tvemv = new String(Output_EMV_NICE).substring(0, i);
                                break;
                            }
                        }
                        for (int i = 0; i < 1024; i++) {
                            if (Output_TLV[i] == 0x00) {
                                tvtlv = new String(Output_TLV).substring(0, i);
                                break;
                            }
                        }
                        for (int i = 0; i < 1024; i++) {
                            if (Output_UPLAN[i] == 0x00) {
                                tvuplancode = new String(Output_UPLAN).substring(0, i);
                                break;
                            }
                        }

                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨은련QR 변환 성공!");

                        if (tvaid.equals("A")) //은련QR
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 은련QR 거래!");

                            mTxt = "CUP";
                            sendBuff = (TotalLen + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                        } else //비씨QR
                        {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 비씨QR 거래!");

                            mTxt = "HPS";
                            sendBuff = (TotalLen + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "G37" + tvpan + space.substring(0, 127 - tvpan.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                        }
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -13 : 비씨은련QR 변환 실패!");
                        SetResultFunc(RESULT_CANCELED, -13, "POS전문오류 - 비씨은련QR 변환 실패!");
                        return;
                    }

                    System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
                    System.arraycopy(stringTobytes(SignData), 2, temp, sendBuff.length, stringTobytes(SignData).length - 2);
                    System.arraycopy(tvemv.getBytes(), 0, temp, sendBuff.length + stringTobytes(SignData).length - 2, tvemv.length());

                    if (bRelease)
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
                    else
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
                    mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
                    recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
                    try {
                        if (new String(recvBuff, "EUC-KR").equals("-1")) {
                        } else if (new String(recvBuff, "EUC-KR").equals("-2")) {
                        } else if (new String(recvBuff, "EUC-KR").equals("-3")) {
                        } else if (new String(recvBuff, "EUC-KR").equals("-4")) {
                        } else if (new String(recvBuff, "EUC-KR").equals("-5")) {
                        } else {
//                                            if (bRelease)
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + (new String(recvBuff, "EUC-KR")).substring(0, 68) + "**********" + (new String(recvBuff, "EUC-KR")).substring(78, recvBuff.length - 78));
//                                            else
//                                                SharedManager.LogDebug(bLogUse, "debugjy", "[VAN->NVCAT] Recvdata : " + new String(recvBuff, "EUC-KR"));

                            System.arraycopy("PRO".getBytes(), 0, recvBuff, 4, 3);
                            if (tvaid.equals("A")) //은련QR
                                System.arraycopy("UPQ".getBytes(), 0, recvBuff, 35, 3);
                            else if (tvaid.equals("N")) //LJY20220905 : 네이버페이
                                System.arraycopy("NHQ".getBytes(), 0, recvBuff, 35, 3);
                            else
                                System.arraycopy("BCQ".getBytes(), 0, recvBuff, 35, 3);
                        }
                        InsertRecv(recvBuff);
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                    //InsertRecv(recvBuff);
                    return;
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] PAYPRO 기타 거래입니다.");
                    if (strCashnum.indexOf("=") == -1) strCashnum = strCashnum + "=";
                    sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "L37" + strCashnum + space.substring(0, 127 - strCashnum.length() - 2) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + space.substring(0, 20) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                }
            }

            System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
            System.arraycopy(stringTobytes(SignData), 2, temp, sendBuff.length, stringTobytes(SignData).length - 2);
            if (bRelease)
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
            else
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
//                    PopupClose();
            InsertRecv(recvBuff);
        } else if (func_code == 0x6E) {
            String SignLen = String.format("%04d", Integer.parseInt(SignData.substring(0, 4)) + 34);
            String TotalLen = String.format("%04d", 475 + Integer.parseInt(SignData.substring(0, 4)));

            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 서명 결제");

            String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            PopupOpen(MainActivity.this, "FALLBACK VAN 승인 중입니다.");

            PosClient posClient = new PosClient();
            temp = new byte[4096];
            if (strDealgb.equals("0300")) { //20200129 : 포인트거래
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 포인트승인");
                sendBuff = (TotalLen + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
            } else if (strDealgb.equals("0520")) //20200129 : 포인트거래
            {
                if (strDealtp.equals("10")) strDealtp = "30";

                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 포인트취소");
                sendBuff = (TotalLen + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
            } else if (strDealgb.equals("0200")) {
                if (strDealtp.equals("UP")) //은련
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련승인");
                    sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                } else {
                    if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                        if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - TAX or DCA");
                            System.arraycopy(TotalLen.getBytes(), 0, sendBuff, 0, 4);
                            System.arraycopy("F".getBytes(), 0, sendBuff, 55, 1);
                            System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
                            System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                            System.arraycopy(("Y" + SignLen + "1" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK - DCC");
                            signBuff = stringTobytes(SignData);  //20200313 : DCC 개발
                            sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                        }
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 신용승인");
                        sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                    }
                }
            } else {
                if (strDealtp.equals("UP")) //은련
                {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 은련취소");
                    sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] FALLBACK 신용취소");
                    sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "F" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + new String(icdata, 0, 2) + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                }
            }
            System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
            System.arraycopy(stringTobytes(SignData), 2, temp, sendBuff.length, stringTobytes(SignData).length - 2);
            if (bRelease)
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
            else
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
            PopupClose();
            InsertRecv(recvBuff);
        } else {
            String SignLen = String.format("%04d", Integer.parseInt(SignData.substring(0, 4)) + 34);
            String TotalLen = String.format("%04d", 475 + 257 + Integer.parseInt(SignData.substring(0, 4)));
            String TotalLenSwipe = String.format("%04d", 475 + Integer.parseInt(SignData.substring(0, 4)));

            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 서명 결제");

            String strDate = new SimpleDateFormat("MMddHHmmss").format(new Date());
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            PopupOpen(MainActivity.this, "IC VAN 승인 중입니다.");

            PosClient posClient = new PosClient();
            temp = new byte[4096];
            if (strDealgb.equals("0300")) { //20200129 : 포인트거래
                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 포인트승인(동반위)");
                    sendBuff = (TotalLen + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 포인트승인");
                    sendBuff = (TotalLen + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 포인트승인");
                    sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0200" + strDealtp + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                }
            } else if (strDealgb.equals("0520")) //20200129 : 포인트거래
            {
                if (strDealtp.equals("10")) strDealtp = "30";

                if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 포인트취소(동반위)");
                    sendBuff = (TotalLen + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 포인트취소");
                    sendBuff = (TotalLen + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                } else {
                    SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 포인트취소");
                    sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "0420" + strDealtp + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                }
            } else if (strDealgb.equals("0200")) {
                if (strDealtp.equals("UP")) //은련
                {
                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련승인(동반위)");
                        sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                    } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련승인");
                        sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련승인");
                        sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                    }
                } else {
                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                        if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                            if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - TAX or DCA(동반위)");
                                System.arraycopy(TotalLen.getBytes(), 0, sendBuff, 0, 4);
                                System.arraycopy("K".getBytes(), 0, sendBuff, 55, 1);
                                System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
                                System.arraycopy(("Y" + SignLen + "1" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF - DCC(동반위)");
                                signBuff = stringTobytes(SignData); //20200313 : DCC 개발
                                sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            }
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 신용승인(동반위)");
                            sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                        }
                    } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                        if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                            if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - TAX or DCA");
                                System.arraycopy(TotalLen.getBytes(), 0, sendBuff, 0, 4);
                                System.arraycopy("I".getBytes(), 0, sendBuff, 55, 1);
                                System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
//                                        System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                System.arraycopy(("Y" + SignLen + "1" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC - DCC");
                                signBuff = stringTobytes(SignData); //20200313 : DCC 개발
                                sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            }
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 신용승인");
                            sendBuff = (TotalLen + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                        }
                    } else {
                        if (strDealtp.equals("DC")) { //20200312 : DCC개발 (mDcc1 : 통화코드(숫자), mDcc2 : 베이스거래금액, mDcc3 : 베이스거래금액소수점)
                            if (mTxt.equals("TAX") || mTxt.equals("DCA")) {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - TAX or DCA");
                                System.arraycopy(TotalLenSwipe.getBytes(), 0, sendBuff, 0, 4);
                                System.arraycopy("A".getBytes(), 0, sendBuff, 55, 1);
                                System.arraycopy(new String(encdata, 0, 127).getBytes(), 0, sendBuff, 56, 127);
//                                        System.arraycopy(new String(icdata, 0, 2).getBytes(), 0, sendBuff, 368, 2);
//                                                System.arraycopy(new String(icdata, 0, 257).getBytes(), 0, sendBuff, 421, 257);
                                System.arraycopy(("Y" + SignLen + "1" + mCatid + "                       ").getBytes(), 0, sendBuff, 420, 39);
                            } else {
                                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS - DCC");
                                signBuff = stringTobytes(SignData); //20200313 : DCC 개발
                                sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                      " + mDcc1 + mDcc2 + mDcc3 + space.substring(0, 61) + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                            }
                        } else {
                            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 신용승인");
                            sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "020010" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + "        " + "      " + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                        }
                    }
                }
            } else {
                if (strDealtp.equals("UP") == true) //은련
                {
                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 은련취소(동반위)");
                        sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                    } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 은련취소");
                        sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 은련취소");
                        sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                   " + EncPin + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                    }
                } else {
                    if (Paygb[0] == 'R' && CardBrand[0] == 'K') { //LJY20200713 : 동반위 JUST TOUCH
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] RF 신용취소(동반위)");
                        sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "K" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                    } else if (Paygb[0] == 'I' || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) { //LJY20230818
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] IC 신용취소");
                        sendBuff = (TotalLen + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "I" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                    } else {
                        SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] MS 신용취소");
                        sendBuff = (TotalLenSwipe + mTxt + mTxtnum + "042030" + mDevicegb + "          " + mCatid + "A" + new String(encdata, 0, 127) + mHalbu + mBongsa + mTax + mMoney + mApprno.substring(0, 8) + mApprdate.substring(0, 6) + "                                                   " + mApprtid + mMyunse + mHwnum + SharedManager.SWNUM + "  " + mFiller + "Y" + SignLen + "1" + mCatid + "                       ").getBytes();
                    }
                }
            }
            System.arraycopy(sendBuff, 0, temp, 0, sendBuff.length);
            System.arraycopy(stringTobytes(SignData), 2, temp, sendBuff.length, stringTobytes(SignData).length - 2);
            if (Paygb[0] == 'I' || (Paygb[0] == 'R' && CardBrand[0] == 'K') || (Paygb[0] == 'R' && Integer.parseInt(new String(icdata, 0, 4)) > 0)) //LJY20230818 //LJY20200713 : 동반위 JUST TOUCH
                System.arraycopy(new String(icdata).getBytes(), 0, temp, sendBuff.length + stringTobytes(SignData).length - 2, new String(icdata).length());
            if (bRelease)
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + (new String(temp)).substring(0, 56) + "*******************************************************************************************************************************" + (new String(temp)).substring(183, temp.length - 183));
            else
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT->VAN] SendData : " + new String(temp));
            mSharedManager.getPreferences().edit().putString("Txtnum", mTxtnum).commit();
            recvBuff = posClient.service(mServerip, Integer.parseInt(mServerport), temp);
            PopupClose();
            InsertRecv(recvBuff);
        }
    }

    //LJY20230911 : TTIENG 리더기 콜백 처리
    public class CallbackResult {
        private String result1;
        private char[] result2;

        public CallbackResult(String result1, char[] result2) {
            this.result1 = result1;
            this.result2 = result2;
        }

        public String getResult1() {
            return result1;
        }
        public char[] getResult2() {
            return result2;
        }
    }

    public interface TitCommCallback {
        void onSuccess(CallbackResult result);
        void onFailure(Throwable throwable);
    }

    public class TitCommAsyncTask {
        public void performAsyncTask(final TitCommCallback callback) {
            // 비동기 작업 수행
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        // 작업 수행 중...
                        CallbackResult result = doSomeWork();
                        callback.onSuccess(result);
                    } catch (Exception e) {
                        callback.onFailure(e);
                    }
                }
            }).start();
        }

        private CallbackResult doSomeWork() {
            while (isrun) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            StringBuffer sb = new StringBuffer((length_recv + 3 + 1) * 2); //STX(1)+길이(2) 추가 / ETX(1)
            String hexNumber = "";
            for (int x = 0; x < length_recv + 3 + 1; x++) {
                hexNumber = "0" + Integer.toHexString(0xff & RECVBuf[x]);
                sb.append(hexNumber.substring(hexNumber.length() - 2));
            }

            // 작업을 수행하고 결과 반환
            CallbackResult callbackResult = new CallbackResult(sb.toString(), RECVBuf);
            return callbackResult;
        }
    }

    public int TitComm(byte func_code_input) { //OSM20241017 : TIT리더기 연동 함수 OKPOS, POSBANK 추가   //LJY20230911 : TDR/NK1000 통신 함수
        Arrays.fill(RECVBuf, (char) 0x00);

        initSerial();

        func_code = (char) func_code_input;

        temp = new byte[6];
        temp[0] = 0x02; //Header ID
        temp[1] = 0x00;
        temp[2] = 0x01; //Length(2)
        temp[3] = (byte) func_code; //Command ID
        temp[4] = 0x03; //ETX
        temp[5] = xor_sum(temp, 1, 5);

        isrun = true;
        bTitchk = true;

        if (mSharedManager.getPreferences().getInt("Readertype", 0) == 3) //POSBANK
        {
            initSerial();

            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] TITCOMM 요청입니다(POSBANK)");

            scr = new ScrProtocolCom(MainActivity.this, "COM" + (mSharedManager.getPreferences().getInt("Portnum", 0) + 1), mSharedManager.getPreferences().getString("BaudrateStr", "115200"));

            // Serial Port Check
            int readState = scr.checkSerialPortOpened();
            if (readState != RTN_COMM_OK) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -16:리더기 연결 상태 체크해주시길 바랍니다.");
                Toast.makeText(MainActivity.this, "리더기 연결 상태 체크해주시길 바랍니다.", Toast.LENGTH_SHORT).show();
                SetResultFunc(RESULT_CANCELED, -16, "리더기 연결 상태 체크해주시길 바랍니다.");
                return -16;
            }

            scr.clearTxBuffer();
            scr.sendMsg(temp, temp.length);
            scr.clearRxBuffer();
        } else if (mSharedManager.getPreferences().getInt("Readertype", 0) == 2) //OKPOS
        {
            SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] TITCOMM 요청입니다(OKPOS)");
            mUart = new libUart();

            //LJY20201217 : 리더기 포트번호/통신속도 가변
            mUart.Init(mSharedManager.getPreferences().getInt("Portnum", 0));
            if (mUart.IsOpen(mSharedManager.getPreferences().getInt("Portnum", 0)) == false) {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] TITCOMM MUART");
                mUart.Open(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")), 8, 0, 1, true);
                mUart.SetBaudrate(mSharedManager.getPreferences().getInt("Portnum", 0), Integer.parseInt(mSharedManager.getPreferences().getString("BaudrateStr", "115200")));
            }
            mUart.QueueClear(mSharedManager.getPreferences().getInt("Portnum", 0));
            mUart.DataSend(mSharedManager.getPreferences().getInt("Portnum", 0), temp, temp.length);
        } else {
            if (usbService != null) // if UsbService was correctly binded, Send data
                usbService.write(temp);
            else {
                SharedManager.LogDebug(bLogUse, "debugjy", "[NVCAT] -15:USB 서비스 불가능합니다.");
                Toast.makeText(MainActivity.this, "-15:USB 서비스 불가능합니다.", Toast.LENGTH_SHORT).show();
                SetResultFunc(RESULT_CANCELED, -15, "USB 서비스 불가능! NVCAT 재시작 필요!"); //LJY20220427 : 문구 수정
                return -15;
            }
        }

        handlerThread = new handler_thread(handler);
        handlerThread.start();

        return 1;
    }
}
